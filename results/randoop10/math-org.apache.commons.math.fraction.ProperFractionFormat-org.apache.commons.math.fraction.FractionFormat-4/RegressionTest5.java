import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj15 = numberFormat10.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition14);
        parsePosition14.setIndex(0);
        org.apache.commons.math.fraction.Fraction fraction18 = fractionFormat5.parse("java.text.ParsePosition[index=599,errorIndex=1]", parsePosition14);
        int int19 = parsePosition14.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNotNull(strSet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u53f0\u7063" + "'", str3, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TWN" + "'", str4, "TWN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str19 = numberFormat15.format(0.008333333333333333d);
        boolean boolean20 = numberFormat15.isParseIntegerOnly();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat15.parseObject("\u65e5\u6587", parsePosition23);
        int int25 = parsePosition23.getErrorIndex();
        java.lang.Object obj26 = properFractionFormat0.parseObject("\uc601\uc5b4\ubbf8\uad6d)", parsePosition23);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.lang.String str31 = locale27.getDisplayScript(locale29);
        java.lang.String str32 = locale27.toLanguageTag();
        java.util.Set<java.lang.String> strSet33 = locale27.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale27);
        properFractionFormat0.setWholeFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits(2147483647);
        int int43 = numberFormat40.getMaximumIntegerDigits();
        fractionFormat39.setNumeratorFormat(numberFormat40);
        properFractionFormat36.setWholeFormat(numberFormat40);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1%" + "'", str19, "1%");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.lang.String str10 = locale4.getDisplayName(locale7);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str15 = locale11.getDisplayScript(locale13);
        java.lang.String str16 = locale4.getDisplayLanguage(locale13);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale17.getDisplayCountry(locale20);
        java.lang.String str25 = locale17.getISO3Language();
        java.lang.String str26 = locale17.getDisplayName();
        java.lang.String str28 = locale17.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        boolean boolean38 = numberFormat36.equals((java.lang.Object) locale37);
        boolean boolean39 = fraction34.equals((java.lang.Object) locale37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction34.abs();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        boolean boolean43 = fraction40.equals((java.lang.Object) locale41);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale41);
        java.lang.String str45 = locale17.getDisplayScript(locale41);
        java.lang.String str46 = locale4.getDisplayVariant(locale17);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale.Builder builder49 = builder47.clear();
        java.util.Locale.Builder builder50 = builder49.clearExtensions();
        java.util.Locale.Builder builder51 = builder50.clear();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.lang.String str55 = locale52.getISO3Country();
        java.util.Locale.Builder builder56 = builder50.setLocale(locale52);
        java.util.Locale.Builder builder57 = builder56.clear();
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.util.Locale locale61 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str63 = locale61.getDisplayCountry();
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getIntegerInstance(locale61);
        java.lang.String str65 = locale58.getDisplayCountry(locale61);
        java.lang.String str66 = locale58.getISO3Language();
        java.lang.String str67 = locale58.getDisplayName();
        java.util.Locale.Builder builder68 = builder57.setLocale(locale58);
        java.lang.String str69 = locale4.getDisplayVariant(locale58);
        java.lang.String str70 = locale3.getDisplayCountry(locale58);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (Taiwan)" + "'", str10, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str16, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "France" + "'", str24, "France");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fra" + "'", str25, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str26, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "kor" + "'", str53, "kor");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "France" + "'", str65, "France");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fra" + "'", str66, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str67, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj5 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat15 = fractionFormat12.getNumeratorFormat();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat12.setNumeratorFormat(numberFormat29);
        properFractionFormat9.setWholeFormat(numberFormat29);
        fractionFormat6.setNumeratorFormat(numberFormat29);
        java.lang.String str34 = numberFormat29.format((-1.0d));
        boolean boolean35 = numberFormat1.equals((java.lang.Object) numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits(2147483647);
        java.lang.String str41 = numberFormat37.format((long) 'a');
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat37);
        int int43 = numberFormat37.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str22, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "taiwan" + "'", str28, "taiwan");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9,700%" + "'", str41, "9,700%");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        int int18 = fieldPosition17.getField();
        java.lang.String str19 = fieldPosition17.toString();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28, numberFormat30);
        boolean boolean32 = numberFormat30.isGroupingUsed();
        boolean boolean33 = numberFormat30.isGroupingUsed();
        fractionFormat26.setNumeratorFormat(numberFormat30);
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        int int41 = numberFormat40.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40);
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        boolean boolean52 = numberFormat51.isGroupingUsed();
        java.util.Currency currency53 = numberFormat51.getCurrency();
        numberFormat48.setCurrency(currency53);
        java.util.Currency currency55 = numberFormat48.getCurrency();
        java.math.RoundingMode roundingMode56 = numberFormat48.getRoundingMode();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) 'a');
        java.lang.String str60 = parsePosition59.toString();
        java.lang.String str61 = parsePosition59.toString();
        java.lang.Object obj62 = numberFormat48.parseObject("zho", parsePosition59);
        java.lang.Object obj63 = fractionFormat42.parseObject("java.text.NumberFormat$Field(currency)", parsePosition59);
        java.lang.Object obj64 = numberFormat30.parseObject("Italian", parsePosition59);
        java.lang.Object obj65 = numberFormat21.parseObject("600", parsePosition59);
        java.util.Currency currency66 = numberFormat21.getCurrency();
        boolean boolean67 = fieldPosition17.equals((java.lang.Object) currency66);
        java.text.Format.Field field68 = fieldPosition17.getFieldAttribute();
        java.lang.String str69 = field68.toString();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getCurrencyInstance(locale70);
        java.lang.String str72 = locale70.getISO3Language();
        boolean boolean73 = field68.equals((java.lang.Object) str72);
        java.lang.String str74 = field68.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str19, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str60, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str61, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(field68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str69, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "eng" + "'", str72, "eng");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str74, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getScript();
        java.util.Locale locale7 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str8 = locale2.getDisplayScript(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Set<java.lang.String> strSet10 = locale2.getUnicodeLocaleKeys();
        java.lang.String str11 = locale0.getDisplayLanguage(locale2);
        java.lang.String str12 = locale2.toLanguageTag();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale2.getDisplayName(locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "it-IT" + "'", str1, "it-IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale7.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italian" + "'", str11, "Italian");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en" + "'", str12, "en");
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field10, (int) (byte) 10);
        fieldPosition13.setBeginIndex(10);
        int int16 = fieldPosition13.getEndIndex();
        int int17 = fieldPosition13.getBeginIndex();
        fieldPosition13.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer20 = numberFormat1.format((double) 0.6185567f, stringBuffer9, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        numberFormat20.setMinimumIntegerDigits(600);
        java.math.RoundingMode roundingMode31 = null;
        // The following exception was thrown during execution in test generation
        try {
            numberFormat20.setRoundingMode(roundingMode31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        int int7 = numberFormat6.getMinimumIntegerDigits();
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) '#');
        java.text.Format.Field field11 = fieldPosition10.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction14.add(fraction21);
        boolean boolean24 = field11.equals((java.lang.Object) fraction14);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field11);
        java.lang.String str26 = field11.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = numberFormat6.format((java.lang.Object) field11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CN" + "'", str4, "CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str26, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale20.toLanguageTag();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale locale27 = builder25.build();
        java.lang.String str28 = locale27.getScript();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale29.getDisplayScript(locale32);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale29.getDisplayCountry(locale36);
        java.util.Locale locale39 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str40 = locale36.getDisplayLanguage(locale39);
        java.lang.String str41 = locale27.getDisplayCountry(locale39);
        java.lang.String str42 = locale20.getDisplayVariant(locale27);
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale43.getDisplayCountry(locale44);
        java.util.Set<java.lang.String> strSet47 = locale44.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getIntegerInstance(locale44);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale44);
        java.util.Set<java.lang.Character> charSet50 = locale44.getExtensionKeys();
        java.lang.String str51 = locale27.getDisplayVariant(locale44);
        java.lang.String str52 = locale44.getDisplayCountry();
        java.lang.String str53 = locale44.getDisplayScript();
        java.util.Set<java.lang.Character> charSet54 = locale44.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = fraction12.compareTo((java.lang.Object) charSet54);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$EmptySet cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese" + "'", str30, "Chinese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertEquals(locale39.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Japan" + "'", str46, "Japan");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(charSet54);
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale0.getDisplayLanguage(locale2);
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str8 = locale2.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinesisch" + "'", str3, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Germany" + "'", str8, "Germany");
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        int int5 = numberFormat1.getMaximumIntegerDigits();
        numberFormat1.setGroupingUsed(true);
        numberFormat1.setMinimumFractionDigits((-100));
        int int10 = numberFormat1.getMinimumIntegerDigits();
        java.text.NumberFormat numberFormat12 = null;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        numberFormat17.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat17);
        java.util.Currency currency22 = numberFormat17.getCurrency();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.String str43 = parsePosition39.toString();
        java.lang.Object obj44 = numberFormat17.parseObject("ko", parsePosition39);
        int int45 = parsePosition39.getErrorIndex();
        java.lang.Object obj46 = numberFormat1.parseObject("French (Canada)", parsePosition39);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.NumberFormat numberFormat50 = properFractionFormat49.getWholeFormat();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) numberFormat53);
        properFractionFormat49.setWholeFormat(numberFormat52);
        boolean boolean56 = parsePosition39.equals((java.lang.Object) numberFormat52);
        int int57 = parsePosition39.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str43, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(10);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) '#');
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getScript();
        java.util.Locale locale10 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str11 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale10);
        int int13 = numberFormat12.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        boolean boolean16 = fieldPosition1.equals((java.lang.Object) numberFormat12);
        numberFormat12.setGroupingUsed(false);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean22 = numberFormat21.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.lang.String str25 = numberFormat21.format(0.008333333333333333d);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        properFractionFormat29.setWholeFormat(numberFormat31);
        java.text.NumberFormat numberFormat34 = properFractionFormat29.getWholeFormat();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number38 = numberFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        int int39 = parsePosition37.getIndex();
        java.lang.String str40 = parsePosition37.toString();
        java.lang.Number number41 = numberFormat21.parse("-100%", parsePosition37);
        java.lang.Object obj42 = numberFormat12.parseObject("1,000%", parsePosition37);
        int int43 = parsePosition37.getErrorIndex();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance(locale44);
        boolean boolean48 = parsePosition37.equals((java.lang.Object) numberFormat47);
        int int49 = parsePosition37.getIndex();
        parsePosition37.setIndex((-14400));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale10.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1%" + "'", str25, "1%");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(number38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + number41 + "' != '" + 1L + "'", number41, 1L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setExtension('#', "java.text.ParsePosition[index=35,errorIndex=34]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.lang.String str12 = locale3.getVariant();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale3);
        numberFormat13.setMaximumIntegerDigits((-1));
        properFractionFormat2.setDenominatorFormat(numberFormat13);
        int int17 = numberFormat13.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(10);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) '#');
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getScript();
        java.util.Locale locale10 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str11 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale10);
        int int13 = numberFormat12.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        boolean boolean16 = fieldPosition1.equals((java.lang.Object) numberFormat12);
        numberFormat12.setGroupingUsed(false);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getNumberInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat23);
        java.util.Locale locale28 = new java.util.Locale("Chinese (China)", "cor\351en", "100%");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        fractionFormat24.setNumeratorFormat(numberFormat29);
        java.lang.Class<?> wildcardClass31 = fractionFormat24.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale10.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str21, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals(locale28.toString(), "chinese (china)_COR\351EN_100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.setDefault(category18, locale25);
        java.util.Locale locale29 = java.util.Locale.getDefault(category18);
        java.util.Locale locale30 = java.util.Locale.getDefault(category18);
        java.util.Locale locale34 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category18, locale34);
        java.util.Locale.setDefault(category0, locale34);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale34);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        int int50 = numberFormat42.getMaximumFractionDigits();
        java.lang.Object obj51 = numberFormat42.clone();
        java.lang.Object obj52 = numberFormat42.clone();
        java.lang.Object obj54 = numberFormat42.parseObject("-100%");
        numberFormat42.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Locale.setDefault(category58, locale59);
        java.lang.String str62 = locale59.getDisplayVariant();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale59);
        numberFormat63.setMaximumIntegerDigits((int) (byte) 0);
        properFractionFormat57.setDenominatorFormat(numberFormat63);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance();
        numberFormat67.setMaximumIntegerDigits(2147483647);
        int int70 = numberFormat67.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field71);
        int int73 = fieldPosition72.getBeginIndex();
        boolean boolean74 = numberFormat67.equals((java.lang.Object) int73);
        properFractionFormat57.setWholeFormat(numberFormat67);
        java.text.NumberFormat numberFormat76 = properFractionFormat57.getWholeFormat();
        boolean boolean77 = numberFormat37.equals((java.lang.Object) numberFormat76);
        numberFormat76.setMinimumIntegerDigits((int) (short) 14400);
        java.lang.String str81 = numberFormat76.format((long) (short) 10);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale16.toString(), "119_2,857_ita");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals(locale34.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + (-1L) + "'", obj54, (-1L));
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,001,000%" + "'", str81, "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,001,000%");
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayName();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale0.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str3, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.lang.String str18 = locale11.getDisplayCountry(locale14);
        java.lang.String str19 = locale11.getISO3Language();
        java.lang.String str20 = locale11.getDisplayName();
        java.util.Locale.Builder builder21 = builder10.setLocale(locale11);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale11);
        numberFormat22.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "France" + "'", str18, "France");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str20, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        java.text.NumberFormat numberFormat0 = null;
        java.text.NumberFormat numberFormat1 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat4 = fractionFormat2.getNumeratorFormat();
        java.lang.Object obj5 = fractionFormat2.clone();
        org.junit.Assert.assertNull(numberFormat3);
        org.junit.Assert.assertNull(numberFormat4);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat13.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition16);
        java.lang.Object obj18 = fractionFormat9.parseObject("214,748,364,700%", parsePosition16);
        java.lang.String str19 = parsePosition16.toString();
        parsePosition16.setIndex((-120));
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList25, (java.util.Collection<java.lang.String>) strSet30, filteringMode32);
        java.lang.String str34 = java.util.Locale.lookupTag(languageRangeList23, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList44, strMap45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList44, (java.util.Collection<java.lang.String>) strList52, filteringMode55);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strSet61);
        java.util.Collection<java.lang.String> strCollection63 = null;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, strCollection63);
        java.lang.String str65 = java.util.Locale.lookupTag(languageRangeList44, strCollection63);
        java.util.Collection<java.util.Locale> localeCollection66 = null;
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList44, localeCollection66, filteringMode67);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean70 = parsePosition16.equals((java.lang.Object) languageRangeList23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str19, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode55.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode67.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = numberFormat4.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=1,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.lang.Object obj4 = numberFormat3.clone();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale6);
        java.util.Locale.setDefault(locale6);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale6.getScript();
        java.lang.String str11 = locale6.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.Object obj18 = numberFormat16.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str27 = fractionFormat25.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat28 = fractionFormat25.getNumeratorFormat();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale29.getDisplayName(locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale36.getDisplayScript(locale38);
        java.lang.String str41 = locale29.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale29);
        fractionFormat25.setNumeratorFormat(numberFormat42);
        properFractionFormat22.setWholeFormat(numberFormat42);
        fractionFormat19.setNumeratorFormat(numberFormat42);
        java.text.NumberFormat numberFormat46 = fractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = fractionFormat19.getDenominatorFormat();
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field49);
        java.lang.String str51 = fieldPosition50.toString();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale52.getDisplayName(locale53);
        boolean boolean56 = fieldPosition50.equals((java.lang.Object) locale53);
        fieldPosition50.setEndIndex((int) '#');
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getCurrencyInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat61.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition64);
        boolean boolean66 = fieldPosition50.equals((java.lang.Object) parsePosition64);
        java.lang.String str67 = parsePosition64.toString();
        int int68 = parsePosition64.getIndex();
        org.apache.commons.math.fraction.Fraction fraction69 = fractionFormat19.parse("Canada", parsePosition64);
        int int70 = parsePosition64.getErrorIndex();
        java.lang.Object obj71 = fractionFormat13.parseObject("Unable to convert {0} to fraction after {1} iterations", parsePosition64);
        java.lang.Object obj72 = numberFormat3.parseObject("zho (CHINESE (TAIWAN),Overflow trying to convert {0} to fraction ({1}/{2}))", parsePosition64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = numberFormat3.parseObject("China");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100 0 / 1" + "'", str27, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4" + "'", str41, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str51, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese (Taiwan)" + "'", str55, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str67, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getNumeratorFormat();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setLanguageTag("en");
        java.util.Locale.Builder builder20 = builder15.setExtension('a', "Korean");
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale21.toLanguageTag();
        java.lang.String str27 = locale21.getDisplayVariant();
        boolean boolean28 = locale21.hasExtensions();
        java.util.Locale.Builder builder29 = builder20.setLocale(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        org.apache.commons.math.fraction.Fraction fraction32 = fractionFormat30.parse("600");
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.AttributedCharacterIterator attributedCharacterIterator37 = numberFormat34.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj38 = numberFormat34.clone();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction46 = properFractionFormat42.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition45);
        java.lang.Object obj47 = numberFormat34.parseObject("zh-TW", parsePosition45);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.lang.String str50 = locale48.toLanguageTag();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale51.getISO3Language();
        java.lang.String str54 = locale48.getDisplayScript(locale51);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale48.getDisplayCountry(locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        boolean boolean58 = numberFormat34.equals((java.lang.Object) locale48);
        java.util.Locale locale61 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str64 = fractionFormat62.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat65 = fractionFormat62.getNumeratorFormat();
        numberFormat65.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency68 = numberFormat65.getCurrency();
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean73 = numberFormat71.equals((java.lang.Object) numberFormat72);
        java.util.Locale locale78 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        int int80 = numberFormat79.getMaximumIntegerDigits();
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getPercentInstance(locale81);
        boolean boolean83 = numberFormat82.isGroupingUsed();
        java.util.Currency currency84 = numberFormat82.getCurrency();
        numberFormat79.setCurrency(currency84);
        java.util.Currency currency86 = numberFormat79.getCurrency();
        java.math.RoundingMode roundingMode87 = numberFormat79.getRoundingMode();
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition((int) 'a');
        java.lang.String str91 = parsePosition90.toString();
        java.lang.String str92 = parsePosition90.toString();
        java.lang.Object obj93 = numberFormat79.parseObject("zho", parsePosition90);
        java.lang.String str94 = parsePosition90.toString();
        java.lang.Number number95 = numberFormat72.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition90);
        java.lang.Number number96 = numberFormat65.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition90);
        java.lang.Number number97 = numberFormat34.parse("TW", parsePosition90);
        fractionFormat30.setDenominatorFormat(numberFormat34);
        properFractionFormat3.setDenominatorFormat(numberFormat34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(attributedCharacterIterator37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNull(fraction46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-TW" + "'", str50, "zh-TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zho" + "'", str53, "zho");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Taiwan" + "'", str56, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100 0 / 1" + "'", str64, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals(locale78.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(currency84);
        org.junit.Assert.assertEquals(currency84.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency86);
        org.junit.Assert.assertEquals(currency86.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode87 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode87.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str91, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str92, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str94, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number95);
        org.junit.Assert.assertNull(number96);
        org.junit.Assert.assertNull(number97);
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale7.toLanguageTag();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale16.getDisplayScript(locale19);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale16.getDisplayCountry(locale23);
        java.util.Locale locale26 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str27 = locale23.getDisplayLanguage(locale26);
        java.lang.String str28 = locale14.getDisplayCountry(locale26);
        java.lang.String str29 = locale7.getDisplayVariant(locale14);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale40 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category33, locale40);
        java.util.Locale locale42 = java.util.Locale.getDefault(category33);
        java.lang.String str43 = locale32.getDisplayCountry(locale42);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Taiwan" + "'", str24, "Taiwan");
        org.junit.Assert.assertEquals(locale26.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals(locale40.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        long long8 = fraction7.longValue();
        boolean boolean9 = field0.equals((java.lang.Object) fraction7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = fraction7.compareTo((java.lang.Object) numberFormat17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale5);
        numberFormat7.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getWholeFormat();
        numberFormat13.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat13);
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        java.lang.Object obj18 = numberFormat17.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder27 = builder24.setVariant("");
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale28);
        java.util.Locale.Builder builder30 = builder24.setLocale(locale28);
        java.lang.String str31 = locale28.toLanguageTag();
        java.util.Locale.setDefault(category11, locale28);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale28);
        java.lang.String str34 = locale28.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-CN" + "'", str31, "zh-CN");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) '#');
        parsePosition71.setErrorIndex(600);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat9.parse("\ub300\ub9cc", parsePosition71);
        parsePosition71.setIndex(35);
        java.text.NumberFormat.Field field77 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field77);
        int int79 = fieldPosition78.getEndIndex();
        boolean boolean80 = parsePosition71.equals((java.lang.Object) fieldPosition78);
        int int81 = fieldPosition78.getEndIndex();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "100%_ZH-TW");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100% (ZH-TW)" + "'", str39, "100% (ZH-TW)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100%" + "'", str45, "100%");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        boolean boolean28 = numberFormat26.isGroupingUsed();
        java.lang.String str30 = numberFormat26.format((double) 100);
        java.lang.String str32 = numberFormat26.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat26);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition(10);
        int int37 = fieldPosition36.getEndIndex();
        fieldPosition36.setBeginIndex((int) '#');
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale40.getScript();
        java.util.Locale locale45 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str46 = locale40.getDisplayScript(locale45);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale45);
        int int48 = numberFormat47.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        boolean boolean51 = fieldPosition36.equals((java.lang.Object) numberFormat47);
        numberFormat47.setMinimumIntegerDigits((int) (byte) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat47);
        java.lang.Class<?> wildcardClass55 = numberFormat34.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10,000%" + "'", str30, "10,000%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1,000%" + "'", str32, "1,000%");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale45.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.lang.String str12 = numberFormat10.format(1.0d);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.lang.String str19 = locale13.getDisplayName(locale16);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayScript();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        java.lang.String str25 = locale13.getDisplayLanguage(locale22);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getNumberInstance(locale13);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat10.setCurrency(currency27);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayCountry(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance(locale30);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        numberFormat34.setMinimumFractionDigits(2147483647);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale38);
        boolean boolean40 = numberFormat34.equals((java.lang.Object) locale38);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        properFractionFormat44.setWholeFormat(numberFormat46);
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number53 = numberFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        parsePosition52.setIndex((int) ' ');
        java.lang.Number number56 = numberFormat34.parse("English (Canada)", parsePosition52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = numberFormat34.parseObject("Korean");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100%" + "'", str12, "100%");
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "100%_ZH-TW");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100% (ZH-TW)" + "'", str19, "100% (ZH-TW)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100%" + "'", str25, "100%");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japan" + "'", str32, "Japan");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertNull(number56);
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale0.getExtensionKeys();
        java.util.Set<java.lang.String> strSet10 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.Object obj8 = numberFormat7.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj19 = numberFormat14.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition18);
        java.lang.String str20 = parsePosition18.toString();
        java.lang.String str21 = parsePosition18.toString();
        int int22 = parsePosition18.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction23 = properFractionFormat9.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 1 to fraction (-1/-120)", parsePosition18);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        double double36 = fraction35.doubleValue();
        java.lang.StringBuffer stringBuffer37 = null;
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field38);
        java.lang.String str40 = field38.toString();
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field38);
        int int42 = fieldPosition41.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer43 = properFractionFormat9.format(fraction35, stringBuffer37, fieldPosition41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str20, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str21, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 6.944444444444444E-5d + "'", double36 == 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str40, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) (short) 0, (double) 10, (int) (short) 100);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat35.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition39);
        properFractionFormat31.setNumeratorFormat(numberFormat35);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        boolean boolean44 = numberFormat43.isParseIntegerOnly();
        numberFormat43.setGroupingUsed(false);
        properFractionFormat31.setWholeFormat(numberFormat43);
        numberFormat43.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        numberFormat43.setMinimumIntegerDigits(97);
        boolean boolean53 = fraction27.equals((java.lang.Object) numberFormat43);
        float float54 = fraction27.floatValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction23.multiply(fraction27);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertNotNull(fraction55);
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        boolean boolean4 = numberFormat1.isGroupingUsed();
        java.lang.String str6 = numberFormat1.format((double) 10L);
        java.math.RoundingMode roundingMode7 = numberFormat1.getRoundingMode();
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getBeginIndex();
        int int13 = fieldPosition11.getField();
        int int14 = fieldPosition11.getEndIndex();
        java.text.Format.Field field15 = fieldPosition11.getFieldAttribute();
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field15, (-120));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = numberFormat1.format((long) (byte) 60, stringBuffer9, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode7.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(field15);
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=1,errorIndex=3]");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str12 = locale6.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet13 = locale6.getUnicodeLocaleKeys();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category14, locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.util.Locale locale24 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale24);
        java.lang.String str26 = locale19.getDisplayScript(locale24);
        java.lang.String str27 = locale6.getDisplayLanguage(locale19);
        java.lang.String str28 = locale3.getDisplayCountry(locale6);
        java.lang.String str29 = locale1.getDisplayCountry(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = locale6.getUnicodeLocaleType("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Chinese (Taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        long long38 = fraction36.longValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction32.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        long long50 = fraction48.longValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction44.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction32.divide(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction32.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction55 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction53.divide(fraction55);
        double double57 = fraction55.doubleValue();
        int int58 = fraction55.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction55.abs();
        long long60 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction27.subtract(fraction61);
        java.lang.String str63 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 10, 60);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction27.divide(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction23.subtract(fraction66);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100 / 1" + "'", str63, "100 / 1");
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale.setDefault(locale0);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setGroupingUsed(true);
        java.util.Currency currency12 = numberFormat5.getCurrency();
        numberFormat5.setMaximumFractionDigits((int) (byte) 100);
        numberFormat5.setMinimumFractionDigits(0);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        properFractionFormat20.setWholeFormat(numberFormat22);
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getWholeFormat();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number29 = numberFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        parsePosition28.setErrorIndex(0);
        java.lang.Number number32 = numberFormat5.parse("java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=10,endIndex=0]", parsePosition28);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(number29);
        org.junit.Assert.assertNull(number32);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getIntegerInstance(locale34);
        numberFormat37.setMinimumIntegerDigits(0);
        numberFormat37.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str46 = numberFormat37.format((java.lang.Object) 100.0f);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = locale47.getISO3Country();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale47);
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        java.util.Currency currency61 = numberFormat59.getCurrency();
        numberFormat56.setCurrency(currency61);
        java.util.Currency currency63 = numberFormat56.getCurrency();
        int int64 = numberFormat56.getMaximumFractionDigits();
        java.lang.Object obj65 = numberFormat56.clone();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        numberFormat67.setMaximumFractionDigits(100);
        numberFormat67.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str74 = numberFormat67.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51, numberFormat56, numberFormat67);
        int int76 = numberFormat56.getMaximumIntegerDigits();
        boolean boolean77 = numberFormat56.isGroupingUsed();
        java.lang.Object obj78 = numberFormat56.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat37, numberFormat56);
        numberFormat56.setGroupingUsed(false);
        numberFormat56.setGroupingUsed(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = numberFormat56.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100%" + "'", str74, "100%");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(obj78);
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.reciprocal();
        double double21 = fraction20.doubleValue();
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction29.divide(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction29.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction50.divide(fraction52);
        double double54 = fraction52.doubleValue();
        int int55 = fraction52.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction52.abs();
        long long57 = fraction56.longValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction24.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        long long65 = fraction63.longValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction60.divide(fraction63);
        long long67 = fraction63.longValue();
        boolean boolean68 = fraction24.equals((java.lang.Object) fraction63);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction63.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction20.multiply(fraction63);
        double double71 = fraction20.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.016666666666666666d + "'", double21 == 0.016666666666666666d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1 / 60" + "'", str22, "1 / 60");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.016666666666666666d + "'", double71 == 0.016666666666666666d);
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat7.getWholeFormat();
        numberFormat23.setMaximumFractionDigits((int) (short) 599);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Currency currency3 = numberFormat1.getCurrency();
        numberFormat1.setMinimumFractionDigits((int) '#');
        int int6 = numberFormat1.getMaximumIntegerDigits();
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        numberFormat11.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat1.setCurrency(currency14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction26 = properFractionFormat22.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition25);
        org.apache.commons.math.fraction.Fraction fraction27 = properFractionFormat18.parse("zh_TW", parsePosition25);
        java.text.NumberFormat numberFormat28 = properFractionFormat18.getWholeFormat();
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field30);
        int int32 = fieldPosition31.getField();
        java.text.Format.Field field33 = fieldPosition31.getFieldAttribute();
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition(field33, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = numberFormat1.format((java.lang.Object) numberFormat28, stringBuffer29, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNull(fraction26);
        org.junit.Assert.assertNull(fraction27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(field33);
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        int int7 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumFractionDigits((int) (byte) 60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fractionFormat7.setNumeratorFormat(numberFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        java.util.Locale locale3 = new java.util.Locale("taiwan (ZH_TW,10,000%)", "java.text.AttributedCharacterIterator$Attribute(reading)", "Chinesisch");
        java.util.Locale locale5 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        boolean boolean13 = field10.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getDisplayVariant();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str21 = locale12.getDisplayLanguage(locale16);
        java.util.Locale locale25 = new java.util.Locale("kor", "chinois", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale16.getDisplayScript(locale25);
        java.util.Locale locale29 = locale25.stripExtensions();
        java.lang.String str30 = locale8.getDisplayScript(locale29);
        java.lang.String str31 = locale5.getDisplayVariant(locale29);
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals(locale5.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4" + "'", str9, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japan" + "'", str18, "Japan");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese" + "'", str21, "Chinese");
        org.junit.Assert.assertEquals(locale25.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.text.ParseException parseException13 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean14 = numberFormat5.equals((java.lang.Object) parseException13);
        java.lang.String str16 = numberFormat5.format((double) (-1.984127E-4f));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-0%" + "'", str16, "-0%");
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) numberFormat6);
        properFractionFormat2.setWholeFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits((-1));
        boolean boolean11 = numberFormat5.isGroupingUsed();
        numberFormat5.setMaximumIntegerDigits(10);
        numberFormat5.setMaximumFractionDigits(121);
        java.lang.Class<?> wildcardClass16 = numberFormat5.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getLanguage();
        java.util.Locale locale15 = locale9.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        short short4 = fraction2.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0 / 1" + "'", str3, "0 / 1");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 0 + "'", short4 == (short) 0);
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) parsePosition15);
        int int18 = fieldPosition1.getEndIndex();
        int int19 = fieldPosition1.getEndIndex();
        fieldPosition1.setEndIndex((-1));
        java.lang.String str22 = fieldPosition1.toString();
        java.lang.String str23 = fieldPosition1.toString();
        int int24 = fieldPosition1.getBeginIndex();
        int int25 = fieldPosition1.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str22, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str23, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = fractionFormat5.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat8 = fractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale9);
        fractionFormat5.setNumeratorFormat(numberFormat22);
        properFractionFormat2.setWholeFormat(numberFormat22);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        boolean boolean28 = numberFormat27.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction33 = properFractionFormat29.parse("0%", parsePosition32);
        java.lang.Object obj34 = properFractionFormat2.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition32);
        java.text.NumberFormat.Field field36 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition((java.text.Format.Field) field36);
        java.lang.String str38 = fieldPosition37.toString();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale39.getDisplayName(locale40);
        boolean boolean43 = fieldPosition37.equals((java.lang.Object) locale40);
        fieldPosition37.setEndIndex((int) '#');
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat48.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition51);
        boolean boolean53 = fieldPosition37.equals((java.lang.Object) parsePosition51);
        java.lang.String str54 = parsePosition51.toString();
        int int55 = parsePosition51.getIndex();
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat2.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)", parsePosition51);
        parsePosition51.setIndex(60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100 0 / 1" + "'", str7, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Korean" + "'", str15, "Korean");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(fraction33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(field36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str38, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (Taiwan)" + "'", str42, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str54, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(fraction56);
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.util.Locale locale9 = new java.util.Locale("anglais", "kor");
        java.lang.String str10 = locale1.getDisplayLanguage(locale9);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        boolean boolean15 = field11.equals((java.lang.Object) locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale13.getISO3Language();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale9.getDisplayName(locale18);
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = locale18.getDisplayName();
        java.lang.String str22 = locale18.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = locale18.getUnicodeLocaleType("French");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: French");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais (KOR)" + "'", str19, "anglais (KOR)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4" + "'", str21, "\uc601\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4" + "'", str22, "\uc601\uc5b4");
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        java.text.Format.Field field18 = fieldPosition17.getFieldAttribute();
        fieldPosition17.setBeginIndex((int) 'u');
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str25 = fractionFormat23.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat27 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat28 = fractionFormat23.getNumeratorFormat();
        boolean boolean29 = fieldPosition17.equals((java.lang.Object) numberFormat28);
        int int30 = fieldPosition17.getField();
        fieldPosition17.setEndIndex(8654399);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100 0 / 1" + "'", str25, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.String str16 = locale12.getVariant();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        java.util.Locale locale23 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str24 = locale17.getDisplayName(locale23);
        java.lang.String str25 = locale12.getDisplayName(locale23);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale30);
        java.lang.String str33 = locale30.getDisplayScript();
        java.lang.String str34 = locale26.getDisplayVariant(locale30);
        java.lang.String str35 = locale12.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.String str37 = locale12.getISO3Language();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getIntegerInstance(locale41);
        java.lang.String str45 = locale38.getDisplayCountry(locale41);
        java.lang.String str46 = locale38.getISO3Language();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance(locale38);
        java.lang.String str48 = locale38.getDisplayName();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance(locale38);
        java.lang.String str50 = locale12.getDisplayLanguage(locale38);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str19, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals(locale23.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (China)" + "'", str25, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str27, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u4e2d\u6587" + "'", str35, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zho" + "'", str37, "zho");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "France" + "'", str45, "France");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertNotNull(numberFormat47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str48, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "chinois" + "'", str50, "chinois");
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.divide(fraction9);
        double double11 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction5.reciprocal();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale13);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = fraction12.compareTo((java.lang.Object) locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.01d + "'", double11 == 0.01d);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        int int13 = fraction9.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction19.abs();
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction14.multiply(fraction19);
        int int30 = fraction19.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1 / 120" + "'", str28, "1 / 120");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120 + "'", int30 == 120);
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        boolean boolean11 = numberFormat10.isGroupingUsed();
        properFractionFormat8.setWholeFormat(numberFormat10);
        java.text.NumberFormat numberFormat13 = properFractionFormat8.getWholeFormat();
        java.util.Currency currency14 = numberFormat13.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        numberFormat22.setMaximumFractionDigits((int) (short) -1);
        int int25 = numberFormat22.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        boolean boolean29 = numberFormat28.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj39 = numberFormat34.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition38);
        properFractionFormat30.setNumeratorFormat(numberFormat34);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str48 = fractionFormat46.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat49 = fractionFormat46.getNumeratorFormat();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale53 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale53);
        java.lang.String str55 = locale53.getDisplayCountry();
        java.lang.String str56 = locale50.getDisplayName(locale53);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = locale57.getDisplayScript(locale59);
        java.lang.String str62 = locale50.getDisplayLanguage(locale59);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getNumberInstance(locale50);
        fractionFormat46.setNumeratorFormat(numberFormat63);
        properFractionFormat43.setWholeFormat(numberFormat63);
        properFractionFormat30.setWholeFormat(numberFormat63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.util.Locale locale71 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        java.lang.String[] strArray73 = java.util.Locale.getISOCountries();
        boolean boolean74 = numberFormat72.equals((java.lang.Object) strArray73);
        java.lang.String str76 = numberFormat72.format((double) (byte) -1);
        java.util.Locale locale77 = java.util.Locale.JAPAN;
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.lang.String str79 = locale78.getDisplayScript();
        java.lang.String str80 = locale77.getDisplayCountry(locale78);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getNumberInstance(locale77);
        numberFormat81.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63, numberFormat72, numberFormat81);
        properFractionFormat26.setWholeFormat(numberFormat72);
        java.text.ParsePosition parsePosition88 = new java.text.ParsePosition((int) '#');
        parsePosition88.setErrorIndex(600);
        org.apache.commons.math.fraction.Fraction fraction91 = properFractionFormat26.parse("\ub300\ub9cc", parsePosition88);
        java.lang.Object obj92 = fractionFormat15.parseObject("ja-JP", parsePosition88);
        org.apache.commons.math.fraction.Fraction fraction93 = fractionFormat2.parse("anglais", parsePosition88);
        java.lang.String str94 = parsePosition88.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100 0 / 1" + "'", str48, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Korean" + "'", str56, "Korean");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-100%" + "'", str76, "-100%");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Japan" + "'", str80, "Japan");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNull(fraction91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(fraction93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=34]" + "'", str94, "java.text.ParsePosition[index=35,errorIndex=34]");
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale19);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        numberFormat23.setMinimumFractionDigits(2147483647);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance(locale27);
        boolean boolean29 = numberFormat23.equals((java.lang.Object) locale27);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.toLanguageTag();
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getISO3Language();
        java.lang.String str36 = locale30.getDisplayScript(locale33);
        java.lang.String str37 = locale30.getDisplayName();
        java.lang.String str38 = locale27.getDisplayCountry(locale30);
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale16.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str31, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str37, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale8);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        java.math.RoundingMode roundingMode13 = numberFormat11.getRoundingMode();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setMinimumIntegerDigits(1);
        numberFormat17.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat17.parseObject("Japan", parsePosition25);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        java.lang.Object[] objArray33 = fractionConversionException30.getArguments();
        boolean boolean34 = parsePosition25.equals((java.lang.Object) objArray33);
        int int35 = parsePosition25.getIndex();
        int int36 = parsePosition25.getIndex();
        java.lang.Object obj37 = numberFormat11.parseObject("it", parsePosition25);
        fractionFormat7.setNumeratorFormat(numberFormat11);
        java.text.NumberFormat numberFormat39 = fractionFormat7.getNumeratorFormat();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance();
        int int41 = numberFormat40.getMaximumFractionDigits();
        boolean boolean42 = numberFormat40.isParseIntegerOnly();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str48 = fractionFormat46.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat49 = fractionFormat46.getNumeratorFormat();
        numberFormat49.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat43, numberFormat49);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        numberFormat54.setMaximumFractionDigits(100);
        java.lang.String str59 = numberFormat54.format((long) 100);
        int int60 = numberFormat54.getMaximumFractionDigits();
        numberFormat54.setMinimumFractionDigits((int) (short) 0);
        int int63 = numberFormat54.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode64 = numberFormat54.getRoundingMode();
        numberFormat54.setGroupingUsed(false);
        java.lang.Object obj67 = numberFormat54.clone();
        properFractionFormat52.setNumeratorFormat(numberFormat54);
        java.text.NumberFormat numberFormat69 = properFractionFormat52.getWholeFormat();
        fractionFormat7.setNumeratorFormat(numberFormat69);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode13.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100 0 / 1" + "'", str48, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "10,000%" + "'", str59, "10,000%");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat69);
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        int int29 = numberFormat9.getMaximumIntegerDigits();
        numberFormat9.setMinimumIntegerDigits((int) (short) 32);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale32);
        java.util.Currency currency35 = numberFormat34.getCurrency();
        numberFormat34.setMinimumIntegerDigits(1);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        numberFormat34.setCurrency(currency49);
        java.util.Locale locale52 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.lang.String str54 = locale52.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.util.Locale locale59 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        int int61 = numberFormat60.getMaximumIntegerDigits();
        fractionFormat55.setDenominatorFormat(numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat60);
        java.math.RoundingMode roundingMode64 = numberFormat34.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        int int72 = numberFormat71.getMaximumIntegerDigits();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale73);
        boolean boolean75 = numberFormat74.isGroupingUsed();
        java.util.Currency currency76 = numberFormat74.getCurrency();
        numberFormat71.setCurrency(currency76);
        java.util.Currency currency78 = numberFormat71.getCurrency();
        int int79 = numberFormat71.getMaximumFractionDigits();
        java.lang.Object obj80 = numberFormat71.clone();
        java.lang.StringBuffer stringBuffer81 = null;
        java.text.NumberFormat.Field field82 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition83 = new java.text.FieldPosition((java.text.Format.Field) field82);
        int int84 = fieldPosition83.getEndIndex();
        fieldPosition83.setBeginIndex((int) (byte) 100);
        java.util.Locale locale88 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale88);
        java.lang.String str91 = fractionFormat89.format((java.lang.Object) 100);
        boolean boolean92 = fieldPosition83.equals((java.lang.Object) fractionFormat89);
        int int93 = fieldPosition83.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer94 = fractionFormat66.format(obj80, stringBuffer81, fieldPosition83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "TWD");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals(locale59.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency78);
        org.junit.Assert.assertEquals(currency78.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(field82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals(locale88.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "100 0 / 1" + "'", str91, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        int int19 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean22 = numberFormat21.isGroupingUsed();
        java.util.Currency currency23 = numberFormat21.getCurrency();
        numberFormat18.setCurrency(currency23);
        java.util.Currency currency25 = numberFormat18.getCurrency();
        java.math.RoundingMode roundingMode26 = numberFormat18.getRoundingMode();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) 'a');
        java.lang.String str30 = parsePosition29.toString();
        java.lang.String str31 = parsePosition29.toString();
        java.lang.Object obj32 = numberFormat18.parseObject("zho", parsePosition29);
        properFractionFormat3.setWholeFormat(numberFormat18);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayName(locale38);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        java.lang.String str47 = locale35.getDisplayLanguage(locale44);
        java.lang.String str48 = locale35.toLanguageTag();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance(locale35);
        int int50 = numberFormat49.getMinimumFractionDigits();
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        java.util.Locale locale61 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        numberFormat62.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency65 = numberFormat62.getCurrency();
        numberFormat56.setCurrency(currency65);
        numberFormat56.setGroupingUsed(false);
        java.lang.String str70 = numberFormat56.format((double) (short) 2);
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj74 = numberFormat56.parseObject("1%", parsePosition73);
        java.lang.Number number75 = numberFormat49.parse("TAIWAN", parsePosition73);
        java.lang.Number number76 = numberFormat18.parse("-14,400", parsePosition73);
        int int77 = numberFormat18.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode26.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str30, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str31, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Korean" + "'", str41, "Korean");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko" + "'", str48, "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "200%" + "'", str70, "200%");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + 0.01d + "'", obj74, 0.01d);
        org.junit.Assert.assertNull(number75);
        org.junit.Assert.assertNull(number76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getISO3Country();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale42);
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        int int52 = numberFormat51.getMaximumIntegerDigits();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        boolean boolean55 = numberFormat54.isGroupingUsed();
        java.util.Currency currency56 = numberFormat54.getCurrency();
        numberFormat51.setCurrency(currency56);
        java.util.Currency currency58 = numberFormat51.getCurrency();
        int int59 = numberFormat51.getMaximumFractionDigits();
        java.lang.Object obj60 = numberFormat51.clone();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        numberFormat62.setMaximumFractionDigits(100);
        numberFormat62.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str69 = numberFormat62.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat51, numberFormat62);
        java.text.NumberFormat numberFormat71 = properFractionFormat70.getWholeFormat();
        java.util.Locale locale75 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        int int77 = numberFormat76.getMaximumIntegerDigits();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        boolean boolean80 = numberFormat79.isGroupingUsed();
        java.util.Currency currency81 = numberFormat79.getCurrency();
        numberFormat76.setCurrency(currency81);
        java.util.Currency currency83 = numberFormat76.getCurrency();
        java.math.RoundingMode roundingMode84 = numberFormat76.getRoundingMode();
        properFractionFormat70.setWholeFormat(numberFormat76);
        java.text.NumberFormat numberFormat86 = properFractionFormat70.getWholeFormat();
        java.text.NumberFormat numberFormat87 = properFractionFormat70.getNumeratorFormat();
        int int88 = numberFormat87.getMaximumIntegerDigits();
        properFractionFormat40.setDenominatorFormat(numberFormat87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = properFractionFormat40.parseObject("coreano");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100%" + "'", str69, "100%");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals(locale75.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(currency81);
        org.junit.Assert.assertEquals(currency81.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency83);
        org.junit.Assert.assertEquals(currency83.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode84 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode84.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        boolean boolean9 = locale6.hasExtensions();
        java.lang.String str10 = locale3.getDisplayScript(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.lang.String str12 = locale6.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr_CA" + "'", str12, "fr_CA");
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        java.util.Locale locale2 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        boolean boolean6 = numberFormat5.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits((int) (byte) -120);
        boolean boolean10 = numberFormat3.equals((java.lang.Object) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        int int12 = numberFormat3.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale2.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMaximumIntegerDigits((int) 'a');
        numberFormat11.setMinimumFractionDigits((int) (short) -14400);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale17);
        boolean boolean21 = numberFormat20.isParseIntegerOnly();
        java.math.RoundingMode roundingMode22 = numberFormat20.getRoundingMode();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat26.setMinimumIntegerDigits(1);
        numberFormat26.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj35 = numberFormat26.parseObject("Japan", parsePosition34);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException39 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str40 = fractionConversionException39.getPattern();
        java.lang.Throwable[] throwableArray41 = fractionConversionException39.getSuppressed();
        java.lang.Object[] objArray42 = fractionConversionException39.getArguments();
        boolean boolean43 = parsePosition34.equals((java.lang.Object) objArray42);
        int int44 = parsePosition34.getIndex();
        int int45 = parsePosition34.getIndex();
        java.lang.Object obj46 = numberFormat20.parseObject("it", parsePosition34);
        properFractionFormat16.setWholeFormat(numberFormat20);
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52);
        boolean boolean55 = numberFormat52.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat57 = properFractionFormat56.getWholeFormat();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        numberFormat59.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57, numberFormat59);
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getInstance(locale64);
        boolean boolean66 = numberFormat65.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.text.NumberFormat numberFormat68 = properFractionFormat67.getWholeFormat();
        numberFormat68.setMinimumFractionDigits((int) (byte) 0);
        numberFormat68.setMinimumFractionDigits(60);
        numberFormat68.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode75 = numberFormat68.getRoundingMode();
        numberFormat57.setRoundingMode(roundingMode75);
        numberFormat52.setRoundingMode(roundingMode75);
        numberFormat20.setRoundingMode(roundingMode75);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + roundingMode22 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode22.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str40, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + roundingMode75 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode75.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.multiply(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        long long21 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction22.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction2.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction34 = new org.apache.commons.math.fraction.Fraction((double) 600);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction2.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        numberFormat39.setMaximumFractionDigits(100);
        java.lang.String str44 = numberFormat39.format((long) 100);
        properFractionFormat37.setWholeFormat(numberFormat39);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException48 = new org.apache.commons.math.fraction.FractionConversionException((double) (byte) 0, 3);
        java.text.AttributedCharacterIterator attributedCharacterIterator49 = numberFormat39.formatToCharacterIterator((java.lang.Object) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = fraction35.compareTo((java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Byte cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10,000%" + "'", str44, "10,000%");
        org.junit.Assert.assertNotNull(attributedCharacterIterator49);
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getISO3Language();
        java.lang.String str9 = locale0.getDisplayName();
        java.lang.String str11 = locale0.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) locale20);
        boolean boolean22 = fraction17.equals((java.lang.Object) locale20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction17.abs();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale24);
        boolean boolean26 = fraction23.equals((java.lang.Object) locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str28 = locale0.getDisplayScript(locale24);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale24);
        numberFormat29.setParseIntegerOnly(true);
        numberFormat29.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str9, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) parsePosition15);
        java.lang.String str18 = parsePosition15.toString();
        parsePosition15.setErrorIndex((int) (short) 10);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency22 = numberFormat21.getCurrency();
        java.lang.String str24 = numberFormat21.format(1.0d);
        int int25 = numberFormat21.getMinimumIntegerDigits();
        boolean boolean26 = parsePosition15.equals((java.lang.Object) int25);
        parsePosition15.setIndex(0);
        java.lang.String str29 = parsePosition15.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency22);
// flaky:         org.junit.Assert.assertEquals(currency22.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100 %" + "'", str24, "100 %");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=10]" + "'", str29, "java.text.ParsePosition[index=0,errorIndex=10]");
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.AttributedCharacterIterator attributedCharacterIterator11 = numberFormat8.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj12 = numberFormat8.clone();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        java.lang.Object obj21 = numberFormat8.parseObject("zh-TW", parsePosition19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale22.getDisplayScript(locale25);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale22.getDisplayCountry(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        boolean boolean32 = numberFormat8.equals((java.lang.Object) locale22);
        int int33 = numberFormat8.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat8);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        long long45 = fraction43.longValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction39.multiply(fraction43);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        long long57 = fraction55.longValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction51.multiply(fraction55);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction43.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction64);
        java.lang.StringBuffer stringBuffer66 = null;
        java.text.NumberFormat.Field field67 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition((java.text.Format.Field) field67);
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition((java.text.Format.Field) field67, (int) '#');
        boolean boolean72 = fieldPosition70.equals((java.lang.Object) (byte) -1);
        fieldPosition70.setEndIndex((int) ' ');
        int int75 = fieldPosition70.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = fractionFormat34.format(fraction64, stringBuffer66, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(attributedCharacterIterator11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str23, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zho" + "'", str27, "zho");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Taiwan" + "'", str30, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(field67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale5);
        java.util.Currency currency8 = numberFormat7.getCurrency();
        numberFormat7.setMinimumIntegerDigits(1);
        numberFormat7.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat7.parseObject("Japan", parsePosition15);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str21 = fractionConversionException20.getPattern();
        java.lang.Throwable[] throwableArray22 = fractionConversionException20.getSuppressed();
        java.lang.Object[] objArray23 = fractionConversionException20.getArguments();
        boolean boolean24 = parsePosition15.equals((java.lang.Object) objArray23);
        int int25 = parsePosition15.getIndex();
        java.lang.String str26 = parsePosition15.toString();
        java.lang.Object obj27 = numberFormat0.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Currency currency29 = numberFormat0.getCurrency();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number31 = numberFormat0.parse("zh,tw");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"zh,tw\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
// flaky:         org.junit.Assert.assertEquals(currency1.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100 %" + "'", str3, "100 %");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "TWD");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str21, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(currency29);
// flaky:         org.junit.Assert.assertEquals(currency29.toString(), "CAD");
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        numberFormat8.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str12 = numberFormat8.format((double) 0.0f);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat17, numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        numberFormat26.setMinimumIntegerDigits(0);
        numberFormat26.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat20, numberFormat26);
        boolean boolean32 = numberFormat1.isParseIntegerOnly();
        numberFormat1.setMaximumIntegerDigits(600);
        numberFormat1.setMaximumIntegerDigits((int) (short) 98);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0%" + "'", str12, "0%");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.getScript();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction(0, 11);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.reciprocal();
        int int35 = fraction32.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        long long50 = fraction48.longValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction44.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        long long62 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction56.multiply(fraction60);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction48.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction67 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str68 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction48.subtract(fraction67);
        long long70 = fraction67.longValue();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction39.divide(fraction67);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction32.divide(fraction74);
        int int76 = fraction74.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction8.divide(fraction74);
        java.lang.StringBuffer stringBuffer78 = null;
        java.text.NumberFormat.Field field79 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition((java.text.Format.Field) field79);
        int int81 = fieldPosition80.getEndIndex();
        int int82 = fieldPosition80.getField();
        java.lang.String str83 = fieldPosition80.toString();
        java.text.Format.Field field84 = fieldPosition80.getFieldAttribute();
        java.text.FieldPosition fieldPosition85 = new java.text.FieldPosition(field84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer86 = numberFormat5.format((java.lang.Object) fraction77, stringBuffer78, fieldPosition85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 / 100" + "'", str68, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(field79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str83, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field84);
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale10);
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale10.getISO3Language();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        numberFormat12.setMaximumFractionDigits(100);
        numberFormat12.setMaximumFractionDigits((int) (byte) 100);
        int int18 = numberFormat12.getMinimumFractionDigits();
        properFractionFormat10.setWholeFormat(numberFormat12);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        boolean boolean22 = numberFormat21.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat23.getWholeFormat();
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field27);
        int int29 = fieldPosition28.getEndIndex();
        fieldPosition28.setBeginIndex((int) (byte) 100);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str36 = fractionFormat34.format((java.lang.Object) 100);
        boolean boolean37 = fieldPosition28.equals((java.lang.Object) fractionFormat34);
        java.text.Format.Field field38 = fieldPosition28.getFieldAttribute();
        int int39 = fieldPosition28.getField();
        int int40 = fieldPosition28.getEndIndex();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException44 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) (byte) 100, (long) (short) 100);
        java.lang.Throwable[] throwableArray45 = fractionConversionException44.getSuppressed();
        java.text.ParseException parseException48 = new java.text.ParseException("Korean", (int) (short) 1);
        int int49 = parseException48.getErrorOffset();
        fractionConversionException44.addSuppressed((java.lang.Throwable) parseException48);
        boolean boolean51 = fieldPosition28.equals((java.lang.Object) parseException48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer52 = properFractionFormat10.format((java.lang.Object) numberFormat25, stringBuffer26, fieldPosition28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100 0 / 1" + "'", str36, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        numberFormat3.setGroupingUsed(false);
        numberFormat3.setMaximumIntegerDigits(1);
        numberFormat3.setMaximumFractionDigits(120);
        numberFormat3.setMaximumIntegerDigits((int) (short) -16165);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.divide(fraction41);
        int int44 = fraction38.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str56 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction55);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        long long72 = fraction70.longValue();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction66.multiply(fraction70);
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction81 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.negate();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.abs();
        long long84 = fraction82.longValue();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction78.multiply(fraction82);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction70.subtract(fraction85);
        org.apache.commons.math.fraction.Fraction fraction89 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str90 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction89);
        org.apache.commons.math.fraction.Fraction fraction91 = fraction70.subtract(fraction89);
        long long92 = fraction89.longValue();
        org.apache.commons.math.fraction.Fraction fraction93 = fraction61.divide(fraction89);
        org.apache.commons.math.fraction.Fraction fraction94 = fraction55.multiply(fraction93);
        boolean boolean95 = fraction51.equals((java.lang.Object) fraction55);
        org.apache.commons.math.fraction.Fraction fraction96 = fraction12.subtract(fraction55);
        byte byte97 = fraction55.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0 / 1" + "'", str56, "0 / 1");
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "-1 / 100" + "'", str90, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertTrue("'" + byte97 + "' != '" + (byte) 0 + "'", byte97 == (byte) 0);
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj49 = numberFormat44.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition48);
        java.lang.String str50 = parsePosition48.toString();
        java.lang.String str51 = parsePosition48.toString();
        int int52 = parsePosition48.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat28.parse("214,748,364,700%", parsePosition48);
        int int54 = parsePosition48.getErrorIndex();
        int int55 = parsePosition48.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str50, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str51, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        short short4 = fraction2.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "35 / 2" + "'", str3, "35 / 2");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 17 + "'", short4 == (short) 17);
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        boolean boolean11 = numberFormat9.equals((java.lang.Object) strArray10);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode24);
        boolean boolean26 = numberFormat9.isParseIntegerOnly();
        properFractionFormat4.setWholeFormat(numberFormat9);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition(14400);
        java.util.Locale locale34 = new java.util.Locale("java.text.parseexception: zh_tw", "java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=0]", "anglais");
        boolean boolean35 = parsePosition30.equals((java.lang.Object) "java.text.parseexception: zh_tw");
        int int36 = parsePosition30.getIndex();
        java.lang.String str37 = parsePosition30.toString();
        java.lang.String str38 = parsePosition30.toString();
        int int39 = parsePosition30.getIndex();
        org.apache.commons.math.fraction.Fraction fraction40 = properFractionFormat4.parse("", parsePosition30);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale34.toString(), "java.text.parseexception: zh_tw_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_anglais");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14400 + "'", int36 == 14400);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.ParsePosition[index=14400,errorIndex=-1]" + "'", str37, "java.text.ParsePosition[index=14400,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=14400,errorIndex=-1]" + "'", str38, "java.text.ParsePosition[index=14400,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14400 + "'", int39 == 14400);
        org.junit.Assert.assertNull(fraction40);
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        java.text.NumberFormat numberFormat20 = fractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        numberFormat27.setMaximumFractionDigits((int) (short) -1);
        int int30 = numberFormat27.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.NumberFormat numberFormat32 = properFractionFormat31.getWholeFormat();
        numberFormat32.setMinimumFractionDigits((int) (byte) 100);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.lang.String str41 = numberFormat37.format(0.008333333333333333d);
        boolean boolean42 = numberFormat37.isParseIntegerOnly();
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj46 = numberFormat37.parseObject("\u65e5\u6587", parsePosition45);
        int int47 = parsePosition45.getErrorIndex();
        java.lang.String str48 = parsePosition45.toString();
        java.lang.String str49 = parsePosition45.toString();
        java.lang.Object obj50 = numberFormat32.parseObject("Italian", parsePosition45);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale51);
        boolean boolean53 = numberFormat52.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.text.NumberFormat numberFormat55 = properFractionFormat54.getWholeFormat();
        numberFormat55.setMinimumFractionDigits((int) (byte) 0);
        numberFormat55.setMinimumFractionDigits(60);
        numberFormat55.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode62 = numberFormat55.getRoundingMode();
        numberFormat32.setRoundingMode(roundingMode62);
        fractionFormat21.setNumeratorFormat(numberFormat32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat21.parse("zh-CN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"zh-CN\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1%" + "'", str41, "1%");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str48, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + roundingMode62 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode62.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getWholeFormat();
        numberFormat10.setMinimumFractionDigits((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = numberFormat10.parse("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"??\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        numberFormat4.setMinimumFractionDigits((int) (short) 1);
        boolean boolean16 = numberFormat4.isGroupingUsed();
        boolean boolean17 = numberFormat4.isGroupingUsed();
        java.lang.String str19 = numberFormat4.format(1L);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        boolean boolean23 = numberFormat22.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj33 = numberFormat28.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition32);
        properFractionFormat24.setNumeratorFormat(numberFormat28);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str42 = fractionFormat40.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat43 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale51.getDisplayScript(locale53);
        java.lang.String str56 = locale44.getDisplayLanguage(locale53);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale44);
        fractionFormat40.setNumeratorFormat(numberFormat57);
        properFractionFormat37.setWholeFormat(numberFormat57);
        properFractionFormat24.setWholeFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        java.lang.String[] strArray67 = java.util.Locale.getISOCountries();
        boolean boolean68 = numberFormat66.equals((java.lang.Object) strArray67);
        java.lang.String str70 = numberFormat66.format((double) (byte) -1);
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale72.getDisplayScript();
        java.lang.String str74 = locale71.getDisplayCountry(locale72);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getNumberInstance(locale71);
        numberFormat75.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat66, numberFormat75);
        java.text.ParsePosition parsePosition81 = new java.text.ParsePosition(119);
        int int82 = parsePosition81.getIndex();
        java.lang.Number number83 = numberFormat75.parse("java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(exponent),beginIndex=0,endIndex=32]", parsePosition81);
        java.lang.Object obj84 = numberFormat4.parseObject("java.text.ParsePosition[index=52,errorIndex=600]", parsePosition81);
        parsePosition81.setIndex((int) (byte) 37);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100.0%" + "'", str19, "100.0%");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100 0 / 1" + "'", str42, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Korean" + "'", str50, "Korean");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str56, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals(locale65.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-100%" + "'", str70, "-100%");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Japan" + "'", str74, "Japan");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 119 + "'", int82 == 119);
        org.junit.Assert.assertNull(number83);
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        boolean boolean23 = numberFormat18.isGroupingUsed();
        numberFormat18.setMinimumIntegerDigits((int) (byte) 1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Currency currency3 = numberFormat1.getCurrency();
        numberFormat1.setMinimumFractionDigits((int) '#');
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        java.lang.String str12 = numberFormat10.format((double) 10L);
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str16 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction15);
        long long17 = fraction15.longValue();
        java.util.Locale locale21 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        int int23 = numberFormat22.getMaximumIntegerDigits();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        numberFormat28.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency31 = numberFormat28.getCurrency();
        numberFormat22.setCurrency(currency31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        boolean boolean34 = fraction15.equals((java.lang.Object) properFractionFormat33);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        int int41 = numberFormat39.getMaximumFractionDigits();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39, numberFormat43);
        java.util.Currency currency48 = numberFormat39.getCurrency();
        properFractionFormat33.setWholeFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat10, numberFormat39);
        java.lang.Object obj51 = numberFormat1.clone();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1,000%" + "'", str12, "1,000%");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 / 100" + "'", str16, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) 'a');
        java.lang.String str72 = parsePosition71.toString();
        java.lang.String str73 = parsePosition71.toString();
        java.lang.Object obj74 = properFractionFormat9.parseObject("zh-tw", parsePosition71);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale75);
        properFractionFormat9.setNumeratorFormat(numberFormat76);
        boolean boolean78 = numberFormat76.isParseIntegerOnly();
        int int79 = numberFormat76.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Korean" + "'", str39, "Korean");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str72, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str73, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        int int1 = numberFormat0.getMaximumFractionDigits();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.lang.String str8 = locale2.getDisplayName(locale5);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.lang.String str14 = locale2.getDisplayLanguage(locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale2);
        java.util.Currency currency16 = numberFormat15.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        long long27 = fraction25.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.multiply(fraction25);
        boolean boolean29 = numberFormat15.equals((java.lang.Object) fraction21);
        numberFormat15.setGroupingUsed(false);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean36 = numberFormat34.equals((java.lang.Object) numberFormat35);
        java.lang.Object obj37 = numberFormat35.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean42 = numberFormat40.equals((java.lang.Object) numberFormat41);
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        boolean boolean52 = numberFormat51.isGroupingUsed();
        java.util.Currency currency53 = numberFormat51.getCurrency();
        numberFormat48.setCurrency(currency53);
        java.util.Currency currency55 = numberFormat48.getCurrency();
        java.math.RoundingMode roundingMode56 = numberFormat48.getRoundingMode();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) 'a');
        java.lang.String str60 = parsePosition59.toString();
        java.lang.String str61 = parsePosition59.toString();
        java.lang.Object obj62 = numberFormat48.parseObject("zho", parsePosition59);
        java.lang.String str63 = parsePosition59.toString();
        java.lang.Number number64 = numberFormat41.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition59);
        java.lang.Object obj65 = numberFormat35.parseObject("cor\351en", parsePosition59);
        int int66 = parsePosition59.getErrorIndex();
        java.lang.Number number67 = numberFormat15.parse("Taiwan", parsePosition59);
        java.util.Currency currency68 = numberFormat15.getCurrency();
        numberFormat0.setCurrency(currency68);
        java.lang.String str71 = numberFormat0.format((double) 50112000);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Korean" + "'", str8, "Korean");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str60, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str61, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str63, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\244 50,112,000.00" + "'", str71, "\244 50,112,000.00");
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat1 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj5 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat15 = fractionFormat12.getNumeratorFormat();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat12.setNumeratorFormat(numberFormat29);
        properFractionFormat9.setWholeFormat(numberFormat29);
        fractionFormat6.setNumeratorFormat(numberFormat29);
        java.lang.String str34 = numberFormat29.format((-1.0d));
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale35);
        boolean boolean39 = numberFormat38.isParseIntegerOnly();
        java.math.RoundingMode roundingMode40 = numberFormat38.getRoundingMode();
        java.lang.Object obj41 = numberFormat38.clone();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) 'a');
        java.lang.String str44 = parsePosition43.toString();
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clearExtensions();
        java.util.Locale.Builder builder47 = builder45.clear();
        java.util.Locale.Builder builder48 = builder47.clear();
        boolean boolean49 = parsePosition43.equals((java.lang.Object) builder48);
        java.util.Locale.Builder builder51 = builder48.setVariant("Japan");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        boolean boolean53 = numberFormat38.equals((java.lang.Object) builder51);
        java.math.RoundingMode roundingMode54 = numberFormat38.getRoundingMode();
        numberFormat29.setRoundingMode(roundingMode54);
        properFractionFormat1.setWholeFormat(numberFormat29);
        java.text.NumberFormat numberFormat57 = properFractionFormat1.getDenominatorFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Korean" + "'", str22, "Korean");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + roundingMode40 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode40.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str44, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat57);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale3.getDisplayName(locale4);
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale3.getDisplayCountry(locale10);
        boolean boolean16 = locale10.hasExtensions();
        java.lang.String str17 = locale10.getISO3Country();
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str8, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ZH_TW" + "'", str15, "ZH_TW");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        int int6 = fraction2.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.reciprocal();
        java.lang.String str9 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction8);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction8);
        short short11 = fraction8.shortValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 / 1" + "'", str9, "100 / 1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100 / 1" + "'", str10, "100 / 1");
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 100 + "'", short11 == (short) 100);
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.lang.String str8 = numberFormat4.format((double) (byte) -1);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale14 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str15 = locale14.getDisplayCountry();
        java.lang.String str16 = locale9.getDisplayName(locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale9);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category18, locale23);
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale locale28 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale28);
        java.lang.String str30 = locale23.getDisplayScript(locale28);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.util.Set<java.lang.Character> charSet34 = locale32.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale32.getDisplayVariant(locale35);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj49 = numberFormat44.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition48);
        java.lang.String str50 = parsePosition48.toString();
        boolean boolean52 = parsePosition48.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat39.parse("java.text.ParseException: zh_TW", parsePosition48);
        java.text.NumberFormat numberFormat54 = properFractionFormat39.getDenominatorFormat();
        int int55 = numberFormat54.getMinimumIntegerDigits();
        java.util.Locale locale59 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        int int61 = numberFormat60.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode62 = numberFormat60.getRoundingMode();
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale64);
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getInstance(locale67);
        java.util.Currency currency70 = numberFormat69.getCurrency();
        numberFormat69.setMinimumIntegerDigits(1);
        numberFormat69.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj78 = numberFormat69.parseObject("Japan", parsePosition77);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException82 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str83 = fractionConversionException82.getPattern();
        java.lang.Throwable[] throwableArray84 = fractionConversionException82.getSuppressed();
        java.lang.Object[] objArray85 = fractionConversionException82.getArguments();
        boolean boolean86 = parsePosition77.equals((java.lang.Object) objArray85);
        int int87 = parsePosition77.getIndex();
        int int88 = parsePosition77.getIndex();
        java.lang.Object obj89 = fractionFormat65.parseObject("\ud55c\uad6d\uc5b4", parsePosition77);
        java.lang.Number number90 = numberFormat60.parse("1 / 100", parsePosition77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat54, numberFormat60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat17, numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-100%" + "'", str8, "-100%");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale14.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Korean" + "'", str16, "Korean");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fra" + "'", str25, "fra");
        org.junit.Assert.assertEquals(locale28.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str50, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals(locale59.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode62 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode62.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "TWD");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str83, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(number90);
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        int int54 = numberFormat18.getMinimumIntegerDigits();
        java.lang.String str56 = numberFormat18.format((double) (byte) 87);
        int int57 = numberFormat18.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "87" + "'", str56, "87");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        java.util.Currency currency62 = numberFormat60.getCurrency();
        numberFormat57.setCurrency(currency62);
        java.util.Currency currency64 = numberFormat57.getCurrency();
        java.math.RoundingMode roundingMode65 = numberFormat57.getRoundingMode();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) 'a');
        java.lang.String str69 = parsePosition68.toString();
        java.lang.String str70 = parsePosition68.toString();
        java.lang.Object obj71 = numberFormat57.parseObject("zho", parsePosition68);
        java.lang.Object obj72 = fractionFormat51.parseObject("java.text.NumberFormat$Field(currency)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat2.parse("", parsePosition68);
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) (short) -1);
        int int77 = parsePosition76.getIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction78 = properFractionFormat2.parse("English", parsePosition76);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str69, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str70, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        numberFormat19.setMinimumIntegerDigits(2);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        properFractionFormat25.setWholeFormat(numberFormat27);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale30);
        java.util.Currency currency44 = numberFormat43.getCurrency();
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        numberFormat49.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode54 = numberFormat49.getRoundingMode();
        numberFormat43.setRoundingMode(roundingMode54);
        numberFormat27.setRoundingMode(roundingMode54);
        numberFormat19.setRoundingMode(roundingMode54);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Korean" + "'", str36, "Korean");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getVariant();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setScript("");
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale10.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder9.setLocale(locale10);
        java.lang.String str15 = locale4.getDisplayVariant(locale10);
        java.lang.String str16 = locale10.getDisplayName();
        java.lang.String str17 = locale10.getDisplayName();
        java.lang.String str18 = locale1.getDisplayScript(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getISO3Country();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale21);
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        int int31 = numberFormat30.getMaximumIntegerDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        boolean boolean34 = numberFormat33.isGroupingUsed();
        java.util.Currency currency35 = numberFormat33.getCurrency();
        numberFormat30.setCurrency(currency35);
        java.util.Currency currency37 = numberFormat30.getCurrency();
        int int38 = numberFormat30.getMaximumFractionDigits();
        java.lang.Object obj39 = numberFormat30.clone();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        numberFormat41.setMaximumFractionDigits(100);
        numberFormat41.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str48 = numberFormat41.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat30, numberFormat41);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52, numberFormat54);
        numberFormat54.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field59);
        java.lang.String str61 = fieldPosition60.toString();
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str65 = locale62.getDisplayName(locale63);
        boolean boolean66 = fieldPosition60.equals((java.lang.Object) locale63);
        fieldPosition60.setEndIndex((int) '#');
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getCurrencyInstance(locale69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat71.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition74);
        boolean boolean76 = fieldPosition60.equals((java.lang.Object) parsePosition74);
        java.lang.Number number77 = numberFormat54.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition74);
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.negate();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction81.abs();
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getInstance(locale84);
        java.util.Locale locale86 = java.util.Locale.getDefault();
        boolean boolean87 = numberFormat85.equals((java.lang.Object) locale86);
        boolean boolean88 = fraction83.equals((java.lang.Object) locale86);
        boolean boolean89 = parsePosition74.equals((java.lang.Object) locale86);
        org.apache.commons.math.fraction.Fraction fraction90 = properFractionFormat49.parse("zh-CN", parsePosition74);
        org.apache.commons.math.fraction.Fraction fraction91 = fractionFormat19.parse("CHINESE (TAIWAN)", parsePosition74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction93 = fractionFormat19.parse("java.text.FieldPosition[field=32,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.FieldPosition[field=32,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "francese (Francia)" + "'", str3, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinesisch" + "'", str13, "Chinesisch");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str16, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str17, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale29.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100%" + "'", str48, "100%");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str61, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (Taiwan)" + "'", str65, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(locale86);
// flaky:         org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(fraction90);
        org.junit.Assert.assertNull(fraction91);
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale8);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        java.math.RoundingMode roundingMode13 = numberFormat11.getRoundingMode();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setMinimumIntegerDigits(1);
        numberFormat17.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat17.parseObject("Japan", parsePosition25);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        java.lang.Object[] objArray33 = fractionConversionException30.getArguments();
        boolean boolean34 = parsePosition25.equals((java.lang.Object) objArray33);
        int int35 = parsePosition25.getIndex();
        int int36 = parsePosition25.getIndex();
        java.lang.Object obj37 = numberFormat11.parseObject("it", parsePosition25);
        fractionFormat7.setNumeratorFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean49 = numberFormat48.isGroupingUsed();
        java.util.Currency currency50 = numberFormat48.getCurrency();
        numberFormat45.setCurrency(currency50);
        properFractionFormat40.setWholeFormat(numberFormat45);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj65 = numberFormat60.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition64);
        java.lang.String str66 = parsePosition64.toString();
        java.lang.Object obj67 = fractionFormat55.parseObject("\uc911\uad6d\uc5b4", parsePosition64);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat40.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition64);
        int int69 = parsePosition64.getErrorIndex();
        java.lang.String str70 = parsePosition64.toString();
        org.apache.commons.math.fraction.Fraction fraction71 = fractionFormat7.parse("\u7fa9\u5927\u5229\u6587", parsePosition64);
        java.util.Locale locale72 = java.util.Locale.KOREA;
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator73 = fractionFormat7.formatToCharacterIterator((java.lang.Object) locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode13.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str66, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str70, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko_KR");
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        numberFormat6.setParseIntegerOnly(true);
        int int9 = numberFormat6.getMaximumIntegerDigits();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale15.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str22 = locale15.getDisplayScript(locale20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.util.Set<java.lang.Character> charSet26 = locale24.getExtensionKeys();
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale24.getDisplayVariant(locale27);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat36);
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj41 = numberFormat36.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition40);
        java.lang.String str42 = parsePosition40.toString();
        boolean boolean44 = parsePosition40.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat31.parse("java.text.ParseException: zh_TW", parsePosition40);
        java.text.NumberFormat numberFormat46 = properFractionFormat31.getDenominatorFormat();
        int int47 = numberFormat46.getMinimumIntegerDigits();
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode54 = numberFormat52.getRoundingMode();
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale56);
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance(locale59);
        java.util.Currency currency62 = numberFormat61.getCurrency();
        numberFormat61.setMinimumIntegerDigits(1);
        numberFormat61.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj70 = numberFormat61.parseObject("Japan", parsePosition69);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException74 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str75 = fractionConversionException74.getPattern();
        java.lang.Throwable[] throwableArray76 = fractionConversionException74.getSuppressed();
        java.lang.Object[] objArray77 = fractionConversionException74.getArguments();
        boolean boolean78 = parsePosition69.equals((java.lang.Object) objArray77);
        int int79 = parsePosition69.getIndex();
        int int80 = parsePosition69.getIndex();
        java.lang.Object obj81 = fractionFormat57.parseObject("\ud55c\uad6d\uc5b4", parsePosition69);
        java.lang.Number number82 = numberFormat52.parse("1 / 100", parsePosition69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat46, numberFormat52);
        boolean boolean84 = numberFormat6.equals((java.lang.Object) numberFormat52);
        java.util.Locale locale86 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getInstance(locale86);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getPercentInstance(locale88);
        org.apache.commons.math.fraction.FractionFormat fractionFormat90 = new org.apache.commons.math.fraction.FractionFormat(numberFormat87, numberFormat89);
        boolean boolean91 = numberFormat89.isGroupingUsed();
        boolean boolean92 = numberFormat89.isGroupingUsed();
        java.text.ParsePosition parsePosition95 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj96 = numberFormat89.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition95);
        java.lang.String str97 = parsePosition95.toString();
        java.lang.Number number98 = numberFormat6.parse("\uc774\ud0c8\ub9ac\uc544\uc5b4", parsePosition95);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str42, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "TWD");
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str75, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str97, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number98);
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "TWN");
        java.util.Locale.Builder builder14 = builder12.setLanguageTag("Canada");
        boolean boolean15 = field0.equals((java.lang.Object) builder12);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = locale18.getISO3Country();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale18);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        int int35 = numberFormat27.getMaximumFractionDigits();
        java.lang.Object obj36 = numberFormat27.clone();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        numberFormat38.setMaximumFractionDigits(100);
        numberFormat38.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str45 = numberFormat38.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat27, numberFormat38);
        java.text.NumberFormat.Field field48 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field48);
        java.lang.String str50 = fieldPosition49.toString();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale51.getDisplayName(locale52);
        boolean boolean55 = fieldPosition49.equals((java.lang.Object) locale52);
        fieldPosition49.setEndIndex((int) '#');
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance(locale58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction64 = properFractionFormat60.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition63);
        boolean boolean65 = fieldPosition49.equals((java.lang.Object) parsePosition63);
        int int66 = parsePosition63.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat46.parse("hi!", parsePosition63);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getInstance(locale68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = new org.apache.commons.math.fraction.FractionFormat(numberFormat69, numberFormat71);
        boolean boolean73 = numberFormat71.isGroupingUsed();
        boolean boolean74 = numberFormat71.isGroupingUsed();
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj78 = numberFormat71.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition77);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getNumeratorFormat();
        properFractionFormat46.setWholeFormat(numberFormat80);
        boolean boolean82 = field0.equals((java.lang.Object) numberFormat80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number84 = numberFormat80.parse("\244 35.00");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"? 35.00\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100%" + "'", str45, "100%");
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (Taiwan)" + "'", str54, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNull(fraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getNumeratorFormat();
        java.lang.Object obj3 = numberFormat2.clone();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getScript();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.lang.String str7 = locale4.getLanguage();
        java.lang.String str8 = locale4.getScript();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = numberFormat2.format((java.lang.Object) locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.Object obj8 = numberFormat7.clone();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        numberFormat13.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        java.lang.String str20 = fieldPosition19.toString();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayName(locale22);
        boolean boolean25 = fieldPosition19.equals((java.lang.Object) locale22);
        fieldPosition19.setEndIndex((int) '#');
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        boolean boolean35 = fieldPosition19.equals((java.lang.Object) parsePosition33);
        java.lang.Number number36 = numberFormat13.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition33);
        java.lang.Object obj37 = numberFormat7.parseObject("\ud55c\uad6d\uc5b4", parsePosition33);
        parsePosition33.setIndex((int) 'u');
        parsePosition33.setErrorIndex(5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        boolean boolean19 = locale14.hasExtensions();
        java.lang.String str20 = locale14.toLanguageTag();
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction25 = properFractionFormat23.parse("\u4e2d\u570b");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"??\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japan" + "'", str16, "Japan");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale21 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category14, locale21);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction26.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction35.divide(fraction38);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale41.getScript();
        boolean boolean44 = fraction40.equals((java.lang.Object) locale41);
        java.util.Locale.setDefault(category14, locale41);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getIntegerInstance(locale46);
        java.lang.String str48 = locale46.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category14, locale46);
        java.util.Locale locale54 = new java.util.Locale("3,500.0%", "2,147,483,647 / 1", "100% (ZH-TW)");
        java.util.Locale.setDefault(category14, locale54);
        java.lang.String str56 = locale54.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = locale54.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 3,500.0%");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale12.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals(locale21.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals(locale54.toString(), "3,500.0%_2,147,483,647 / 1_100% (ZH-TW)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "100% (ZH-TW)" + "'", str56, "100% (ZH-TW)");
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        int int21 = numberFormat19.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale3.getDisplayName(locale6);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.lang.String str15 = locale3.getDisplayLanguage(locale12);
        java.lang.String str16 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str18 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str20 = locale1.getDisplayVariant(locale3);
        java.util.Set<java.lang.String> strSet21 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ko" + "'", str16, "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ko" + "'", str18, "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat.Field field3 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field3);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale5);
        boolean boolean7 = field3.equals((java.lang.Object) locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale5.getISO3Language();
        java.util.Locale locale10 = locale5.stripExtensions();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.lang.String str13 = locale0.getDisplayVariant(locale10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale2);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale15.getDisplayScript(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category25, locale30);
        java.lang.String str32 = locale24.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale24);
        int int34 = numberFormat33.getMinimumIntegerDigits();
        properFractionFormat23.setWholeFormat(numberFormat33);
        int int36 = numberFormat33.getMinimumFractionDigits();
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field38);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale40);
        boolean boolean42 = field38.equals((java.lang.Object) locale40);
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale40.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale40);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) '4');
        parsePosition48.setErrorIndex(600);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.lang.String str56 = locale54.getDisplayCountry();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getIntegerInstance(locale54);
        java.lang.String str58 = locale51.getDisplayCountry(locale54);
        java.lang.String str59 = locale51.getISO3Language();
        java.lang.String str60 = locale51.getDisplayName();
        java.lang.String str62 = locale51.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction66.abs();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        boolean boolean72 = numberFormat70.equals((java.lang.Object) locale71);
        boolean boolean73 = fraction68.equals((java.lang.Object) locale71);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction68.abs();
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale75);
        boolean boolean77 = fraction74.equals((java.lang.Object) locale75);
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance(locale75);
        java.lang.String str79 = locale51.getDisplayScript(locale75);
        boolean boolean80 = parsePosition48.equals((java.lang.Object) str79);
        java.lang.Object obj81 = fractionFormat45.parseObject("60,000%", parsePosition48);
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder82.clearExtensions();
        java.util.Locale.Builder builder84 = builder82.clear();
        java.util.Locale.Builder builder85 = builder84.clearExtensions();
        java.util.Locale.Builder builder86 = builder85.clear();
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = locale87.getISO3Language();
        java.util.Set<java.lang.String> strSet89 = locale87.getUnicodeLocaleKeys();
        java.lang.String str90 = locale87.getISO3Country();
        java.util.Locale.Builder builder91 = builder85.setLocale(locale87);
        java.util.Locale locale92 = java.util.Locale.TAIWAN;
        java.lang.String str93 = locale92.toLanguageTag();
        java.lang.String str94 = locale92.getISO3Country();
        java.lang.String str95 = locale87.getDisplayCountry(locale92);
        boolean boolean96 = parsePosition48.equals((java.lang.Object) str95);
        java.lang.Number number97 = numberFormat33.parse("java.text.ParsePosition[index=97,errorIndex=-1]", parsePosition48);
        int int98 = parsePosition48.getErrorIndex();
        java.lang.Object obj99 = fractionFormat13.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 11 to fraction (0/32)", parsePosition48);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str16, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "anglais" + "'", str32, "anglais");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "France" + "'", str58, "France");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fra" + "'", str59, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str60, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "kor" + "'", str88, "kor");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "zh-TW" + "'", str93, "zh-TW");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "TWN" + "'", str94, "TWN");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(number97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 52 + "'", int98 == 52);
        org.junit.Assert.assertNull(obj99);
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number32 = numberFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.lang.Object obj33 = properFractionFormat3.parseObject("2,147,483,647 / 1", parsePosition31);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        boolean boolean39 = numberFormat37.isGroupingUsed();
        boolean boolean40 = numberFormat37.isGroupingUsed();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat37.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        numberFormat37.setParseIntegerOnly(false);
        properFractionFormat3.setDenominatorFormat(numberFormat37);
        java.util.Locale locale51 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", "100%");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getCurrencyInstance(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale51);
        properFractionFormat3.setNumeratorFormat(numberFormat53);
        boolean boolean55 = numberFormat53.isParseIntegerOnly();
        java.lang.StringBuffer stringBuffer57 = null;
        java.text.NumberFormat.Field field58 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field58);
        java.lang.String str60 = fieldPosition59.toString();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.lang.String str63 = locale62.getDisplayScript();
        java.lang.String str64 = locale61.getDisplayName(locale62);
        boolean boolean65 = fieldPosition59.equals((java.lang.Object) locale62);
        fieldPosition59.setEndIndex((int) '#');
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getCurrencyInstance(locale68);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat70.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition73);
        boolean boolean75 = fieldPosition59.equals((java.lang.Object) parsePosition73);
        int int76 = fieldPosition59.getEndIndex();
        int int77 = fieldPosition59.getEndIndex();
        fieldPosition59.setEndIndex((-1));
        java.lang.String str80 = fieldPosition59.toString();
        java.lang.String str81 = fieldPosition59.toString();
        java.lang.String str82 = fieldPosition59.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer83 = numberFormat53.format((double) 20L, stringBuffer57, fieldPosition59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals(locale51.toString(), "\u4e2d\u6587\u4e2d\u56fd)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]_100%");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(field58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (Taiwan)" + "'", str64, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str80, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str81, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str82, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field13, (int) '#');
        java.text.Format.Field field16 = fieldPosition15.getFieldAttribute();
        boolean boolean17 = field8.equals((java.lang.Object) fieldPosition15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        boolean boolean20 = field8.equals((java.lang.Object) locale19);
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale28 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category21, locale28);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.divide(fraction45);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.lang.String str50 = locale48.getScript();
        boolean boolean51 = fraction47.equals((java.lang.Object) locale48);
        java.util.Locale.setDefault(category21, locale48);
        java.util.Locale locale53 = java.util.Locale.getDefault(category21);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale54.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.util.Locale.setDefault(category21, locale54);
        boolean boolean59 = field8.equals((java.lang.Object) category21);
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field8, 120);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zh-TW" + "'", str55, "zh-TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str56, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale14.getDisplayVariant(locale16);
        java.lang.String str22 = locale14.getExtension('a');
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale25);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale28);
        java.util.Currency currency31 = numberFormat30.getCurrency();
        numberFormat30.setMinimumIntegerDigits(1);
        numberFormat30.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj39 = numberFormat30.parseObject("Japan", parsePosition38);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException43 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str44 = fractionConversionException43.getPattern();
        java.lang.Throwable[] throwableArray45 = fractionConversionException43.getSuppressed();
        java.lang.Object[] objArray46 = fractionConversionException43.getArguments();
        boolean boolean47 = parsePosition38.equals((java.lang.Object) objArray46);
        int int48 = parsePosition38.getIndex();
        int int49 = parsePosition38.getIndex();
        java.lang.Object obj50 = fractionFormat26.parseObject("\ud55c\uad6d\uc5b4", parsePosition38);
        int int51 = parsePosition38.getErrorIndex();
        int int52 = parsePosition38.getIndex();
        int int53 = parsePosition38.getErrorIndex();
        java.lang.String str54 = parsePosition38.toString();
        java.lang.Number number55 = numberFormat23.parse("\u97d3\u6587", parsePosition38);
        numberFormat23.setMaximumIntegerDigits((int) (short) 14400);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japan" + "'", str18, "Japan");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "TWD");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str44, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str54, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number55);
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        java.util.Locale locale21 = locale19.stripExtensions();
        java.lang.String str22 = locale21.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        java.util.Locale locale3 = new java.util.Locale("zh_TW", "Taiwan", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        java.lang.String str9 = locale4.toLanguageTag();
        java.lang.String str10 = locale4.getDisplayVariant();
        boolean boolean11 = locale4.hasExtensions();
        java.lang.String str12 = locale3.getDisplayLanguage(locale4);
        java.lang.String str13 = locale3.getCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance();
        numberFormat15.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode18 = numberFormat15.getRoundingMode();
        int int19 = numberFormat15.getMinimumIntegerDigits();
        java.lang.Object obj20 = numberFormat15.clone();
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        boolean boolean29 = numberFormat28.isGroupingUsed();
        java.util.Currency currency30 = numberFormat28.getCurrency();
        numberFormat25.setCurrency(currency30);
        java.util.Currency currency32 = numberFormat25.getCurrency();
        java.math.RoundingMode roundingMode33 = numberFormat25.getRoundingMode();
        numberFormat15.setRoundingMode(roundingMode33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat15);
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Locale.setDefault(category36, locale37);
        java.lang.String str40 = locale37.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("\ub3c5\uc77c");
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale42.getDisplayVariant(locale43);
        java.lang.String str46 = locale37.getDisplayVariant(locale43);
        java.util.Set<java.lang.Character> charSet47 = locale37.getExtensionKeys();
        java.lang.StringBuffer stringBuffer48 = null;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((int) (short) -1);
        fieldPosition50.setBeginIndex(100);
        int int53 = fieldPosition50.getField();
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList63, strMap64);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.lang.String str67 = locale66.getDisplayScript();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.lang.String str69 = locale68.getISO3Language();
        java.lang.String str70 = locale66.getDisplayScript(locale68);
        java.util.Set<java.lang.String> strSet71 = locale68.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet72 = locale68.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList63, (java.util.Collection<java.lang.String>) strSet72);
        boolean boolean74 = fieldPosition50.equals((java.lang.Object) strList73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer75 = fractionFormat35.format((java.lang.Object) charSet47, stringBuffer48, fieldPosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh_tw" + "'", str12, "zh_tw");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "TAIWAN" + "'", str13, "TAIWAN");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "kor" + "'", str69, "kor");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.util.Locale locale6 = locale4.stripExtensions();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        numberFormat4.setMinimumFractionDigits(0);
        numberFormat4.setMaximumIntegerDigits(1728000);
        java.lang.String str10 = numberFormat4.format((long) 120);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean15 = numberFormat13.equals((java.lang.Object) numberFormat14);
        java.lang.Object obj16 = numberFormat14.clone();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) numberFormat20);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        java.math.RoundingMode roundingMode35 = numberFormat27.getRoundingMode();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) 'a');
        java.lang.String str39 = parsePosition38.toString();
        java.lang.String str40 = parsePosition38.toString();
        java.lang.Object obj41 = numberFormat27.parseObject("zho", parsePosition38);
        java.lang.String str42 = parsePosition38.toString();
        java.lang.Number number43 = numberFormat20.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition38);
        java.lang.Object obj44 = numberFormat14.parseObject("cor\351en", parsePosition38);
        parsePosition38.setErrorIndex(600);
        int int47 = parsePosition38.getIndex();
        java.lang.Object obj48 = numberFormat4.parseObject("anglais (KOR)", parsePosition38);
        numberFormat4.setMaximumIntegerDigits((-120));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "120" + "'", str10, "120");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode35.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str39, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str42, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        int int30 = numberFormat29.getMaximumFractionDigits();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat36);
        boolean boolean38 = numberFormat36.isGroupingUsed();
        boolean boolean39 = numberFormat36.isGroupingUsed();
        fractionFormat32.setNumeratorFormat(numberFormat36);
        java.lang.Object obj41 = numberFormat36.clone();
        java.lang.Object obj42 = numberFormat36.clone();
        java.util.Currency currency43 = numberFormat36.getCurrency();
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        numberFormat54.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency57 = numberFormat54.getCurrency();
        numberFormat48.setCurrency(currency57);
        numberFormat36.setCurrency(currency57);
        numberFormat36.setParseIntegerOnly(true);
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.lang.String str64 = locale62.toLanguageTag();
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str67 = locale65.getISO3Language();
        java.lang.String str68 = locale62.getDisplayScript(locale65);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getCurrencyInstance(locale71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        java.util.Currency currency74 = numberFormat72.getCurrency();
        properFractionFormat70.setNumeratorFormat(numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat36, numberFormat72);
        java.text.NumberFormat numberFormat77 = properFractionFormat76.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese" + "'", str63, "Chinese");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zh-TW" + "'", str64, "zh-TW");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zho" + "'", str67, "zho");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(currency74);
        org.junit.Assert.assertEquals(currency74.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat77);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.ParseException parseException12 = new java.text.ParseException("taiwan", (int) (short) -19366);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = numberFormat9.format((java.lang.Object) "taiwan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.lang.String str27 = locale16.getISO3Country();
        java.lang.String str28 = locale16.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "TWN" + "'", str27, "TWN");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str4 = locale0.getISO3Country();
        java.lang.String str5 = locale0.getVariant();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.util.Locale locale11 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str12 = locale6.getDisplayScript(locale11);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale11.getDisplayLanguage();
        java.lang.String str17 = locale0.getDisplayLanguage(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale11.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ZH_TW");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale11.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str15, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "taiwan" + "'", str16, "taiwan");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder9 = builder2.clearExtensions();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        numberFormat13.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        java.lang.String str20 = fieldPosition19.toString();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayName(locale22);
        boolean boolean25 = fieldPosition19.equals((java.lang.Object) locale22);
        fieldPosition19.setEndIndex((int) '#');
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        boolean boolean35 = fieldPosition19.equals((java.lang.Object) parsePosition33);
        java.lang.Number number36 = numberFormat13.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        boolean boolean46 = numberFormat44.equals((java.lang.Object) locale45);
        boolean boolean47 = fraction42.equals((java.lang.Object) locale45);
        boolean boolean48 = parsePosition33.equals((java.lang.Object) locale45);
        java.lang.String str50 = locale45.getUnicodeLocaleType("US");
        java.util.Locale.Builder builder51 = builder2.setLocale(locale45);
        java.lang.String str52 = locale45.getISO3Country();
        java.lang.Object obj53 = locale45.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "en");
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getDenominatorFormat();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.setVariant("");
        java.util.Locale.Builder builder10 = builder5.setScript("");
        java.util.Locale.Builder builder12 = builder10.setRegion("GB");
        java.lang.StringBuffer stringBuffer13 = null;
        java.text.NumberFormat.Field field14 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field14);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field14, (int) (short) 100);
        int int18 = fieldPosition17.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer19 = properFractionFormat3.format((java.lang.Object) builder10, stringBuffer13, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.lang.String str11 = locale5.getDisplayName(locale8);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.lang.String str17 = locale5.getDisplayLanguage(locale14);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.lang.String str25 = locale18.getDisplayCountry(locale21);
        java.lang.String str26 = locale18.getISO3Language();
        java.lang.String str27 = locale18.getDisplayName();
        java.lang.String str29 = locale18.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        boolean boolean39 = numberFormat37.equals((java.lang.Object) locale38);
        boolean boolean40 = fraction35.equals((java.lang.Object) locale38);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction35.abs();
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        boolean boolean44 = fraction41.equals((java.lang.Object) locale42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale42);
        java.lang.String str46 = locale18.getDisplayScript(locale42);
        java.lang.String str47 = locale5.getDisplayVariant(locale18);
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale.Builder builder50 = builder48.clear();
        java.util.Locale.Builder builder51 = builder50.clearExtensions();
        java.util.Locale.Builder builder52 = builder51.clear();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str56 = locale53.getISO3Country();
        java.util.Locale.Builder builder57 = builder51.setLocale(locale53);
        java.util.Locale.Builder builder58 = builder57.clear();
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.lang.String str64 = locale62.getDisplayCountry();
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getIntegerInstance(locale62);
        java.lang.String str66 = locale59.getDisplayCountry(locale62);
        java.lang.String str67 = locale59.getISO3Language();
        java.lang.String str68 = locale59.getDisplayName();
        java.util.Locale.Builder builder69 = builder58.setLocale(locale59);
        java.lang.String str70 = locale5.getDisplayVariant(locale59);
        java.lang.String str71 = locale2.getDisplayName(locale59);
        java.util.Locale locale72 = locale59.stripExtensions();
        java.util.Locale.Category category73 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale74.getISO3Language();
        java.util.Locale.setDefault(category73, locale74);
        java.util.Locale locale77 = java.util.Locale.getDefault(category73);
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str79 = locale72.getDisplayScript(locale77);
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale72);
        java.lang.String str82 = locale72.getExtension('u');
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4" + "'", str17, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "France" + "'", str25, "France");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French (France)" + "'", str27, "French (France)");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "France" + "'", str66, "France");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fra" + "'", str67, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "French (France)" + "'", str68, "French (France)");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "chinese (HI!)" + "'", str71, "chinese (HI!)");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + category73 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category73.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "kor" + "'", str75, "kor");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(10);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) '#');
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getScript();
        java.util.Locale locale10 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str11 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale10);
        int int13 = numberFormat12.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        boolean boolean16 = fieldPosition1.equals((java.lang.Object) numberFormat12);
        fieldPosition1.setEndIndex((int) (byte) 100);
        java.text.Format.Field field19 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale10.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(field19);
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean64 = numberFormat63.isGroupingUsed();
        properFractionFormat61.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat66 = properFractionFormat61.getWholeFormat();
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number70 = numberFormat66.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition69);
        parsePosition69.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat57.parse("\u65e5\u6587\u65e5\u672c)", parsePosition69);
        java.util.Locale locale77 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getNumberInstance(locale77);
        properFractionFormat57.setDenominatorFormat(numberFormat78);
        java.lang.StringBuffer stringBuffer81 = null;
        java.text.NumberFormat.Field field82 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition84 = new java.text.FieldPosition((java.text.Format.Field) field82, 117);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer85 = numberFormat78.format(0.0d, stringBuffer81, fieldPosition84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4" + "'", str35, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNull(number70);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertEquals(locale77.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(field82);
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale5);
        java.lang.Object obj8 = locale5.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "ko");
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        numberFormat3.setMinimumIntegerDigits(0);
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.NumberFormat.Field field17 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((java.text.Format.Field) field17);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        boolean boolean21 = field17.equals((java.lang.Object) locale19);
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field17, (int) '#');
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field17);
        java.text.Format.Field field25 = fieldPosition24.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = numberFormat3.format((double) 6000, stringBuffer16, fieldPosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(field25);
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        boolean boolean13 = numberFormat11.isGroupingUsed();
        boolean boolean14 = numberFormat11.isGroupingUsed();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat20);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale22);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        numberFormat24.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        numberFormat24.setCurrency(currency39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        numberFormat42.setMaximumFractionDigits(100);
        java.lang.String str47 = numberFormat42.format((long) 100);
        int int48 = numberFormat42.getMaximumFractionDigits();
        numberFormat42.setMinimumFractionDigits((int) (short) 0);
        int int51 = numberFormat42.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode52 = numberFormat42.getRoundingMode();
        numberFormat42.setGroupingUsed(false);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance(locale55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat57.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        properFractionFormat64.setWholeFormat(numberFormat66);
        java.text.NumberFormat numberFormat69 = properFractionFormat64.getWholeFormat();
        properFractionFormat57.setWholeFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat42, numberFormat69);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        java.lang.Object obj75 = numberFormat73.clone();
        properFractionFormat71.setDenominatorFormat(numberFormat73);
        properFractionFormat2.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat78 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat2.setWholeFormat(numberFormat78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "TWD");
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "10,000%" + "'", str47, "10,000%");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode52 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode52.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(fraction61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(obj75);
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        int int9 = numberFormat8.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field12);
        int int14 = fieldPosition13.getEndIndex();
        int int15 = fieldPosition13.getField();
        java.lang.String str16 = fieldPosition13.toString();
        java.text.Format.Field field17 = fieldPosition13.getFieldAttribute();
        int int18 = fieldPosition13.getField();
        fieldPosition13.setEndIndex(52);
        int int21 = fieldPosition13.getBeginIndex();
        java.text.Format.Field field22 = fieldPosition13.getFieldAttribute();
        java.text.Format.Field field23 = fieldPosition13.getFieldAttribute();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        numberFormat28.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str32 = numberFormat28.format((double) 0.0f);
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37);
        java.text.NumberFormat numberFormat40 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28, numberFormat37, numberFormat40);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException44 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean45 = numberFormat37.equals((java.lang.Object) 10);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance(locale46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47, numberFormat49);
        int int51 = numberFormat47.getMaximumIntegerDigits();
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale52.getDisplayCountry(locale53);
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getIntegerInstance(locale53);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale53);
        java.util.Set<java.lang.Character> charSet59 = locale53.getExtensionKeys();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getIntegerInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat47, numberFormat60);
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat61.parse("java.text.NumberFormat$Field(exponent symbol)", parsePosition68);
        boolean boolean71 = field23.equals((java.lang.Object) parsePosition68);
        java.lang.Object obj72 = numberFormat8.parseObject("214,748,364,700", parsePosition68);
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field75);
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field75, 1);
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition((java.text.Format.Field) field75, (int) (short) 100);
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder82 = builder81.clearExtensions();
        java.util.Locale.Builder builder83 = builder81.clear();
        java.util.Locale.Builder builder84 = builder81.clear();
        java.util.Locale.Builder builder87 = builder84.setExtension('a', "TWN");
        java.util.Locale.Builder builder89 = builder87.setLanguageTag("Canada");
        boolean boolean90 = field75.equals((java.lang.Object) builder87);
        java.text.FieldPosition fieldPosition91 = new java.text.FieldPosition((java.text.Format.Field) field75);
        int int92 = fieldPosition91.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer93 = numberFormat8.format((long) (short) 98, stringBuffer74, fieldPosition91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str16, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0%" + "'", str32, "0%");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Japan" + "'", str55, "Japan");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + 14748364700L + "'", obj72, 14748364700L);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat9.parse("100%");
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction14.add(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str25 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction24.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ONE;
        long long41 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction24.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction23.multiply(fraction42);
        int int44 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction11.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int51 = fraction50.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction45.divide(fraction52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1 / 1" + "'", str25, "1 / 1");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        numberFormat27.setMaximumFractionDigits((int) (short) -1);
        int int30 = numberFormat27.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode31 = numberFormat27.getRoundingMode();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        properFractionFormat34.setWholeFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Currency currency53 = numberFormat52.getCurrency();
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        int int59 = numberFormat58.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        numberFormat58.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode63 = numberFormat58.getRoundingMode();
        numberFormat52.setRoundingMode(roundingMode63);
        numberFormat36.setRoundingMode(roundingMode63);
        numberFormat27.setRoundingMode(roundingMode63);
        properFractionFormat7.setWholeFormat(numberFormat27);
        java.text.NumberFormat numberFormat68 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat7.getWholeFormat();
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.lang.String str71 = locale70.getISO3Country();
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getIntegerInstance(locale70);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getInstance(locale70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        java.util.Locale locale75 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale75);
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getInstance(locale77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = new org.apache.commons.math.fraction.FractionFormat(numberFormat78, numberFormat80);
        boolean boolean82 = numberFormat80.isGroupingUsed();
        boolean boolean83 = numberFormat80.isGroupingUsed();
        fractionFormat76.setNumeratorFormat(numberFormat80);
        java.util.Locale locale85 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getIntegerInstance(locale85);
        java.lang.String str88 = numberFormat86.format(0.0d);
        java.util.Locale locale89 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet90 = locale89.getUnicodeLocaleAttributes();
        boolean boolean91 = numberFormat86.equals((java.lang.Object) strSet90);
        org.apache.commons.math.fraction.FractionFormat fractionFormat92 = new org.apache.commons.math.fraction.FractionFormat(numberFormat80, numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69, numberFormat73, numberFormat86);
        java.text.NumberFormat numberFormat95 = properFractionFormat94.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode31.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4" + "'", str51, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0" + "'", str88, "0");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(numberFormat95);
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.Builder builder9 = builder6.setLocale(locale7);
        java.util.Locale locale10 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder6.setUnicodeLocaleKeyword("FRA", "Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: FRA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat2.setMaximumIntegerDigits((int) '#');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale.Builder builder11 = builder8.clear();
        java.util.Locale.Builder builder14 = builder11.setExtension('a', "TWN");
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.lang.String str23 = locale15.getLanguage();
        java.util.Locale.Builder builder24 = builder11.setLocale(locale15);
        java.util.Locale.Builder builder26 = builder11.setLanguageTag("fra");
        java.util.Locale.Builder builder27 = builder11.clearExtensions();
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        java.lang.String str31 = field29.toString();
        java.lang.String str32 = field29.toString();
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field29);
        java.lang.String str34 = fieldPosition33.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = numberFormat2.format((java.lang.Object) builder27, stringBuffer28, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str31, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str32, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        java.text.ParseException parseException2 = new java.text.ParseException("100", 1);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException6 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException10 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str11 = fractionConversionException10.getPattern();
        java.lang.Throwable[] throwableArray12 = fractionConversionException10.getSuppressed();
        fractionConversionException6.addSuppressed((java.lang.Throwable) fractionConversionException10);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException17 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException21 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str22 = fractionConversionException21.getPattern();
        java.lang.Throwable[] throwableArray23 = fractionConversionException21.getSuppressed();
        fractionConversionException17.addSuppressed((java.lang.Throwable) fractionConversionException21);
        fractionConversionException10.addSuppressed((java.lang.Throwable) fractionConversionException21);
        java.lang.String str26 = fractionConversionException21.getPattern();
        java.text.ParseException parseException29 = new java.text.ParseException("10,000%", 10);
        fractionConversionException21.addSuppressed((java.lang.Throwable) parseException29);
        java.lang.Throwable[] throwableArray31 = fractionConversionException21.getSuppressed();
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field32);
        java.lang.String str34 = fieldPosition33.toString();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str38 = locale35.getDisplayName(locale36);
        boolean boolean39 = fieldPosition33.equals((java.lang.Object) locale36);
        fieldPosition33.setEndIndex((int) '#');
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat44.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition47);
        boolean boolean49 = fieldPosition33.equals((java.lang.Object) parsePosition47);
        int int50 = fieldPosition33.getEndIndex();
        int int51 = fieldPosition33.getEndIndex();
        java.text.ParseException parseException54 = new java.text.ParseException("10,000%", 10);
        int int55 = parseException54.getErrorOffset();
        boolean boolean56 = fieldPosition33.equals((java.lang.Object) parseException54);
        fractionConversionException21.addSuppressed((java.lang.Throwable) parseException54);
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException21);
        java.lang.String str59 = fractionConversionException21.getPattern();
        java.lang.String str60 = fractionConversionException21.getPattern();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str11, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str22, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str26, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (Taiwan)" + "'", str38, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str59, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str60, "Overflow trying to convert {0} to fraction ({1}/{2})");
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        numberFormat13.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str17 = numberFormat13.format((double) 0.0f);
        int int18 = numberFormat13.getMaximumIntegerDigits();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale19);
        java.util.Currency currency22 = numberFormat21.getCurrency();
        numberFormat21.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat25 = null;
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        numberFormat30.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean33 = numberFormat30.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25, numberFormat30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat21, numberFormat25);
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        int int42 = numberFormat41.getMaximumIntegerDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        java.util.Currency currency46 = numberFormat44.getCurrency();
        numberFormat41.setCurrency(currency46);
        java.util.Currency currency48 = numberFormat41.getCurrency();
        java.math.RoundingMode roundingMode49 = numberFormat41.getRoundingMode();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) 'a');
        java.lang.String str53 = parsePosition52.toString();
        java.lang.String str54 = parsePosition52.toString();
        java.lang.Object obj55 = numberFormat41.parseObject("zho", parsePosition52);
        java.lang.Object obj56 = numberFormat13.parseObject("", parsePosition52);
        int int57 = parsePosition52.getErrorIndex();
        java.lang.Number number58 = numberFormat7.parse("100 0 / 1", parsePosition52);
        int int59 = parsePosition52.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0%" + "'", str17, "0%");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "TWD");
        org.junit.Assert.assertEquals(locale29.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode49 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode49.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str53, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str54, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        numberFormat1.setGroupingUsed(false);
        java.lang.String str12 = numberFormat1.format(0.01d);
        numberFormat1.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1%" + "'", str12, "1%");
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        java.util.Locale locale2 = new java.util.Locale("200%", "English");
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "200%_ENGLISH");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale3 = locale0.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.Object obj6 = numberFormat5.clone();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        numberFormat9.setMinimumIntegerDigits(1728000);
        java.util.Currency currency12 = numberFormat9.getCurrency();
        java.lang.StringBuffer stringBuffer13 = null;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition(96);
        int int16 = fieldPosition15.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer17 = numberFormat5.format((java.lang.Object) currency12, stringBuffer13, fieldPosition15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 96 + "'", int16 == 96);
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale locale10 = builder7.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        boolean boolean18 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Currency currency23 = numberFormat21.getCurrency();
        fractionFormat19.setNumeratorFormat(numberFormat21);
        fractionFormat11.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale30);
        java.util.Locale.setDefault(category28, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category28);
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale.setDefault(category34, locale35);
        java.util.Locale.setDefault(category28, locale35);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getISO3Country();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance(locale39);
        java.util.Locale.setDefault(category28, locale39);
        java.lang.StringBuffer stringBuffer43 = null;
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field44);
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field44, 1);
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field44, (int) (short) 100);
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field44);
        java.text.FieldPosition fieldPosition51 = new java.text.FieldPosition((java.text.Format.Field) field44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer52 = properFractionFormat27.format((java.lang.Object) locale39, stringBuffer43, fieldPosition51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(field44);
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        numberFormat5.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean8 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat5);
        java.util.Currency currency10 = numberFormat5.getCurrency();
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) 'a');
        java.lang.String str28 = parsePosition27.toString();
        java.lang.String str29 = parsePosition27.toString();
        java.lang.Object obj30 = numberFormat16.parseObject("zho", parsePosition27);
        java.lang.String str31 = parsePosition27.toString();
        java.lang.Object obj32 = numberFormat5.parseObject("ko", parsePosition27);
        int int33 = numberFormat5.getMinimumFractionDigits();
        numberFormat5.setParseIntegerOnly(true);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str28, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str29, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str31, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale9);
        int int19 = numberFormat18.getMinimumIntegerDigits();
        properFractionFormat8.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat21 = properFractionFormat8.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        properFractionFormat25.setWholeFormat(numberFormat27);
        java.text.NumberFormat numberFormat30 = properFractionFormat25.getWholeFormat();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number34 = numberFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        parsePosition33.setErrorIndex(0);
        int int37 = parsePosition33.getErrorIndex();
        java.lang.String str38 = parsePosition33.toString();
        java.lang.Object obj39 = properFractionFormat8.parseObject("FRA", parsePosition33);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.lang.String str42 = locale40.getExtension('a');
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale40);
        properFractionFormat8.setNumeratorFormat(numberFormat43);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "anglais" + "'", str17, "anglais");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=0]" + "'", str38, "java.text.ParsePosition[index=1,errorIndex=0]");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(numberFormat43);
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        java.lang.String str15 = locale12.getVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) 'a');
        java.lang.String str16 = parsePosition15.toString();
        java.lang.String str17 = parsePosition15.toString();
        java.lang.Object obj18 = numberFormat4.parseObject("zho", parsePosition15);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        long long29 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction23.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction27.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        double double48 = fraction46.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction52);
        boolean boolean54 = fraction43.equals((java.lang.Object) fraction46);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale55.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getISO3Language();
        java.lang.String str61 = locale55.getDisplayScript(locale58);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale55.getDisplayCountry(locale62);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale55);
        boolean boolean65 = fraction46.equals((java.lang.Object) locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale55);
        java.text.NumberFormat numberFormat68 = fractionFormat67.getNumeratorFormat();
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat68, numberFormat69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = numberFormat4.parseObject("CHINOIS");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str17, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-0.008333333333333333d) + "'", double48 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str56, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-TW" + "'", str57, "zh-TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zho" + "'", str60, "zho");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Taiwan" + "'", str63, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        java.util.Currency currency62 = numberFormat60.getCurrency();
        numberFormat57.setCurrency(currency62);
        java.util.Currency currency64 = numberFormat57.getCurrency();
        java.math.RoundingMode roundingMode65 = numberFormat57.getRoundingMode();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) 'a');
        java.lang.String str69 = parsePosition68.toString();
        java.lang.String str70 = parsePosition68.toString();
        java.lang.Object obj71 = numberFormat57.parseObject("zho", parsePosition68);
        java.lang.Object obj72 = fractionFormat51.parseObject("java.text.NumberFormat$Field(currency)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat2.parse("", parsePosition68);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.getDisplayScript();
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale76.getISO3Language();
        java.lang.String str78 = locale74.getDisplayScript(locale76);
        java.util.Set<java.lang.String> strSet79 = locale76.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet80 = locale76.getUnicodeLocaleKeys();
        boolean boolean81 = parsePosition68.equals((java.lang.Object) locale76);
        java.util.Locale locale85 = new java.util.Locale("Taiwan", "\244 1.00", "en-CA");
        boolean boolean86 = parsePosition68.equals((java.lang.Object) locale85);
        java.util.Set<java.lang.Character> charSet87 = locale85.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str69, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str70, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "kor" + "'", str77, "kor");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals(locale85.toString(), "taiwan_\244 1.00_en-CA");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(charSet87);
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        numberFormat5.setParseIntegerOnly(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number9 = numberFormat5.parse("canada");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"canada\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100 %" + "'", str3, "100 %");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        boolean boolean4 = numberFormat1.isGroupingUsed();
        java.lang.String str6 = numberFormat1.format((double) 10L);
        java.math.RoundingMode roundingMode7 = numberFormat1.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.math.RoundingMode roundingMode9 = numberFormat1.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode7.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int4 = fraction3.getNumerator();
        int int5 = fraction3.getDenominator();
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 120 + "'", int4 == 120);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "120 / 1" + "'", str6, "120 / 1");
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category8, locale13);
        java.lang.String str15 = locale13.getISO3Language();
        java.util.Locale locale18 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str20 = locale13.getDisplayScript(locale18);
        java.lang.String str21 = locale0.getDisplayLanguage(locale13);
        java.lang.String str22 = locale13.getDisplayName();
        java.lang.Object obj23 = locale13.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fra" + "'", str15, "fra");
        org.junit.Assert.assertEquals(locale18.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French (Canada)" + "'", str22, "French (Canada)");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "fr_CA");
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        numberFormat4.setParseIntegerOnly(true);
        java.lang.StringBuffer stringBuffer8 = null;
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field9, (int) '#');
        java.text.Format.Field field12 = fieldPosition11.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction15.add(fraction22);
        boolean boolean25 = field12.equals((java.lang.Object) fraction15);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition(field12);
        java.text.Format.Field field27 = fieldPosition26.getFieldAttribute();
        int int28 = fieldPosition26.getEndIndex();
        java.text.Format.Field field29 = fieldPosition26.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = numberFormat4.format((-2147483647L), stringBuffer8, fieldPosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "francese (Francia)" + "'", str3, "francese (Francia)");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(field29);
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("100%");
        java.lang.String str10 = locale3.getDisplayScript(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale17);
        java.lang.String str21 = locale17.toLanguageTag();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale locale24 = builder22.build();
        java.lang.String str25 = locale24.getScript();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale29.getISO3Language();
        java.lang.String str32 = locale26.getDisplayScript(locale29);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale26.getDisplayCountry(locale33);
        java.util.Locale locale36 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str37 = locale33.getDisplayLanguage(locale36);
        java.lang.String str38 = locale24.getDisplayCountry(locale36);
        java.lang.String str39 = locale17.getDisplayVariant(locale24);
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayCountry(locale41);
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getIntegerInstance(locale41);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale41);
        java.util.Set<java.lang.Character> charSet47 = locale41.getExtensionKeys();
        java.lang.String str48 = locale24.getDisplayVariant(locale41);
        java.lang.String str49 = locale41.getDisplayCountry();
        java.lang.String str50 = locale12.getDisplayName(locale41);
        java.util.Set<java.lang.Character> charSet51 = locale12.getExtensionKeys();
        java.lang.String str52 = locale12.getVariant();
        java.lang.String str53 = locale11.getDisplayVariant(locale12);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese" + "'", str27, "Chinese");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh-TW" + "'", str28, "zh-TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Taiwan" + "'", str34, "Taiwan");
        org.junit.Assert.assertEquals(locale36.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Italian" + "'", str37, "Italian");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japan" + "'", str43, "Japan");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Korean" + "'", str50, "Korean");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale5);
        java.util.Currency currency8 = numberFormat7.getCurrency();
        numberFormat7.setMinimumIntegerDigits(1);
        numberFormat7.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat7.parseObject("Japan", parsePosition15);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str21 = fractionConversionException20.getPattern();
        java.lang.Throwable[] throwableArray22 = fractionConversionException20.getSuppressed();
        java.lang.Object[] objArray23 = fractionConversionException20.getArguments();
        boolean boolean24 = parsePosition15.equals((java.lang.Object) objArray23);
        int int25 = parsePosition15.getIndex();
        java.lang.String str26 = parsePosition15.toString();
        java.lang.Object obj27 = numberFormat0.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.lang.String str33 = locale30.getISO3Country();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale30);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.util.Currency currency46 = numberFormat39.getCurrency();
        int int47 = numberFormat39.getMaximumFractionDigits();
        java.lang.Object obj48 = numberFormat39.clone();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        numberFormat50.setMaximumFractionDigits(100);
        numberFormat50.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str57 = numberFormat50.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat39, numberFormat50);
        java.util.Locale locale60 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale60);
        java.lang.String str63 = fractionFormat61.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat64 = fractionFormat61.getNumeratorFormat();
        java.text.NumberFormat numberFormat65 = fractionFormat61.getNumeratorFormat();
        java.text.NumberFormat numberFormat66 = fractionFormat61.getNumeratorFormat();
        java.lang.String str68 = numberFormat66.format((long) 2147483647);
        properFractionFormat58.setDenominatorFormat(numberFormat66);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        boolean boolean76 = numberFormat75.isGroupingUsed();
        properFractionFormat73.setWholeFormat(numberFormat75);
        java.text.NumberFormat numberFormat78 = properFractionFormat73.getWholeFormat();
        java.text.ParsePosition parsePosition81 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number82 = numberFormat78.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition81);
        parsePosition81.setErrorIndex(0);
        parsePosition81.setErrorIndex(1728000);
        java.lang.Object obj87 = properFractionFormat58.parseObject("\u97d3\u6587", parsePosition81);
        java.util.Locale locale88 = java.util.Locale.JAPAN;
        java.util.Locale locale89 = java.util.Locale.ROOT;
        java.lang.String str90 = locale89.getDisplayScript();
        java.lang.String str91 = locale88.getDisplayCountry(locale89);
        java.util.Locale locale92 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str93 = locale92.getDisplayLanguage();
        java.util.Locale locale94 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str95 = locale92.getDisplayCountry(locale94);
        java.lang.String str96 = locale89.getDisplayName(locale94);
        java.util.Set<java.lang.String> strSet97 = locale89.getUnicodeLocaleKeys();
        boolean boolean98 = parsePosition81.equals((java.lang.Object) locale89);
        java.lang.Object obj99 = fractionFormat28.parseObject("1 / 10", parsePosition81);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
// flaky:         org.junit.Assert.assertEquals(currency1.toString(), "TWD");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "TWD");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str21, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "100%" + "'", str57, "100%");
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100 0 / 1" + "'", str63, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2,147,483,647" + "'", str68, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Japan" + "'", str91, "Japan");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Chinese" + "'", str93, "Chinese");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Taiwan" + "'", str95, "Taiwan");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(obj99);
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        java.math.RoundingMode roundingMode5 = numberFormat2.getRoundingMode();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        java.lang.String str16 = numberFormat14.format((double) 1.0f);
        numberFormat14.setMaximumIntegerDigits((int) (byte) 100);
        int int19 = numberFormat14.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        boolean boolean27 = numberFormat25.isGroupingUsed();
        boolean boolean28 = numberFormat25.isGroupingUsed();
        fractionFormat21.setNumeratorFormat(numberFormat25);
        java.lang.Object obj30 = numberFormat25.clone();
        java.lang.Object obj31 = numberFormat25.clone();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        numberFormat33.setMaximumFractionDigits(100);
        java.lang.String str38 = numberFormat33.format((long) 100);
        int int39 = numberFormat33.getMaximumFractionDigits();
        numberFormat33.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        boolean boolean51 = numberFormat50.isGroupingUsed();
        properFractionFormat48.setWholeFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat43, numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat25, numberFormat33);
        java.text.NumberFormat numberFormat55 = properFractionFormat54.getWholeFormat();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        numberFormat60.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        java.lang.String str67 = fieldPosition66.toString();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale68.getDisplayName(locale69);
        boolean boolean72 = fieldPosition66.equals((java.lang.Object) locale69);
        fieldPosition66.setEndIndex((int) '#');
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getCurrencyInstance(locale75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat77.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        boolean boolean82 = fieldPosition66.equals((java.lang.Object) parsePosition80);
        java.lang.Number number83 = numberFormat60.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition80);
        int int84 = parsePosition80.getIndex();
        java.lang.String str85 = parsePosition80.toString();
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat54.parse("", parsePosition80);
        java.lang.Number number87 = numberFormat2.parse("HI!", parsePosition80);
        numberFormat2.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + roundingMode5 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode5.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100%" + "'", str16, "100%");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10,000%" + "'", str38, "10,000%");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(number83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str85, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction86);
        org.junit.Assert.assertNull(number87);
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        int int7 = numberFormat5.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.lang.Object obj9 = null;
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.FieldPosition fieldPosition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer12 = fractionFormat8.format(obj9, stringBuffer10, fieldPosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getWholeFormat();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        numberFormat29.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        boolean boolean35 = parsePosition13.equals((java.lang.Object) fractionFormat33);
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = locale36.getISO3Country();
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale36);
        boolean boolean42 = parsePosition13.equals((java.lang.Object) locale36);
        java.util.Locale.setDefault(locale36);
        boolean boolean44 = locale36.hasExtensions();
        java.util.Locale.setDefault(locale36);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh-TW" + "'", str37, "zh-TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "TWN" + "'", str38, "TWN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-TW" + "'", str39, "zh-TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale19 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        java.lang.String str22 = numberFormat20.format((long) 60);
        java.lang.Object obj23 = numberFormat20.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator24 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) numberFormat20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertEquals(locale19.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "6,000%" + "'", str22, "6,000%");
        org.junit.Assert.assertNotNull(obj23);
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale7.toLanguageTag();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale16.getDisplayScript(locale19);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale16.getDisplayCountry(locale23);
        java.util.Locale locale26 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str27 = locale23.getDisplayLanguage(locale26);
        java.lang.String str28 = locale14.getDisplayCountry(locale26);
        java.lang.String str29 = locale7.getDisplayVariant(locale14);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Taiwan" + "'", str24, "Taiwan");
        org.junit.Assert.assertEquals(locale26.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "java.text.parseposition[index=35,errorindex=600]");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str13 = fractionFormat11.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat14 = fractionFormat11.getNumeratorFormat();
        fractionFormat8.setNumeratorFormat(numberFormat14);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        boolean boolean24 = numberFormat23.isGroupingUsed();
        java.util.Currency currency25 = numberFormat23.getCurrency();
        numberFormat20.setCurrency(currency25);
        java.util.Currency currency27 = numberFormat20.getCurrency();
        java.math.RoundingMode roundingMode28 = numberFormat20.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode28);
        java.math.RoundingMode roundingMode30 = numberFormat14.getRoundingMode();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale locale33 = builder31.build();
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        boolean boolean37 = field34.equals((java.lang.Object) locale36);
        java.lang.String str38 = locale36.getDisplayVariant();
        java.util.Locale.Builder builder39 = builder31.setLocale(locale36);
        java.util.Locale.Builder builder40 = builder31.clear();
        java.util.Locale.Builder builder41 = builder31.clear();
        boolean boolean42 = numberFormat14.equals((java.lang.Object) builder31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat14);
        numberFormat14.setMinimumIntegerDigits(1727999);
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100 0 / 1" + "'", str13, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode28 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode28.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        long long2 = fraction0.longValue();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction0.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.multiply(fraction10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        boolean boolean16 = fraction10.equals((java.lang.Object) properFractionFormat15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction0.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction19 = fraction0.subtract(fraction18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fraction must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fraction17);
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction41.add(fraction48);
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        long long73 = fraction71.longValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction67.multiply(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction55.divide(fraction74);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction41.subtract(fraction75);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction38.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction27.subtract(fraction38);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.abs();
        int int80 = fraction79.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 13 + "'", int80 == 13);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Currency currency12 = numberFormat10.getCurrency();
        properFractionFormat8.setNumeratorFormat(numberFormat10);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = locale14.getISO3Country();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale14);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        java.util.Currency currency28 = numberFormat26.getCurrency();
        numberFormat23.setCurrency(currency28);
        java.util.Currency currency30 = numberFormat23.getCurrency();
        int int31 = numberFormat23.getMaximumFractionDigits();
        java.lang.Object obj32 = numberFormat23.clone();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        numberFormat34.setMaximumFractionDigits(100);
        numberFormat34.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str41 = numberFormat34.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat23, numberFormat34);
        numberFormat34.setMinimumIntegerDigits(600);
        boolean boolean45 = numberFormat34.isParseIntegerOnly();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str50 = fractionFormat48.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat51 = fractionFormat48.getNumeratorFormat();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.lang.String str57 = locale55.getDisplayCountry();
        java.lang.String str58 = locale52.getDisplayName(locale55);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        java.lang.String str64 = locale52.getDisplayLanguage(locale61);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance(locale52);
        fractionFormat48.setNumeratorFormat(numberFormat65);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        numberFormat71.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str75 = numberFormat71.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        int int77 = numberFormat71.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat65, numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat34, numberFormat71);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale80.getISO3Language();
        java.lang.String str82 = locale80.getDisplayCountry();
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        java.lang.String str85 = locale83.getISO3Language();
        java.lang.String str86 = locale80.getDisplayScript(locale83);
        java.lang.StringBuffer stringBuffer87 = null;
        java.text.NumberFormat.Field field88 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition89 = new java.text.FieldPosition((java.text.Format.Field) field88);
        java.text.FieldPosition fieldPosition91 = new java.text.FieldPosition((java.text.Format.Field) field88, (int) '#');
        boolean boolean93 = fieldPosition91.equals((java.lang.Object) (byte) -1);
        fieldPosition91.setEndIndex((int) ' ');
        int int96 = fieldPosition91.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer97 = properFractionFormat79.format((java.lang.Object) locale83, stringBuffer87, fieldPosition91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100%" + "'", str41, "100%");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100 0 / 1" + "'", str50, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str58, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "kor" + "'", str62, "kor");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "taiwan" + "'", str64, "taiwan");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0%" + "'", str75, "0%");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "kor" + "'", str81, "kor");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zho" + "'", str85, "zho");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(field88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMaximumIntegerDigits((int) 'a');
        java.util.Currency currency14 = numberFormat11.getCurrency();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = numberFormat11.parse("java.text.ParsePosition[index=1,errorIndex=10]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.ParsePosition[index=1,errorIndex=10]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10,000%" + "'", str9, "10,000%");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZH_TW" + "'", str10, "ZH_TW");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.lang.String str11 = locale5.getDisplayName(locale8);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.lang.String str17 = locale5.getDisplayLanguage(locale14);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.lang.String str25 = locale18.getDisplayCountry(locale21);
        java.lang.String str26 = locale18.getISO3Language();
        java.lang.String str27 = locale18.getDisplayName();
        java.lang.String str29 = locale18.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        boolean boolean39 = numberFormat37.equals((java.lang.Object) locale38);
        boolean boolean40 = fraction35.equals((java.lang.Object) locale38);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction35.abs();
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        boolean boolean44 = fraction41.equals((java.lang.Object) locale42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale42);
        java.lang.String str46 = locale18.getDisplayScript(locale42);
        java.lang.String str47 = locale5.getDisplayVariant(locale18);
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale.Builder builder50 = builder48.clear();
        java.util.Locale.Builder builder51 = builder50.clearExtensions();
        java.util.Locale.Builder builder52 = builder51.clear();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str56 = locale53.getISO3Country();
        java.util.Locale.Builder builder57 = builder51.setLocale(locale53);
        java.util.Locale.Builder builder58 = builder57.clear();
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.lang.String str64 = locale62.getDisplayCountry();
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getIntegerInstance(locale62);
        java.lang.String str66 = locale59.getDisplayCountry(locale62);
        java.lang.String str67 = locale59.getISO3Language();
        java.lang.String str68 = locale59.getDisplayName();
        java.util.Locale.Builder builder69 = builder58.setLocale(locale59);
        java.lang.String str70 = locale5.getDisplayVariant(locale59);
        java.lang.String str71 = locale2.getDisplayName(locale59);
        java.util.Locale locale72 = locale59.stripExtensions();
        java.lang.String str73 = locale59.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str11, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "taiwan" + "'", str17, "taiwan");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "France" + "'", str25, "France");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French (France)" + "'", str27, "French (France)");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "10,000%" + "'", str47, "10,000%");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "France" + "'", str66, "France");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fra" + "'", str67, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "French (France)" + "'", str68, "French (France)");
        org.junit.Assert.assertNotNull(builder69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "10,000%" + "'", str70, "10,000%");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "chinese (HI!)" + "'", str71, "chinese (HI!)");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fr_FR" + "'", str73, "fr_FR");
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.util.Currency currency23 = null;
        // The following exception was thrown during execution in test generation
        try {
            numberFormat22.setCurrency(currency23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 'a', 117);
        long long4 = fraction3.longValue();
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException10 = new org.apache.commons.math.fraction.FractionConversionException((double) '4', (long) (-1), (long) (short) 0);
        java.lang.Throwable[] throwableArray11 = fractionConversionException10.getSuppressed();
        boolean boolean12 = fraction3.equals((java.lang.Object) throwableArray11);
        long long13 = fraction3.longValue();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction16.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction(14400, 60);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.multiply(fraction26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction28 = fraction3.add(fraction22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: mul");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2147483647L + "'", long4 == 2147483647L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2,147,483,647 / 1" + "'", str5, "2,147,483,647 / 1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2,147,483,647 / 1" + "'", str6, "2,147,483,647 / 1");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2147483647L + "'", long13 == 2147483647L);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.util.Set<java.lang.Character> charSet7 = locale1.getExtensionKeys();
        boolean boolean8 = locale1.hasExtensions();
        java.lang.String str9 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        boolean boolean19 = numberFormat17.isGroupingUsed();
        boolean boolean20 = numberFormat17.isGroupingUsed();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition23);
        numberFormat17.setParseIntegerOnly(false);
        properFractionFormat13.setWholeFormat(numberFormat17);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat35.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition39);
        properFractionFormat31.setNumeratorFormat(numberFormat35);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str49 = fractionFormat47.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat50 = fractionFormat47.getNumeratorFormat();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.lang.String str56 = locale54.getDisplayCountry();
        java.lang.String str57 = locale51.getDisplayName(locale54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale60.getISO3Language();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.lang.String str63 = locale51.getDisplayLanguage(locale60);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale51);
        fractionFormat47.setNumeratorFormat(numberFormat64);
        properFractionFormat44.setWholeFormat(numberFormat64);
        properFractionFormat31.setWholeFormat(numberFormat64);
        properFractionFormat13.setNumeratorFormat(numberFormat64);
        java.util.Locale locale70 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale70);
        java.lang.String str72 = locale70.getDisplayCountry();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale73.getISO3Language();
        java.util.Set<java.lang.Character> charSet75 = locale73.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale73);
        java.lang.String str77 = locale70.getDisplayVariant(locale73);
        java.util.Set<java.lang.String> strSet78 = locale73.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = properFractionFormat13.format((java.lang.Object) locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100 0 / 1" + "'", str49, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean" + "'", str57, "Korean");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "kor" + "'", str74, "kor");
        org.junit.Assert.assertNotNull(charSet75);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(fractionFormat79);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        numberFormat3.setGroupingUsed(false);
        int int13 = numberFormat3.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        org.apache.commons.math.fraction.Fraction fraction18 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction23.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.divide(fraction35);
        int int38 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction32.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction19.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction44 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str45 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction44);
        long long46 = fraction44.longValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.divide(fraction51);
        double double53 = fraction47.doubleValue();
        int int54 = fraction47.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction32.multiply(fraction47);
        java.lang.StringBuffer stringBuffer56 = null;
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field57);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field57, 1);
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field57, (int) (short) 100);
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayScript();
        java.lang.String str66 = locale63.getDisplayCountry(locale64);
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        boolean boolean69 = field57.equals((java.lang.Object) locale64);
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition((java.text.Format.Field) field57);
        fieldPosition70.setBeginIndex((int) 'a');
        fieldPosition70.setEndIndex((int) (short) 10000);
        fieldPosition70.setBeginIndex((int) (byte) 64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = properFractionFormat14.format((java.lang.Object) fraction32, stringBuffer56, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 / 100" + "'", str45, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.01d + "'", double53 == 0.01d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Japan" + "'", str66, "Japan");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat.Field field17 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((java.text.Format.Field) field17);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        boolean boolean21 = field17.equals((java.lang.Object) locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale19.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale19);
        java.lang.String str25 = locale16.getDisplayVariant(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.Object obj27 = locale19.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str14, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "en");
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        java.lang.String str3 = locale2.getCountry();
        java.lang.String str4 = locale2.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.lang.String str7 = locale2.getExtension('a');
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHINESE (TAIWAN)" + "'", str3, "CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "france (CHINESE (TAIWAN))" + "'", str4, "france (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getWholeFormat();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        numberFormat29.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        boolean boolean35 = parsePosition13.equals((java.lang.Object) fractionFormat33);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        boolean boolean39 = numberFormat37.equals((java.lang.Object) locale38);
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getIntegerInstance(locale41);
        java.lang.String str45 = locale38.getDisplayVariant(locale41);
        java.lang.String str46 = locale38.getDisplayCountry();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale38);
        numberFormat47.setMaximumIntegerDigits((int) 'a');
        fractionFormat33.setDenominatorFormat(numberFormat47);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        int int56 = numberFormat55.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat55);
        java.text.NumberFormat numberFormat58 = fractionFormat57.getNumeratorFormat();
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        java.math.RoundingMode roundingMode71 = numberFormat63.getRoundingMode();
        numberFormat63.setParseIntegerOnly(false);
        fractionFormat57.setDenominatorFormat(numberFormat63);
        fractionFormat33.setNumeratorFormat(numberFormat63);
        java.util.Locale locale79 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getNumberInstance(locale79);
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getInstance(locale82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance(locale84);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = new org.apache.commons.math.fraction.FractionFormat(numberFormat83, numberFormat85);
        java.text.ParsePosition parsePosition89 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj90 = numberFormat85.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition89);
        java.lang.String str91 = parsePosition89.toString();
        boolean boolean93 = parsePosition89.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj94 = numberFormat80.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition89);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat95 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        java.text.NumberFormat numberFormat96 = properFractionFormat95.getWholeFormat();
        fractionFormat33.setNumeratorFormat(numberFormat96);
        numberFormat96.setMinimumIntegerDigits((int) (short) 2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode71.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale79.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str91, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(numberFormat96);
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale locale10 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale14.getDisplayVariant(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat26.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition30);
        java.lang.String str32 = parsePosition30.toString();
        boolean boolean34 = parsePosition30.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction35 = properFractionFormat21.parse("java.text.ParseException: zh_TW", parsePosition30);
        java.text.NumberFormat numberFormat36 = properFractionFormat21.getDenominatorFormat();
        int int37 = numberFormat36.getMinimumIntegerDigits();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode44 = numberFormat42.getRoundingMode();
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str65 = fractionConversionException64.getPattern();
        java.lang.Throwable[] throwableArray66 = fractionConversionException64.getSuppressed();
        java.lang.Object[] objArray67 = fractionConversionException64.getArguments();
        boolean boolean68 = parsePosition59.equals((java.lang.Object) objArray67);
        int int69 = parsePosition59.getIndex();
        int int70 = parsePosition59.getIndex();
        java.lang.Object obj71 = fractionFormat47.parseObject("\ud55c\uad6d\uc5b4", parsePosition59);
        java.lang.Number number72 = numberFormat42.parse("1 / 100", parsePosition59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat36, numberFormat42);
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) '4');
        parsePosition76.setErrorIndex(600);
        java.lang.Number number79 = numberFormat42.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=119,endIndex=97]", parsePosition76);
        int int80 = numberFormat42.getMaximumIntegerDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertEquals(locale10.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str32, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(fraction35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode44 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode44.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str65, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(number72);
        org.junit.Assert.assertNull(number79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        numberFormat23.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        java.lang.String str30 = fieldPosition29.toString();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayName(locale32);
        boolean boolean35 = fieldPosition29.equals((java.lang.Object) locale32);
        fieldPosition29.setEndIndex((int) '#');
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat40.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition43);
        boolean boolean45 = fieldPosition29.equals((java.lang.Object) parsePosition43);
        java.lang.Number number46 = numberFormat23.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition43);
        int int47 = parsePosition43.getIndex();
        java.lang.String str48 = parsePosition43.toString();
        java.lang.Object obj49 = null;
        boolean boolean50 = parsePosition43.equals(obj49);
        java.lang.Number number51 = numberFormat2.parse("chinese (taiwan)", parsePosition43);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits(100);
        java.lang.String str58 = numberFormat53.format((long) 100);
        int int59 = numberFormat53.getMaximumFractionDigits();
        java.lang.String str60 = numberFormat2.format((java.lang.Object) int59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (Taiwan)" + "'", str34, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str48, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(number51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10,000%" + "'", str58, "10,000%");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        java.util.Locale locale11 = new java.util.Locale("1%", "\ub300\ub9cc");
        java.lang.String str12 = locale11.getDisplayScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits(2147483647);
        numberFormat14.setMinimumIntegerDigits(10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat13, numberFormat14);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number22 = numberFormat20.parse("-\244 14,399.00");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"-? 14,399.00\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getLanguage();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale9);
        numberFormat15.setMinimumIntegerDigits((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str5 = locale1.getISO3Language();
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale1);
        java.lang.String str7 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale10 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category4, locale10);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale13.getVariant();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setScript("");
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale19.getDisplayLanguage(locale21);
        java.util.Locale.Builder builder23 = builder18.setLocale(locale19);
        java.lang.String str24 = locale13.getDisplayVariant(locale19);
        java.lang.String str25 = locale19.getScript();
        java.util.Locale.setDefault(category12, locale19);
        java.util.Locale locale27 = java.util.Locale.getDefault(category12);
        java.util.Locale.setDefault(category4, locale27);
        java.lang.String str29 = locale0.getDisplayName(locale27);
        java.util.Locale locale31 = new java.util.Locale("jpn");
        java.lang.String str32 = locale31.getISO3Language();
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale38 = java.util.Locale.getDefault(category33);
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale39.getDisplayCountry(locale40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale39);
        java.lang.String str44 = locale38.getDisplayCountry(locale39);
        java.lang.String str45 = locale39.getDisplayName();
        java.lang.String str46 = locale39.getCountry();
        java.lang.String str47 = locale31.getDisplayVariant(locale39);
        java.lang.String str48 = locale27.getDisplayLanguage(locale31);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals(locale10.toString(), "chinese (taiwan)");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinesisch" + "'", str22, "Chinesisch");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str29, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals(locale31.toString(), "jpn");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "jpn" + "'", str32, "jpn");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japan" + "'", str42, "Japan");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)" + "'", str45, "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JP" + "'", str46, "JP");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat6.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition9);
        org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("zh_TW", parsePosition9);
        java.text.NumberFormat numberFormat12 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isGroupingUsed();
        java.lang.String str22 = numberFormat17.format((double) 10L);
        java.text.NumberFormat numberFormat23 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat17, numberFormat23);
        numberFormat17.setMinimumIntegerDigits((int) '4');
        properFractionFormat2.setDenominatorFormat(numberFormat17);
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field30, (int) '#');
        java.text.Format.Field field33 = fieldPosition32.getFieldAttribute();
        java.text.Format.Field field34 = fieldPosition32.getFieldAttribute();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayName(locale38);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        java.lang.String str47 = locale35.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale35);
        boolean boolean49 = fieldPosition32.equals((java.lang.Object) numberFormat48);
        fieldPosition32.setBeginIndex(35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer52 = numberFormat17.format((double) 84, stringBuffer29, fieldPosition32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1,000%" + "'", str22, "1,000%");
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Korean" + "'", str41, "Korean");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        boolean boolean8 = numberFormat6.equals((java.lang.Object) locale7);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str23 = locale7.getDisplayVariant(locale19);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category24, locale31);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction36.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.divide(fraction48);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale51.getScript();
        boolean boolean54 = fraction50.equals((java.lang.Object) locale51);
        java.util.Locale.setDefault(category24, locale51);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57, numberFormat59);
        numberFormat59.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field64 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field64);
        java.lang.String str66 = fieldPosition65.toString();
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.lang.String str69 = locale68.getDisplayScript();
        java.lang.String str70 = locale67.getDisplayName(locale68);
        boolean boolean71 = fieldPosition65.equals((java.lang.Object) locale68);
        fieldPosition65.setEndIndex((int) '#');
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getCurrencyInstance(locale74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction80 = properFractionFormat76.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition79);
        boolean boolean81 = fieldPosition65.equals((java.lang.Object) parsePosition79);
        java.lang.Number number82 = numberFormat59.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition79);
        org.apache.commons.math.fraction.Fraction fraction85 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction86 = fraction85.negate();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction86.abs();
        org.apache.commons.math.fraction.Fraction fraction88 = fraction86.abs();
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getInstance(locale89);
        java.util.Locale locale91 = java.util.Locale.getDefault();
        boolean boolean92 = numberFormat90.equals((java.lang.Object) locale91);
        boolean boolean93 = fraction88.equals((java.lang.Object) locale91);
        boolean boolean94 = parsePosition79.equals((java.lang.Object) locale91);
        java.util.Locale.setDefault(category24, locale91);
        java.lang.String str96 = locale91.getVariant();
        java.lang.String str97 = locale91.getDisplayVariant();
        java.lang.String str98 = locale19.getDisplayLanguage(locale91);
        java.lang.String str99 = locale19.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals(locale31.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str66, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (Taiwan)" + "'", str70, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNull(fraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(locale91);
// flaky:         org.junit.Assert.assertEquals(locale91.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str98, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        numberFormat18.setParseIntegerOnly(true);
        java.lang.String str57 = numberFormat18.format((double) 14400);
        int int58 = numberFormat18.getMinimumFractionDigits();
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        numberFormat63.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str67 = numberFormat63.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat63);
        java.text.NumberFormat numberFormat69 = fractionFormat68.getNumeratorFormat();
        java.lang.String str71 = numberFormat69.format(1.0d);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale73 = locale72.stripExtensions();
        java.util.Locale locale75 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale75);
        java.lang.String str77 = locale75.getDisplayCountry();
        java.lang.String str78 = locale72.getDisplayName(locale75);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.lang.String str80 = locale79.getDisplayScript();
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.lang.String str82 = locale81.getISO3Language();
        java.lang.String str83 = locale79.getDisplayScript(locale81);
        java.lang.String str84 = locale72.getDisplayLanguage(locale81);
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getNumberInstance(locale72);
        java.util.Currency currency86 = numberFormat85.getCurrency();
        numberFormat69.setCurrency(currency86);
        numberFormat18.setCurrency(currency86);
        numberFormat18.setMinimumFractionDigits(6000);
        numberFormat18.setMinimumFractionDigits((int) (short) 60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "14,400" + "'", str57, "14,400");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0%" + "'", str67, "0%");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "100%" + "'", str71, "100%");
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
// flaky:         org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Korean" + "'", str78, "Korean");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "kor" + "'", str82, "kor");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str84, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(currency86);
// flaky:         org.junit.Assert.assertEquals(currency86.toString(), "XXX");
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.lang.Object obj5 = fractionFormat4.clone();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        fractionFormat10.setDenominatorFormat(numberFormat15);
        fractionFormat4.setNumeratorFormat(numberFormat15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction20 = fractionFormat4.parse("java.text.ParsePosition[index=1,errorIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.ParsePosition[index=1,errorIndex=0]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        int int7 = numberFormat4.getMaximumFractionDigits();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        numberFormat9.setMaximumFractionDigits(100);
        java.lang.String str14 = numberFormat9.format((long) 100);
        int int15 = numberFormat9.getMaximumFractionDigits();
        numberFormat9.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat19, numberFormat26);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale30);
        java.util.Currency currency44 = numberFormat43.getCurrency();
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        numberFormat49.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode54 = numberFormat49.getRoundingMode();
        numberFormat43.setRoundingMode(roundingMode54);
        numberFormat9.setRoundingMode(roundingMode54);
        numberFormat4.setRoundingMode(roundingMode54);
        numberFormat4.setMinimumFractionDigits(0);
        numberFormat4.setMinimumFractionDigits(6000);
        java.lang.StringBuffer stringBuffer63 = null;
        java.text.NumberFormat.Field field64 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field64);
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition((java.text.Format.Field) field64, (int) (short) 0);
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition((java.text.Format.Field) field64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer69 = numberFormat4.format((long) 1, stringBuffer63, fieldPosition68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10,000%" + "'", str14, "10,000%");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Korean" + "'", str36, "Korean");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
// flaky:         org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field64);
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        int int12 = numberFormat7.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        boolean boolean20 = numberFormat18.isGroupingUsed();
        boolean boolean21 = numberFormat18.isGroupingUsed();
        fractionFormat14.setNumeratorFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        java.lang.String str31 = numberFormat26.format((long) 100);
        int int32 = numberFormat26.getMaximumFractionDigits();
        numberFormat26.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat36, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat18, numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = numberFormat18.parseObject("japonais (Japon)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10,000%" + "'", str31, "10,000%");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getNumeratorFormat();
        java.lang.StringBuffer stringBuffer60 = null;
        java.text.NumberFormat.Field field61 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field61, (int) '#');
        java.text.Format.Field field64 = fieldPosition63.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.negate();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction70.multiply(fraction74);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction67.add(fraction74);
        boolean boolean77 = field64.equals((java.lang.Object) fraction67);
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition(field64);
        java.text.Format.Field field79 = fieldPosition78.getFieldAttribute();
        int int80 = fieldPosition78.getEndIndex();
        java.text.Format.Field field81 = fieldPosition78.getFieldAttribute();
        java.text.FieldPosition fieldPosition83 = new java.text.FieldPosition(field81, 32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer84 = numberFormat58.format((long) (short) -100, stringBuffer60, fieldPosition83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(field61);
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(field79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(field81);
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str7 = locale2.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale1.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale1);
        java.lang.String str12 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale6.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Japanese" + "'", str7, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Korean" + "'", str10, "Korean");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str13 = fractionFormat11.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat14 = fractionFormat11.getNumeratorFormat();
        numberFormat14.setMaximumFractionDigits((int) (short) -1);
        int int17 = numberFormat14.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        boolean boolean21 = numberFormat20.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat26.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition30);
        properFractionFormat22.setNumeratorFormat(numberFormat26);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale37 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.lang.String str40 = fractionFormat38.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat41 = fractionFormat38.getNumeratorFormat();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Locale locale43 = locale42.stripExtensions();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str47 = locale45.getDisplayCountry();
        java.lang.String str48 = locale42.getDisplayName(locale45);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale51.getISO3Language();
        java.lang.String str53 = locale49.getDisplayScript(locale51);
        java.lang.String str54 = locale42.getDisplayLanguage(locale51);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getNumberInstance(locale42);
        fractionFormat38.setNumeratorFormat(numberFormat55);
        properFractionFormat35.setWholeFormat(numberFormat55);
        properFractionFormat22.setWholeFormat(numberFormat55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.util.Locale locale63 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        java.lang.String[] strArray65 = java.util.Locale.getISOCountries();
        boolean boolean66 = numberFormat64.equals((java.lang.Object) strArray65);
        java.lang.String str68 = numberFormat64.format((double) (byte) -1);
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = locale70.getDisplayScript();
        java.lang.String str72 = locale69.getDisplayCountry(locale70);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getNumberInstance(locale69);
        numberFormat73.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55, numberFormat64, numberFormat73);
        properFractionFormat18.setWholeFormat(numberFormat64);
        java.text.NumberFormat numberFormat78 = properFractionFormat18.getDenominatorFormat();
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance(locale80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        java.text.ParsePosition parsePosition85 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat82.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition85);
        int int87 = parsePosition85.getIndex();
        org.apache.commons.math.fraction.Fraction fraction88 = properFractionFormat18.parse("overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS", parsePosition85);
        java.lang.Number number89 = numberFormat7.parse("200%", parsePosition85);
        java.lang.Object obj90 = numberFormat7.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100 0 / 1" + "'", str13, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100 0 / 1" + "'", str40, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Korean" + "'", str48, "Korean");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals(locale63.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-100%" + "'", str68, "-100%");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japan" + "'", str72, "Japan");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNull(fraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNull(fraction88);
        org.junit.Assert.assertNull(number89);
        org.junit.Assert.assertNotNull(obj90);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str15 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = numberFormat16.parseObject("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Korean" + "'", str6, "Korean");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ko" + "'", str13, "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ko" + "'", str15, "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        java.util.Locale locale11 = new java.util.Locale("1%", "\ub300\ub9cc");
        java.lang.String str12 = locale11.getDisplayScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits(2147483647);
        numberFormat14.setMinimumIntegerDigits(10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat13, numberFormat14);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getNumeratorFormat();
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale26 = java.util.Locale.getDefault(category21);
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.divide(fraction44);
        int int47 = fraction41.intValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction41.abs();
        int int50 = fraction41.getDenominator();
        java.lang.String str51 = numberFormat28.format((java.lang.Object) fraction41);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int55 = fraction54.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction41.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction58 = new org.apache.commons.math.fraction.Fraction((double) ' ');
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale59.getDisplayLanguage();
        java.util.Locale.setDefault(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale59);
        boolean boolean63 = fraction58.equals((java.lang.Object) fractionFormat62);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction54.add(fraction58);
        java.lang.StringBuffer stringBuffer65 = null;
        java.text.NumberFormat.Field field66 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition((java.text.Format.Field) field66);
        int int68 = fieldPosition67.getEndIndex();
        fieldPosition67.setBeginIndex((int) (byte) 100);
        java.util.Locale locale72 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale72);
        java.lang.String str75 = fractionFormat73.format((java.lang.Object) 100);
        boolean boolean76 = fieldPosition67.equals((java.lang.Object) fractionFormat73);
        java.text.Format.Field field77 = fieldPosition67.getFieldAttribute();
        fieldPosition67.setEndIndex((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer80 = properFractionFormat19.format((java.lang.Object) fraction64, stringBuffer65, fieldPosition67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 60 + "'", int50 == 60);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2%" + "'", str51, "2%");
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese" + "'", str60, "Chinese");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(field66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "100 0 / 1" + "'", str75, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(field77);
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str13 = numberFormat11.format(0.0d);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        boolean boolean16 = numberFormat11.equals((java.lang.Object) strSet15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat11);
        java.util.Locale locale21 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        numberFormat22.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat22.setGroupingUsed(true);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        boolean boolean34 = numberFormat32.equals((java.lang.Object) strArray33);
        int int35 = numberFormat32.getMinimumIntegerDigits();
        java.util.Currency currency36 = numberFormat32.getCurrency();
        numberFormat22.setCurrency(currency36);
        numberFormat5.setCurrency(currency36);
        java.lang.Object obj39 = null;
        java.lang.StringBuffer stringBuffer40 = null;
        java.text.NumberFormat.Field field41 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition42 = new java.text.FieldPosition((java.text.Format.Field) field41);
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition((java.text.Format.Field) field41, 1);
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition((java.text.Format.Field) field41, (int) (short) 100);
        fieldPosition46.setEndIndex(3);
        int int49 = fieldPosition46.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer50 = numberFormat5.format(obj39, stringBuffer40, fieldPosition46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertNotNull(field41);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale12 = new java.util.Locale("java.text.ParsePosition[index=1,errorIndex=10]", "java.text.ParseException: ", "en-CA");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = numberFormat8.format((java.lang.Object) locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseposition[index=1,errorindex=10]_JAVA.TEXT.PARSEEXCEPTION: _en-CA");
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.setDefault(locale6);
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat19);
        boolean boolean21 = numberFormat19.isGroupingUsed();
        boolean boolean22 = numberFormat19.isGroupingUsed();
        fractionFormat15.setNumeratorFormat(numberFormat19);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        java.util.Currency currency42 = numberFormat40.getCurrency();
        numberFormat37.setCurrency(currency42);
        java.util.Currency currency44 = numberFormat37.getCurrency();
        java.math.RoundingMode roundingMode45 = numberFormat37.getRoundingMode();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) 'a');
        java.lang.String str49 = parsePosition48.toString();
        java.lang.String str50 = parsePosition48.toString();
        java.lang.Object obj51 = numberFormat37.parseObject("zho", parsePosition48);
        java.lang.Object obj52 = fractionFormat31.parseObject("java.text.NumberFormat$Field(currency)", parsePosition48);
        java.lang.Object obj53 = numberFormat19.parseObject("Italian", parsePosition48);
        java.lang.Object obj54 = numberFormat10.parseObject("600", parsePosition48);
        java.util.Locale locale56 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance(locale58);
        java.util.Currency currency61 = numberFormat60.getCurrency();
        numberFormat60.setMinimumIntegerDigits(1);
        numberFormat60.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj69 = numberFormat60.parseObject("Japan", parsePosition68);
        int int70 = numberFormat60.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat57, numberFormat60);
        boolean boolean73 = locale6.equals((java.lang.Object) numberFormat60);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode45.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str49, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str50, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals(locale56.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "TWD");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        int int1 = numberFormat0.getMaximumFractionDigits();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        numberFormat9.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat3, numberFormat9);
        java.lang.String str14 = numberFormat9.format((double) (byte) 64);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "64" + "'", str14, "64");
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.util.Locale.setDefault(locale2);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        java.util.Currency currency22 = numberFormat20.getCurrency();
        numberFormat17.setCurrency(currency22);
        java.util.Currency currency24 = numberFormat17.getCurrency();
        java.math.RoundingMode roundingMode25 = numberFormat17.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28, numberFormat30);
        boolean boolean32 = numberFormat30.isGroupingUsed();
        boolean boolean33 = numberFormat30.isGroupingUsed();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat30.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition36);
        numberFormat30.setParseIntegerOnly(false);
        properFractionFormat26.setWholeFormat(numberFormat30);
        java.lang.StringBuffer stringBuffer41 = null;
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition(1728000);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer44 = numberFormat12.format((java.lang.Object) numberFormat30, stringBuffer41, fieldPosition43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode25.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat2.getNumeratorFormat();
        java.lang.String str9 = numberFormat7.format((long) 2147483647);
        boolean boolean10 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.lang.Object obj12 = numberFormat7.clone();
        java.text.ParsePosition parsePosition14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = numberFormat7.parseObject("fran\347ais", parsePosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2,147,483,647" + "'", str9, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getLanguage();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale13 = new java.util.Locale("Japanese (Japan)", "java.text.NumberFormat$Field(currency)", "\uc911\uad6d\uc5b4");
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale0.getDisplayName(locale14);
        java.util.Locale.setDefault(locale14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertNotNull(numberFormat9);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French (France)" + "'", str15, "French (France)");
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        float float8 = fraction7.floatValue();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ONE;
        long long29 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction12.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction11.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        long long54 = fraction52.longValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction48.multiply(fraction52);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction40.subtract(fraction55);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction31.subtract(fraction56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction7.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction3.add(fraction59);
        java.lang.String str61 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction59);
        org.apache.commons.math.fraction.Fraction fraction64 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str67 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction66);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction71.abs();
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction71.add(fraction77);
        org.apache.commons.math.fraction.Fraction fraction81 = fraction66.multiply(fraction77);
        org.apache.commons.math.fraction.Fraction fraction82 = org.apache.commons.math.fraction.Fraction.ONE;
        long long83 = fraction82.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction66.multiply(fraction82);
        java.text.NumberFormat.Field field85 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition86 = new java.text.FieldPosition((java.text.Format.Field) field85);
        java.util.Locale locale87 = java.util.Locale.CHINA;
        boolean boolean88 = field85.equals((java.lang.Object) locale87);
        boolean boolean89 = fraction82.equals((java.lang.Object) field85);
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        java.lang.String str91 = locale90.getScript();
        java.util.Set<java.lang.String> strSet92 = locale90.getUnicodeLocaleAttributes();
        java.lang.String str93 = locale90.toLanguageTag();
        java.text.NumberFormat numberFormat94 = java.text.NumberFormat.getIntegerInstance(locale90);
        boolean boolean95 = fraction82.equals((java.lang.Object) numberFormat94);
        org.apache.commons.math.fraction.Fraction fraction96 = fraction65.add(fraction82);
        org.apache.commons.math.fraction.Fraction fraction97 = fraction59.multiply(fraction82);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 10.0f + "'", float8 == 10.0f);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 1" + "'", str13, "1 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0 / 1" + "'", str61, "0 / 1");
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1 / 1" + "'", str67, "1 / 1");
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(field85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "en" + "'", str93, "en");
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertNotNull(fraction97);
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList14);
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList16);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet24, filteringMode26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList33);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList33);
        boolean boolean38 = locale3.equals((java.lang.Object) strList33);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("chinois");
        java.lang.String str7 = locale6.getScript();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency11 = numberFormat10.getCurrency();
        java.lang.String str13 = numberFormat10.format(1.0d);
        int int14 = numberFormat10.getMinimumIntegerDigits();
        int int15 = numberFormat10.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat10);
        java.lang.Object obj17 = fractionFormat16.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100%" + "'", str13, "100%");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder10 = builder3.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder12 = builder3.setRegion("fr");
        java.util.Locale locale13 = builder3.build();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.lang.String str17 = null; // flaky: locale15.getISO3Country();
        java.util.Locale.Builder builder18 = null; // flaky: builder3.setLocale(locale15);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale25 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category19, locale25);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale.Builder builder30 = builder27.setVariant("");
        java.util.Locale.Builder builder32 = builder30.setLanguage("Japan");
        java.util.Locale.Builder builder34 = builder32.setLanguage("France");
        java.util.Locale.Builder builder35 = builder32.clear();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.util.Locale.Builder builder39 = builder35.setLocale(locale37);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str45 = locale41.getISO3Language();
        boolean boolean46 = numberFormat40.equals((java.lang.Object) locale41);
        java.util.Locale.Builder builder47 = builder35.setLocale(locale41);
        java.util.Locale.setDefault(category19, locale41);
        java.util.Locale locale49 = java.util.Locale.getDefault(category19);
        java.util.Locale.Builder builder50 = builder3.setLocale(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder50.setRegion("\u6cd5\u570b");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "japan_FR_#a-twn");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals(locale25.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale36 = locale12.stripExtensions();
        java.lang.String str37 = locale9.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale39.getDisplayLanguage(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.util.Locale.setDefault(category0, locale41);
        java.text.NumberFormat.Field field47 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition((java.text.Format.Field) field47);
        java.lang.String str49 = fieldPosition48.toString();
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayName(locale51);
        boolean boolean54 = fieldPosition48.equals((java.lang.Object) locale51);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale51);
        java.lang.String str56 = locale41.getDisplayCountry(locale51);
        java.lang.String str57 = locale41.getDisplayVariant();
        java.lang.String str58 = locale41.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinesisch" + "'", str42, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str49, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese (Taiwan)" + "'", str53, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Germany" + "'", str56, "Germany");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Deutschland" + "'", str58, "Deutschland");
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayCountry();
        java.lang.String str7 = locale1.getDisplayName(locale4);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.lang.String str13 = locale1.getDisplayLanguage(locale10);
        java.lang.String str14 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Set<java.lang.String> strSet17 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4)" + "'", str7, "\uc911\uad6d\uc5b4)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "japanese (japan)" + "'", str13, "japanese (japan)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.fraction.FractionConversionException: Unable to convert -0.01 to fraction after 0 iterations", "119", "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "org.apache.commons.math.fraction.fractionconversionexception: unable to convert -0.01 to fraction after 0 iterations_119_hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))");
        org.junit.Assert.assertNotNull(fractionFormat4);
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 'a', 117);
        long long4 = fraction3.longValue();
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException10 = new org.apache.commons.math.fraction.FractionConversionException((double) '4', (long) (-1), (long) (short) 0);
        java.lang.Throwable[] throwableArray11 = fractionConversionException10.getSuppressed();
        boolean boolean12 = fraction3.equals((java.lang.Object) throwableArray11);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field13);
        int int15 = fieldPosition14.getField();
        java.text.Format.Field field16 = fieldPosition14.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        boolean boolean18 = field16.equals((java.lang.Object) fraction17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits(2147483647);
        int int22 = numberFormat19.getMaximumIntegerDigits();
        numberFormat19.setMaximumIntegerDigits((int) (short) 32);
        boolean boolean25 = fraction17.equals((java.lang.Object) numberFormat19);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        properFractionFormat35.setWholeFormat(numberFormat37);
        java.text.NumberFormat numberFormat40 = properFractionFormat35.getWholeFormat();
        properFractionFormat28.setWholeFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        properFractionFormat44.setWholeFormat(numberFormat46);
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        java.util.Currency currency50 = numberFormat49.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        java.lang.Object obj52 = numberFormat49.clone();
        boolean boolean53 = numberFormat49.isParseIntegerOnly();
        properFractionFormat28.setWholeFormat(numberFormat49);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        numberFormat56.setMaximumFractionDigits(100);
        java.lang.String str61 = numberFormat56.format((long) 100);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19, numberFormat49, numberFormat56);
        boolean boolean63 = fraction3.equals((java.lang.Object) numberFormat56);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2147483647L + "'", long4 == 2147483647L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2,147,483,647 / 1" + "'", str5, "2,147,483,647 / 1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2,147,483,647 / 1" + "'", str6, "2,147,483,647 / 1");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNull(fraction32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "10,000%" + "'", str61, "10,000%");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.lang.Object obj14 = numberFormat7.clone();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setMinimumIntegerDigits(1);
        java.util.Currency currency21 = numberFormat17.getCurrency();
        numberFormat7.setCurrency(currency21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat24 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat25 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        java.lang.StringBuffer stringBuffer27 = null;
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        int int30 = fieldPosition29.getEndIndex();
        java.lang.String str31 = fieldPosition29.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer32 = numberFormat7.format((java.lang.Object) numberFormat26, stringBuffer27, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "TWD");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str34 = numberFormat2.format(214748364700L);
        int int35 = numberFormat2.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "214,748,364,700" + "'", str34, "214,748,364,700");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        java.lang.Object obj6 = null;
        boolean boolean7 = numberFormat3.equals(obj6);
        java.lang.String str9 = numberFormat3.format((double) (-2L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = numberFormat3.parseObject("2,147,483,647 / 1_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT -0 TO FRACTION (2,147,483,647/-1)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-200%" + "'", str9, "-200%");
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        byte byte31 = fraction27.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 0 + "'", byte31 == (byte) 0);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh-TW", strMap1);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str10 = locale3.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet11 = locale3.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        java.lang.String str38 = locale33.toLanguageTag();
        java.util.Set<java.lang.String> strSet39 = locale33.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet39, filteringMode40);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet48);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList43, (java.util.Collection<java.lang.String>) strSet48, filteringMode50);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList57);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList43, (java.util.Collection<java.lang.String>) strList57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList43, strMap61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList43, strMap63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList64, strMap65);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getIntegerInstance(locale67);
        java.lang.String str69 = locale67.getISO3Language();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.parse("ita");
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale locale76 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale76);
        java.lang.String str78 = locale76.getDisplayCountry();
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getIntegerInstance(locale76);
        java.lang.String str80 = locale73.getDisplayCountry(locale76);
        java.util.Set<java.lang.String> strSet81 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags(languageRangeList72, (java.util.Collection<java.lang.String>) strSet81, filteringMode82);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags(languageRangeList66, (java.util.Collection<java.lang.String>) strSet70, filteringMode82);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strSet39, filteringMode82);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList85);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "France" + "'", str10, "France");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "und" + "'", str38, "und");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals(locale76.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "France" + "'", str80, "France");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode82.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.lang.String str26 = numberFormat18.format((long) (short) 120);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "12,000%" + "'", str26, "12,000%");
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.lang.Object obj5 = fractionFormat4.clone();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        fractionFormat10.setDenominatorFormat(numberFormat15);
        fractionFormat4.setNumeratorFormat(numberFormat15);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        java.lang.String str24 = locale19.toLanguageTag();
        java.util.Set<java.lang.String> strSet25 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale19);
        java.lang.Object obj27 = numberFormat26.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        fractionFormat4.setNumeratorFormat(numberFormat26);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        boolean boolean34 = numberFormat31.isGroupingUsed();
        fractionFormat4.setDenominatorFormat(numberFormat31);
        int int36 = numberFormat31.getMaximumFractionDigits();
        int int37 = numberFormat31.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getWholeFormat();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        numberFormat29.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        boolean boolean35 = parsePosition13.equals((java.lang.Object) fractionFormat33);
        java.lang.String str36 = parsePosition13.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str36, "java.text.ParsePosition[index=1,errorIndex=1]");
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj21 = numberFormat16.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition20);
        java.lang.String str22 = parsePosition20.toString();
        java.lang.Number number23 = numberFormat4.parse("Chinese", parsePosition20);
        java.lang.String str25 = numberFormat4.format((double) (short) 10);
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        int int32 = numberFormat31.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.util.Currency currency46 = numberFormat39.getCurrency();
        java.math.RoundingMode roundingMode47 = numberFormat39.getRoundingMode();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) 'a');
        java.lang.String str51 = parsePosition50.toString();
        java.lang.String str52 = parsePosition50.toString();
        java.lang.Object obj53 = numberFormat39.parseObject("zho", parsePosition50);
        java.lang.Object obj54 = fractionFormat33.parseObject("java.text.NumberFormat$Field(currency)", parsePosition50);
        java.lang.Object obj55 = numberFormat4.parseObject("java.text.ParsePosition[index=1,errorIndex=0]", parsePosition50);
        parsePosition50.setErrorIndex((int) (byte) 24);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str22, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1,000%" + "'", str25, "1,000%");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str51, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str52, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        java.math.RoundingMode roundingMode19 = numberFormat11.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode19);
        java.lang.Object obj21 = numberFormat4.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction23 = null;
        java.lang.StringBuffer stringBuffer24 = null;
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field25);
        int int27 = fieldPosition26.getEndIndex();
        int int28 = fieldPosition26.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer29 = properFractionFormat22.format(fraction23, stringBuffer24, fieldPosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category2, locale7);
        java.lang.String str9 = locale7.getISO3Language();
        java.util.Locale locale12 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str14 = locale7.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition(2);
        java.lang.String str20 = parsePosition19.toString();
        org.apache.commons.math.fraction.Fraction fraction21 = fractionFormat16.parse("20 / 7", parsePosition19);
        java.text.NumberFormat numberFormat22 = fractionFormat16.getNumeratorFormat();
        java.lang.StringBuffer stringBuffer24 = null;
        java.text.FieldPosition fieldPosition25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = fractionFormat16.format((java.lang.Object) "59\240999 %", stringBuffer24, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
        org.junit.Assert.assertEquals(locale12.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.ParsePosition[index=2,errorIndex=-1]" + "'", str20, "java.text.ParsePosition[index=2,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        java.util.Locale.Builder builder21 = builder12.setLocale(locale13);
        java.util.Locale.Builder builder22 = builder12.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category24, locale29);
        java.lang.String str31 = locale23.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale.Builder builder33 = builder22.setLocale(locale23);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale39 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str40 = locale34.getDisplayScript(locale39);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Set<java.lang.String> strSet42 = locale39.getUnicodeLocaleKeys();
        java.lang.String str43 = locale39.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder33.setLocale(locale39);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ZH_TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str4, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "anglais" + "'", str31, "anglais");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals(locale39.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str43, "taiwan (ZH_TW,10,000%)");
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat9.setNumeratorFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayName(locale22);
        java.lang.String str25 = locale17.getDisplayLanguage(locale21);
        java.lang.String str26 = locale17.toLanguageTag();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean28 = numberFormat14.equals((java.lang.Object) numberFormat27);
        java.lang.String str30 = numberFormat27.format((double) (byte) 1);
        numberFormat27.setMinimumFractionDigits(60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = numberFormat27.parseObject("Japanese");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u6587" + "'", str25, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ja-JP" + "'", str26, "ja-JP");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        java.util.Locale locale1 = new java.util.Locale("java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US");
        java.lang.String str2 = locale1.getDisplayName();
        java.text.NumberFormat.Field field3 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field3);
        int int5 = fieldPosition4.getEndIndex();
        fieldPosition4.setBeginIndex((int) (byte) 100);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        boolean boolean13 = fieldPosition4.equals((java.lang.Object) fractionFormat10);
        java.text.Format.Field field14 = fieldPosition4.getFieldAttribute();
        java.text.Format.Field field15 = fieldPosition4.getFieldAttribute();
        boolean boolean16 = locale1.equals((java.lang.Object) field15);
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us" + "'", str2, "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        numberFormat3.setGroupingUsed(false);
        int int13 = numberFormat3.getMinimumIntegerDigits();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.toLanguageTag();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale16);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        java.text.NumberFormat numberFormat24 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat22, numberFormat24);
        numberFormat3.setGroupingUsed(true);
        numberFormat3.setMaximumFractionDigits((int) (short) 14400);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        java.util.Currency currency9 = numberFormat8.getCurrency();
        numberFormat8.setMinimumIntegerDigits(1);
        numberFormat8.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat8.parseObject("Japan", parsePosition16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException21 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str22 = fractionConversionException21.getPattern();
        java.lang.Throwable[] throwableArray23 = fractionConversionException21.getSuppressed();
        java.lang.Object[] objArray24 = fractionConversionException21.getArguments();
        boolean boolean25 = parsePosition16.equals((java.lang.Object) objArray24);
        int int26 = parsePosition16.getIndex();
        int int27 = parsePosition16.getIndex();
        java.lang.Object obj28 = fractionFormat4.parseObject("\ud55c\uad6d\uc5b4", parsePosition16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat29.getWholeFormat();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        numberFormat32.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        java.text.NumberFormat numberFormat37 = fractionFormat36.getNumeratorFormat();
        boolean boolean38 = parsePosition16.equals((java.lang.Object) fractionFormat36);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.toLanguageTag();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = locale39.toLanguageTag();
        java.lang.String str43 = locale39.getDisplayVariant();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale39);
        boolean boolean45 = parsePosition16.equals((java.lang.Object) locale39);
        java.util.Locale locale48 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        java.lang.String str49 = locale48.getCountry();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getIntegerInstance(locale48);
        java.util.Locale.setDefault(locale48);
        boolean boolean52 = parsePosition16.equals((java.lang.Object) locale48);
        parsePosition16.setIndex((int) (short) -100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = fractionFormat1.parseObject("DEU", parsePosition16);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "TWD");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str22, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "TWN" + "'", str41, "TWN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh-TW" + "'", str42, "zh-TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(locale48.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "CHINESE (TAIWAN)" + "'", str49, "CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj30 = properFractionFormat28.clone();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale32.getISO3Country();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale32);
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        int int42 = numberFormat41.getMaximumIntegerDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        java.util.Currency currency46 = numberFormat44.getCurrency();
        numberFormat41.setCurrency(currency46);
        java.util.Currency currency48 = numberFormat41.getCurrency();
        int int49 = numberFormat41.getMaximumFractionDigits();
        java.lang.Object obj50 = numberFormat41.clone();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        numberFormat52.setMaximumFractionDigits(100);
        numberFormat52.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str59 = numberFormat52.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat41, numberFormat52);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean64 = numberFormat63.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.lang.String str67 = numberFormat63.format(0.008333333333333333d);
        boolean boolean68 = numberFormat63.isParseIntegerOnly();
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj72 = numberFormat63.parseObject("\u65e5\u6587", parsePosition71);
        int int73 = parsePosition71.getIndex();
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat60.parse("0 / 1", parsePosition71);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat28.parse("-100%", parsePosition71);
        int int76 = fraction75.intValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100%" + "'", str59, "100%");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1%" + "'", str67, "1%");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.lang.Object obj5 = fractionFormat4.clone();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        fractionFormat10.setDenominatorFormat(numberFormat15);
        fractionFormat4.setNumeratorFormat(numberFormat15);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        java.lang.String str24 = locale19.toLanguageTag();
        java.util.Set<java.lang.String> strSet25 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale19);
        java.lang.Object obj27 = numberFormat26.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        fractionFormat4.setNumeratorFormat(numberFormat26);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        boolean boolean34 = numberFormat31.isGroupingUsed();
        fractionFormat4.setDenominatorFormat(numberFormat31);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet39 = locale36.getExtensionKeys();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.text.NumberFormat numberFormat42 = properFractionFormat41.getWholeFormat();
        boolean boolean43 = numberFormat42.isGroupingUsed();
        fractionFormat4.setNumeratorFormat(numberFormat42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction46 = fractionFormat4.parse("CHN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"CHN\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str15 = locale8.getDisplayCountry(locale11);
        java.lang.String str16 = locale8.getISO3Language();
        java.lang.String str17 = locale8.getDisplayName();
        java.util.Locale.setDefault(category3, locale8);
        java.lang.String str19 = locale0.getDisplayLanguage(locale8);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.util.Currency currency29 = numberFormat28.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale33);
        numberFormat36.setMinimumIntegerDigits(0);
        java.lang.String str40 = numberFormat36.format(1.0d);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        boolean boolean47 = numberFormat45.isGroupingUsed();
        boolean boolean48 = numberFormat45.isGroupingUsed();
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj52 = numberFormat45.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition51);
        java.lang.Object obj53 = numberFormat36.parseObject("Taiwan", parsePosition51);
        org.apache.commons.math.fraction.Fraction fraction54 = fractionFormat30.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition51);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance(locale55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56, numberFormat58);
        boolean boolean60 = numberFormat58.isGroupingUsed();
        boolean boolean61 = numberFormat58.isGroupingUsed();
        int int62 = numberFormat58.getMaximumIntegerDigits();
        fractionFormat30.setNumeratorFormat(numberFormat58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = numberFormat20.format((java.lang.Object) fractionFormat30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "France" + "'", str15, "France");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fra" + "'", str16, "fra");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "French (France)" + "'", str17, "French (France)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        boolean boolean10 = numberFormat7.isGroupingUsed();
        java.lang.StringBuffer stringBuffer12 = null;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(100);
        fieldPosition14.setEndIndex(2147483647);
        int int17 = fieldPosition14.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = numberFormat7.format((long) (short) 2, stringBuffer12, fieldPosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getVariant();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        boolean boolean10 = numberFormat8.equals((java.lang.Object) locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale9.getDisplayVariant(locale12);
        java.lang.String str17 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(locale9);
        java.lang.String str20 = locale9.getExtension('u');
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale9.getDisplayVariant(locale21);
        java.lang.String str23 = locale4.getDisplayCountry(locale9);
        java.lang.String str25 = locale9.getExtension('u');
        java.lang.String str26 = locale1.getDisplayName(locale9);
        java.lang.String str27 = locale9.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ub300\ub9cc" + "'", str1, "\ub300\ub9cc");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str2, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        java.lang.String str9 = languageRange1.getRange();
        double double10 = languageRange1.getWeight();
        double double11 = languageRange1.getWeight();
        double double12 = languageRange1.getWeight();
        java.lang.String str13 = languageRange1.getRange();
        java.lang.String str14 = languageRange1.getRange();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.setLanguageTag("it-IT");
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        java.util.Locale.Builder builder24 = builder21.setLocale(locale22);
        boolean boolean25 = languageRange1.equals((java.lang.Object) builder21);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-tw" + "'", str6, "zh-tw");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-tw" + "'", str9, "zh-tw");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-tw" + "'", str13, "zh-tw");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-tw" + "'", str14, "zh-tw");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str5 = locale0.getDisplayLanguage(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale4);
        int int7 = numberFormat6.getMaximumFractionDigits();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        boolean boolean10 = numberFormat9.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj20 = numberFormat15.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition19);
        properFractionFormat11.setNumeratorFormat(numberFormat15);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        boolean boolean24 = numberFormat23.isParseIntegerOnly();
        numberFormat23.setGroupingUsed(false);
        properFractionFormat11.setWholeFormat(numberFormat23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str36 = fractionFormat34.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat37 = fractionFormat34.getNumeratorFormat();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        fractionFormat34.setNumeratorFormat(numberFormat51);
        properFractionFormat31.setWholeFormat(numberFormat51);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance(locale55);
        boolean boolean57 = numberFormat56.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction62 = properFractionFormat58.parse("0%", parsePosition61);
        java.lang.Object obj63 = properFractionFormat31.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition61);
        java.lang.Object obj64 = numberFormat23.parseObject("Chinese (China)", parsePosition61);
        java.lang.String str66 = numberFormat23.format(6.944444444444444E-5d);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat23);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction71.abs();
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction71.add(fraction77);
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction80.divide(fraction83);
        int int86 = fraction80.intValue();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction80.reciprocal();
        java.lang.StringBuffer stringBuffer88 = null;
        java.text.NumberFormat.Field field89 = java.text.NumberFormat.Field.EXPONENT_SYMBOL;
        java.lang.String str90 = field89.toString();
        java.text.FieldPosition fieldPosition92 = new java.text.FieldPosition((java.text.Format.Field) field89, (int) (short) 0);
        java.text.Format.Field field93 = fieldPosition92.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer94 = numberFormat23.format((java.lang.Object) fraction80, stringBuffer88, fieldPosition92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale4.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japanese" + "'", str5, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100 0 / 1" + "'", str36, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(fraction62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(field89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.text.NumberFormat$Field(exponent symbol)" + "'", str90, "java.text.NumberFormat$Field(exponent symbol)");
        org.junit.Assert.assertNotNull(field93);
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        boolean boolean5 = numberFormat4.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj15 = numberFormat10.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition14);
        properFractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str24 = fractionFormat22.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat25 = fractionFormat22.getNumeratorFormat();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String str32 = locale26.getDisplayName(locale29);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        java.lang.String str38 = locale26.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance(locale26);
        fractionFormat22.setNumeratorFormat(numberFormat39);
        properFractionFormat19.setWholeFormat(numberFormat39);
        properFractionFormat6.setWholeFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.NumberFormat numberFormat44 = properFractionFormat43.getDenominatorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        boolean boolean48 = field2.equals((java.lang.Object) numberFormat47);
        java.lang.String str49 = field2.toString();
        java.text.FieldPosition fieldPosition51 = new java.text.FieldPosition(field2, (int) (short) -1);
        fieldPosition51.setBeginIndex(0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100 0 / 1" + "'", str24, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.NumberFormat$Field(exponent sign)" + "'", str49, "java.text.NumberFormat$Field(exponent sign)");
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getVariant();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale7.getDisplayLanguage(locale9);
        java.util.Locale.Builder builder11 = builder6.setLocale(locale7);
        java.lang.String str12 = locale1.getDisplayVariant(locale7);
        java.lang.String str13 = locale7.getScript();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale18 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str19 = locale18.getDisplayCountry();
        java.lang.String str20 = locale18.getISO3Country();
        java.lang.String str21 = locale18.toLanguageTag();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.String str26 = locale23.getDisplayName();
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.lang.String str29 = locale28.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinesisch" + "'", str10, "Chinesisch");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale18.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und-Taiwan" + "'", str21, "und-Taiwan");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str26, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        float float5 = fraction2.floatValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.01f) + "'", float5 == (-0.01f));
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number32 = numberFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.lang.Object obj33 = properFractionFormat3.parseObject("2,147,483,647 / 1", parsePosition31);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        boolean boolean39 = numberFormat37.isGroupingUsed();
        boolean boolean40 = numberFormat37.isGroupingUsed();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat37.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        numberFormat37.setParseIntegerOnly(false);
        properFractionFormat3.setDenominatorFormat(numberFormat37);
        numberFormat37.setMinimumFractionDigits((int) (short) -120);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale5 = new java.util.Locale("java.text.parseexception: zh_tw", "java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=0]", "anglais");
        java.lang.String str6 = locale0.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.Object obj13 = numberFormat11.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str22 = fractionFormat20.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat23 = fractionFormat20.getNumeratorFormat();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.lang.String str30 = locale24.getDisplayName(locale27);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        java.lang.String str36 = locale24.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getNumberInstance(locale24);
        fractionFormat20.setNumeratorFormat(numberFormat37);
        properFractionFormat17.setWholeFormat(numberFormat37);
        fractionFormat14.setNumeratorFormat(numberFormat37);
        fractionFormat8.setNumeratorFormat(numberFormat37);
        java.text.NumberFormat numberFormat42 = fractionFormat8.getNumeratorFormat();
        boolean boolean43 = locale0.equals((java.lang.Object) numberFormat42);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
        org.junit.Assert.assertEquals(locale5.toString(), "java.text.parseexception: zh_tw_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_anglais");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanese (Japan)" + "'", str6, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100 0 / 1" + "'", str22, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])" + "'", str30, "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "chinese" + "'", str36, "chinese");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.util.Locale locale2 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.lang.String str5 = fractionFormat3.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat6 = fractionFormat3.getNumeratorFormat();
        numberFormat6.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency9 = numberFormat6.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat11 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        int int17 = numberFormat13.getMaximumIntegerDigits();
        numberFormat13.setGroupingUsed(true);
        java.lang.String str21 = numberFormat13.format((long) 119);
        fractionFormat10.setNumeratorFormat(numberFormat13);
        java.lang.Object obj23 = numberFormat13.clone();
        boolean boolean24 = numberFormat13.isGroupingUsed();
        numberFormat13.setMinimumIntegerDigits((-50));
        boolean boolean27 = field0.equals((java.lang.Object) numberFormat13);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "100 0 / 1" + "'", str5, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "119" + "'", str21, "119");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Currency currency8 = numberFormat7.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.lang.Object obj10 = numberFormat7.clone();
        boolean boolean11 = numberFormat7.isParseIntegerOnly();
        java.lang.StringBuffer stringBuffer13 = null;
        java.text.NumberFormat.Field field14 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field14, (int) '#');
        java.text.Format.Field field17 = fieldPosition16.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction20.add(fraction27);
        boolean boolean30 = field17.equals((java.lang.Object) fraction20);
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition(field17);
        java.lang.Object obj32 = null;
        boolean boolean33 = field17.equals(obj32);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(field17);
        fieldPosition34.setBeginIndex((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer37 = numberFormat7.format((long) 84, stringBuffer13, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("TAIWAN");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale11 = new java.util.Locale("taiwan (ZH_TW,10,000%)", "java.text.AttributedCharacterIterator$Attribute(reading)", "Chinesisch");
        java.util.Locale locale13 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.lang.String str15 = locale7.getDisplayCountry(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Currency currency20 = numberFormat18.getCurrency();
        numberFormat18.setMinimumFractionDigits((int) '#');
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        java.lang.String str29 = numberFormat27.format((double) 10L);
        org.apache.commons.math.fraction.Fraction fraction32 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str33 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        long long34 = fraction32.longValue();
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        numberFormat45.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency48 = numberFormat45.getCurrency();
        numberFormat39.setCurrency(currency48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        boolean boolean51 = fraction32.equals((java.lang.Object) properFractionFormat50);
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        int int58 = numberFormat56.getMaximumFractionDigits();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance(locale59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60, numberFormat62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56, numberFormat60);
        java.util.Currency currency65 = numberFormat56.getCurrency();
        properFractionFormat50.setWholeFormat(numberFormat56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat27, numberFormat56);
        int int68 = numberFormat56.getMinimumIntegerDigits();
        fractionFormat16.setDenominatorFormat(numberFormat56);
        org.apache.commons.math.fraction.Fraction fraction71 = new org.apache.commons.math.fraction.Fraction((double) 1.0f);
        org.apache.commons.math.fraction.Fraction fraction73 = new org.apache.commons.math.fraction.Fraction(10.0d);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction71.subtract(fraction73);
        java.lang.StringBuffer stringBuffer75 = null;
        java.text.NumberFormat.Field field76 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition((java.text.Format.Field) field76);
        java.lang.String str78 = fieldPosition77.toString();
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.lang.String str81 = locale80.getDisplayScript();
        java.lang.String str82 = locale79.getDisplayName(locale80);
        boolean boolean83 = fieldPosition77.equals((java.lang.Object) locale80);
        java.text.NumberFormat.Field field84 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition85 = new java.text.FieldPosition((java.text.Format.Field) field84);
        java.text.FieldPosition fieldPosition87 = new java.text.FieldPosition((java.text.Format.Field) field84, (int) (byte) 10);
        boolean boolean88 = fieldPosition77.equals((java.lang.Object) field84);
        int int89 = fieldPosition77.getField();
        fieldPosition77.setEndIndex(0);
        java.text.Format.Field field92 = fieldPosition77.getFieldAttribute();
        java.text.FieldPosition fieldPosition93 = new java.text.FieldPosition(field92);
        java.text.FieldPosition fieldPosition95 = new java.text.FieldPosition(field92, (int) (byte) -120);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer96 = fractionFormat16.format(fraction74, stringBuffer75, fieldPosition95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "taiwan");
        org.junit.Assert.assertEquals(locale11.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals(locale13.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinesisch" + "'", str14, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1,000%" + "'", str29, "1,000%");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 / 100" + "'", str33, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(field76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str78, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Chinese (Taiwan)" + "'", str82, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(field84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(field92);
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        java.util.Locale locale2 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.util.Locale locale4 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale7 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str8 = locale4.getDisplayCountry(locale7);
        java.util.Locale.setDefault(locale7);
        java.lang.String str10 = locale2.getDisplayScript(locale7);
        java.lang.String str11 = locale7.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        org.apache.commons.math.fraction.Fraction fraction14 = fractionFormat12.parse("-14,400");
        org.junit.Assert.assertEquals(locale2.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertEquals(locale4.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale7.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "chinese" + "'", str11, "chinese");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fraction14);
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        int int17 = fraction16.getNumerator();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale15.getDisplayScript(locale18);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale15.getDisplayCountry(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        boolean boolean25 = numberFormat1.equals((java.lang.Object) locale15);
        java.lang.Number number27 = numberFormat1.parse("11,700%");
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        numberFormat32.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str36 = numberFormat32.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32);
        java.text.NumberFormat numberFormat38 = fractionFormat37.getNumeratorFormat();
        java.lang.String str40 = numberFormat38.format(1.0d);
        boolean boolean41 = numberFormat1.equals((java.lang.Object) 1.0d);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.util.Locale.setDefault(locale42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getIntegerInstance(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale46.toLanguageTag();
        java.util.Set<java.lang.String> strSet52 = locale46.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale46);
        java.text.NumberFormat numberFormat54 = fractionFormat53.getDenominatorFormat();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        boolean boolean62 = numberFormat60.isGroupingUsed();
        boolean boolean63 = numberFormat60.isGroupingUsed();
        fractionFormat56.setNumeratorFormat(numberFormat60);
        java.lang.Object obj65 = numberFormat60.clone();
        java.text.ParseException parseException68 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean69 = numberFormat60.equals((java.lang.Object) parseException68);
        java.util.Locale locale71 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale71);
        java.lang.String str74 = fractionFormat72.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat75 = fractionFormat72.getNumeratorFormat();
        numberFormat75.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency78 = numberFormat75.getCurrency();
        numberFormat60.setCurrency(currency78);
        numberFormat54.setCurrency(currency78);
        numberFormat45.setCurrency(currency78);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat45);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese" + "'", str16, "Chinese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Taiwan" + "'", str23, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 117L + "'", number27, 117L);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0%" + "'", str36, "0%");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100%" + "'", str40, "100%");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese" + "'", str43, "Chinese");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals(locale71.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100 0 / 1" + "'", str74, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(currency78);
        org.junit.Assert.assertEquals(currency78.toString(), "XXX");
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction13 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.divide(fraction17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        java.util.Currency currency22 = numberFormat20.getCurrency();
        int int23 = numberFormat20.getMinimumFractionDigits();
        int int24 = numberFormat20.getMinimumIntegerDigits();
        java.lang.Object obj25 = numberFormat20.clone();
        java.text.NumberFormat numberFormat26 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat26);
        boolean boolean28 = fraction17.equals((java.lang.Object) numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat20);
        java.lang.Object obj30 = numberFormat20.clone();
        int int31 = numberFormat20.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        long long26 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction27.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction27.negate();
        long long44 = fraction43.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.add(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction43.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.divide(fraction70);
        int int73 = fraction67.intValue();
        float float74 = fraction67.floatValue();
        int int75 = fraction67.intValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction67.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction46.divide(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction77.add(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction12.subtract(fraction77);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1 / 1" + "'", str28, "1 / 1");
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.016666668f + "'", float74 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction18 = new org.apache.commons.math.fraction.Fraction(20, (int) (short) -14400);
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        int int22 = fieldPosition21.getField();
        java.text.Format.Field field23 = fieldPosition21.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ZERO;
        boolean boolean25 = field23.equals((java.lang.Object) fraction24);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition(field23, (int) (short) 32);
        java.lang.String str28 = fieldPosition27.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer29 = properFractionFormat3.format(fraction18, stringBuffer19, fieldPosition27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=32,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=32,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) 'a');
        java.lang.String str72 = parsePosition71.toString();
        java.lang.String str73 = parsePosition71.toString();
        java.lang.Object obj74 = properFractionFormat9.parseObject("zh-tw", parsePosition71);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale75);
        properFractionFormat9.setNumeratorFormat(numberFormat76);
        java.text.NumberFormat numberFormat78 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat9.setNumeratorFormat(numberFormat79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (Taiwan)" + "'", str39, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str45, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str72, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str73, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat78);
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale locale9 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str10 = locale4.getDisplayScript(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        java.lang.String str12 = locale0.getDisplayCountry(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale0.getUnicodeLocaleType("-92 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: -92 / 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale9.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getIntegerInstance(locale34);
        numberFormat37.setMinimumIntegerDigits(0);
        numberFormat37.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str46 = numberFormat37.format((java.lang.Object) 100.0f);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = locale47.getISO3Country();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale47);
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        java.util.Currency currency61 = numberFormat59.getCurrency();
        numberFormat56.setCurrency(currency61);
        java.util.Currency currency63 = numberFormat56.getCurrency();
        int int64 = numberFormat56.getMaximumFractionDigits();
        java.lang.Object obj65 = numberFormat56.clone();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        numberFormat67.setMaximumFractionDigits(100);
        numberFormat67.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str74 = numberFormat67.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51, numberFormat56, numberFormat67);
        int int76 = numberFormat56.getMaximumIntegerDigits();
        boolean boolean77 = numberFormat56.isGroupingUsed();
        java.lang.Object obj78 = numberFormat56.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat37, numberFormat56);
        java.text.NumberFormat numberFormat80 = properFractionFormat79.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction82 = properFractionFormat79.parse("32");
        java.text.NumberFormat numberFormat83 = properFractionFormat79.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100%" + "'", str74, "100%");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(numberFormat83);
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        numberFormat4.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        numberFormat25.setMaximumIntegerDigits((int) (byte) 0);
        properFractionFormat19.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits(2147483647);
        int int32 = numberFormat29.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        int int35 = fieldPosition34.getBeginIndex();
        boolean boolean36 = numberFormat29.equals((java.lang.Object) int35);
        properFractionFormat19.setWholeFormat(numberFormat29);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getCurrencyInstance(locale45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat47.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition50);
        int int52 = parsePosition50.getIndex();
        java.lang.Object obj53 = numberFormat40.parseObject("0%", parsePosition50);
        int int54 = parsePosition50.getErrorIndex();
        java.lang.Object obj55 = properFractionFormat19.parseObject("", parsePosition50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = properFractionFormat19.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=2147483647,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction11 = null;
        java.lang.StringBuffer stringBuffer12 = null;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(119);
        int int15 = fieldPosition14.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer16 = properFractionFormat10.format(fraction11, stringBuffer12, fieldPosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 119 + "'", int15 == 119);
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.String str16 = locale12.getVariant();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        java.util.Locale locale23 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str24 = locale17.getDisplayName(locale23);
        java.lang.String str25 = locale12.getDisplayName(locale23);
        java.lang.String str26 = locale23.getDisplayLanguage();
        java.lang.String str27 = locale23.getDisplayName();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str19, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals(locale23.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (China)" + "'", str25, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "overflow trying to convert {0} to fraction ({1}/{2})" + "'", str26, "overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "overflow trying to convert {0} to fraction ({1}/{2}) (ANGLAIS)" + "'", str27, "overflow trying to convert {0} to fraction ({1}/{2}) (ANGLAIS)");
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale36 = locale12.stripExtensions();
        java.lang.String str37 = locale9.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale39.getDisplayLanguage(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.util.Locale.setDefault(category0, locale41);
        java.text.NumberFormat.Field field47 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition((java.text.Format.Field) field47);
        java.lang.String str49 = fieldPosition48.toString();
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayName(locale51);
        boolean boolean54 = fieldPosition48.equals((java.lang.Object) locale51);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale51);
        java.lang.String str56 = locale41.getDisplayCountry(locale51);
        java.lang.String str57 = locale41.getDisplayVariant();
        java.lang.String str58 = locale41.getDisplayScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        java.lang.String str62 = locale59.getISO3Country();
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = locale59.getDisplayName(locale63);
        java.lang.String str65 = locale41.getDisplayName(locale63);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinesisch" + "'", str42, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str49, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese (Taiwan)" + "'", str53, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Germany" + "'", str56, "Germany");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "cor\351en" + "'", str64, "cor\351en");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "allemand (Allemagne)" + "'", str65, "allemand (Allemagne)");
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        numberFormat18.setParseIntegerOnly(true);
        java.lang.String str57 = numberFormat18.format((double) 14400);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 10, 120);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-100), 2147483647);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction61.divide(fraction64);
        java.lang.StringBuffer stringBuffer66 = null;
        java.text.NumberFormat.Field field67 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition((java.text.Format.Field) field67);
        java.lang.String str69 = fieldPosition68.toString();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = locale71.getDisplayScript();
        java.lang.String str73 = locale70.getDisplayName(locale71);
        boolean boolean74 = fieldPosition68.equals((java.lang.Object) locale71);
        fieldPosition68.setEndIndex((int) '#');
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getCurrencyInstance(locale77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        java.text.ParsePosition parsePosition82 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction83 = properFractionFormat79.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition82);
        boolean boolean84 = fieldPosition68.equals((java.lang.Object) parsePosition82);
        int int85 = fieldPosition68.getEndIndex();
        int int86 = fieldPosition68.getEndIndex();
        fieldPosition68.setEndIndex((-1));
        java.lang.String str89 = fieldPosition68.toString();
        java.lang.String str90 = fieldPosition68.toString();
        int int91 = fieldPosition68.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer92 = fractionFormat58.format(fraction65, stringBuffer66, fieldPosition68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "14,400" + "'", str57, "14,400");
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(field67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str69, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Chinese (Taiwan)" + "'", str73, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNull(fraction83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str89, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str90, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Currency currency11 = numberFormat9.getCurrency();
        fractionFormat7.setNumeratorFormat(numberFormat9);
        java.text.NumberFormat numberFormat13 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str18 = fractionFormat16.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat19 = fractionFormat16.getNumeratorFormat();
        numberFormat19.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency22 = numberFormat19.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.lang.Number number25 = numberFormat19.parse("9,700%");
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction28);
        float float30 = fraction28.floatValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction28.negate();
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        int int37 = numberFormat36.getMaximumIntegerDigits();
        int int38 = numberFormat36.getMaximumFractionDigits();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40, numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat40);
        boolean boolean45 = fraction31.equals((java.lang.Object) fractionFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat44.getNumeratorFormat();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat51);
        numberFormat51.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field56);
        java.lang.String str58 = fieldPosition57.toString();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = locale59.getDisplayName(locale60);
        boolean boolean63 = fieldPosition57.equals((java.lang.Object) locale60);
        fieldPosition57.setEndIndex((int) '#');
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getCurrencyInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat68.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition71);
        boolean boolean73 = fieldPosition57.equals((java.lang.Object) parsePosition71);
        java.lang.Number number74 = numberFormat51.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition71);
        int int75 = parsePosition71.getIndex();
        java.lang.String str76 = parsePosition71.toString();
        java.lang.Object obj77 = null;
        boolean boolean78 = parsePosition71.equals(obj77);
        java.lang.Object obj79 = numberFormat46.parseObject("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition71);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale80);
        boolean boolean82 = numberFormat81.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        numberFormat81.setMaximumFractionDigits((int) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat19, numberFormat46);
        int int88 = numberFormat19.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale90 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getPercentInstance(locale90);
        numberFormat91.setMinimumIntegerDigits(0);
        properFractionFormat89.setNumeratorFormat(numberFormat91);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100 0 / 1" + "'", str18, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 9700L + "'", number25, 9700L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1 / 1" + "'", str29, "1 / 1");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str58, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (Taiwan)" + "'", str62, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(number74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str76, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat91);
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) parsePosition15);
        int int18 = fieldPosition1.getEndIndex();
        java.text.Format.Field field19 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition(field19, (int) (byte) 119);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(field19);
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale27);
        java.util.Currency currency30 = numberFormat29.getCurrency();
        numberFormat29.setMinimumIntegerDigits(1);
        numberFormat29.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj38 = numberFormat29.parseObject("Japan", parsePosition37);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException42 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str43 = fractionConversionException42.getPattern();
        java.lang.Throwable[] throwableArray44 = fractionConversionException42.getSuppressed();
        java.lang.Object[] objArray45 = fractionConversionException42.getArguments();
        boolean boolean46 = parsePosition37.equals((java.lang.Object) objArray45);
        int int47 = parsePosition37.getIndex();
        java.lang.String str48 = parsePosition37.toString();
        org.apache.commons.math.fraction.Fraction fraction49 = fractionFormat1.parse("0%", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((double) 120);
        long long52 = fraction51.longValue();
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.NumberFormat.Field field54 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str55 = field54.toString();
        java.lang.String str56 = field54.toString();
        java.util.Locale locale58 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.lang.String str61 = fractionFormat59.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat62 = fractionFormat59.getNumeratorFormat();
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.lang.String str68 = locale66.getDisplayCountry();
        java.lang.String str69 = locale63.getDisplayName(locale66);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = locale70.getDisplayScript();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale72.getISO3Language();
        java.lang.String str74 = locale70.getDisplayScript(locale72);
        java.lang.String str75 = locale63.getDisplayLanguage(locale72);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale63);
        fractionFormat59.setNumeratorFormat(numberFormat76);
        numberFormat76.setMinimumIntegerDigits(2);
        boolean boolean80 = field54.equals((java.lang.Object) numberFormat76);
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition((java.text.Format.Field) field54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer82 = fractionFormat1.format(fraction51, stringBuffer53, fieldPosition81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "TWD");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str43, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str48, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 120L + "'", long52 == 120L);
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str55, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str56, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100 0 / 1" + "'", str61, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale64);
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "kor" + "'", str73, "kor");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale0.getDisplayVariant(locale7);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        numberFormat15.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        java.lang.String str22 = fieldPosition21.toString();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = locale23.getDisplayName(locale24);
        boolean boolean27 = fieldPosition21.equals((java.lang.Object) locale24);
        fieldPosition21.setEndIndex((int) '#');
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getCurrencyInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat32.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition35);
        boolean boolean37 = fieldPosition21.equals((java.lang.Object) parsePosition35);
        java.lang.Number number38 = numberFormat15.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition35);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.abs();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        boolean boolean48 = numberFormat46.equals((java.lang.Object) locale47);
        boolean boolean49 = fraction44.equals((java.lang.Object) locale47);
        boolean boolean50 = parsePosition35.equals((java.lang.Object) locale47);
        java.lang.String str51 = locale0.getDisplayScript(locale47);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str22, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Chinese (Taiwan)" + "'", str26, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(number38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str19 = numberFormat15.format(0.008333333333333333d);
        boolean boolean20 = numberFormat15.isParseIntegerOnly();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat15.parseObject("\u65e5\u6587", parsePosition23);
        int int25 = parsePosition23.getErrorIndex();
        java.lang.Object obj26 = properFractionFormat0.parseObject("\uc601\uc5b4\ubbf8\uad6d)", parsePosition23);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        properFractionFormat0.setWholeFormat(numberFormat28);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        long long53 = fraction51.longValue();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction47.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction34.multiply(fraction54);
        int int56 = fraction54.getNumerator();
        int int57 = fraction54.getDenominator();
        java.lang.StringBuffer stringBuffer58 = null;
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field59);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        boolean boolean63 = field59.equals((java.lang.Object) locale61);
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field59, (int) '#');
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field59);
        int int67 = fieldPosition66.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer68 = properFractionFormat0.format(fraction54, stringBuffer58, fieldPosition66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1%" + "'", str19, "1%");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 14400 + "'", int57 == 14400);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = fractionFormat5.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat8 = fractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale9);
        fractionFormat5.setNumeratorFormat(numberFormat22);
        properFractionFormat2.setWholeFormat(numberFormat22);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        boolean boolean28 = numberFormat27.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction33 = properFractionFormat29.parse("0%", parsePosition32);
        java.lang.Object obj34 = properFractionFormat2.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition32);
        java.text.NumberFormat numberFormat35 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getNumeratorFormat();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getIntegerInstance(locale42);
        numberFormat45.setMinimumIntegerDigits(0);
        java.lang.String str49 = numberFormat45.format(1.0d);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale53 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale53);
        java.lang.String str55 = locale53.getDisplayCountry();
        java.lang.String str56 = locale50.getDisplayName(locale53);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = locale57.getDisplayScript(locale59);
        java.lang.String str62 = locale50.getDisplayLanguage(locale59);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getNumberInstance(locale50);
        java.util.Currency currency64 = numberFormat63.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.negate();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.abs();
        long long75 = fraction73.longValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction69.multiply(fraction73);
        boolean boolean77 = numberFormat63.equals((java.lang.Object) fraction69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat45, numberFormat63);
        properFractionFormat38.setWholeFormat(numberFormat45);
        properFractionFormat2.setNumeratorFormat(numberFormat45);
        int int81 = numberFormat45.getMaximumFractionDigits();
        java.lang.StringBuffer stringBuffer83 = null;
        java.text.NumberFormat.Field field84 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition85 = new java.text.FieldPosition((java.text.Format.Field) field84);
        int int86 = fieldPosition85.getEndIndex();
        int int87 = fieldPosition85.getField();
        java.lang.String str88 = fieldPosition85.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer89 = numberFormat45.format(600L, stringBuffer83, fieldPosition85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100 0 / 1" + "'", str7, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(fraction33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(field84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str88, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayCountry();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.lang.String str8 = locale0.getDisplayLanguage(locale4);
        java.util.Set<java.lang.String> strSet9 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.lang.String str11 = locale4.getScript();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        java.lang.Object obj14 = properFractionFormat12.clone();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        numberFormat16.setMaximumFractionDigits(100);
        numberFormat16.setMaximumFractionDigits((int) (byte) 100);
        numberFormat16.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        int int25 = numberFormat16.getMaximumIntegerDigits();
        properFractionFormat12.setWholeFormat(numberFormat16);
        boolean boolean27 = locale4.equals((java.lang.Object) properFractionFormat12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("\u4e2d\u6587");
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale10.getDisplayLanguage();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.util.Set<java.lang.String> strSet19 = locale13.getUnicodeLocaleKeys();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        boolean boolean23 = locale20.hasExtensions();
        java.lang.String str24 = locale13.getDisplayVariant(locale20);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        numberFormat28.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        java.lang.String str35 = fieldPosition34.toString();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = locale36.getDisplayName(locale37);
        boolean boolean40 = fieldPosition34.equals((java.lang.Object) locale37);
        fieldPosition34.setEndIndex((int) '#');
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction49 = properFractionFormat45.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition48);
        boolean boolean50 = fieldPosition34.equals((java.lang.Object) parsePosition48);
        java.lang.Number number51 = numberFormat28.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction55.abs();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getInstance(locale58);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        boolean boolean61 = numberFormat59.equals((java.lang.Object) locale60);
        boolean boolean62 = fraction57.equals((java.lang.Object) locale60);
        boolean boolean63 = parsePosition48.equals((java.lang.Object) locale60);
        java.lang.String str64 = locale13.getDisplayScript(locale60);
        java.lang.String str65 = locale10.getDisplayName(locale60);
        java.lang.String str66 = locale9.getDisplayVariant(locale60);
        java.lang.String str67 = locale3.getDisplayVariant(locale9);
        boolean boolean68 = locale9.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese" + "'", str12, "Chinese");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str35, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (Taiwan)" + "'", str39, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(number51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (Taiwan)" + "'", str65, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getDenominatorFormat();
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale9);
        java.util.Currency currency12 = numberFormat11.getCurrency();
        numberFormat11.setMinimumIntegerDigits(1);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj20 = numberFormat11.parseObject("Japan", parsePosition19);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException24 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str25 = fractionConversionException24.getPattern();
        java.lang.Throwable[] throwableArray26 = fractionConversionException24.getSuppressed();
        java.lang.Object[] objArray27 = fractionConversionException24.getArguments();
        boolean boolean28 = parsePosition19.equals((java.lang.Object) objArray27);
        int int29 = parsePosition19.getIndex();
        int int30 = parsePosition19.getIndex();
        java.lang.Object obj31 = fractionFormat7.parseObject("\ud55c\uad6d\uc5b4", parsePosition19);
        parsePosition19.setErrorIndex(14400);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat2.parse("\u65e5\u6587", parsePosition19);
        java.lang.String str35 = parsePosition19.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "TWD");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str25, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str35, "java.text.ParsePosition[index=1,errorIndex=1]");
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getNumeratorFormat();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale45.toLanguageTag();
        java.lang.String str48 = locale45.getExtension('x');
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale45);
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field51);
        java.lang.String str53 = fieldPosition52.toString();
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale54.getDisplayName(locale55);
        boolean boolean58 = fieldPosition52.equals((java.lang.Object) locale55);
        fieldPosition52.setEndIndex((int) '#');
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getCurrencyInstance(locale61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat63.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition66);
        boolean boolean68 = fieldPosition52.equals((java.lang.Object) parsePosition66);
        java.lang.String str69 = parsePosition66.toString();
        parsePosition66.setErrorIndex((int) (short) 10);
        java.lang.Object obj72 = numberFormat49.parseObject("java.text.ParseException: zh_TW", parsePosition66);
        java.util.Locale locale76 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getCurrencyInstance(locale76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) '#');
        parsePosition80.setErrorIndex(600);
        java.lang.String str83 = parsePosition80.toString();
        int int84 = parsePosition80.getErrorIndex();
        java.lang.Object obj85 = numberFormat77.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition80);
        java.lang.Object obj86 = numberFormat49.parseObject("java.text.parseexception: zh_tw", parsePosition80);
        java.lang.String str87 = parsePosition80.toString();
        java.lang.Object obj88 = properFractionFormat40.parseObject("-1 / 100", parsePosition80);
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getInstance(locale89);
        java.util.Locale locale91 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat92 = java.text.NumberFormat.getPercentInstance(locale91);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = new org.apache.commons.math.fraction.FractionFormat(numberFormat90, numberFormat92);
        java.lang.Object obj94 = fractionFormat93.clone();
        java.lang.StringBuffer stringBuffer95 = null;
        java.text.FieldPosition fieldPosition97 = new java.text.FieldPosition(10000);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer98 = properFractionFormat40.format((java.lang.Object) fractionFormat93, stringBuffer95, fieldPosition97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-TW" + "'", str46, "zh-TW");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str53, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese (Taiwan)" + "'", str57, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str69, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertEquals(locale76.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str83, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 600 + "'", int84 == 600);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=35]" + "'", str87, "java.text.ParsePosition[index=35,errorIndex=35]");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        int int9 = numberFormat8.getMaximumIntegerDigits();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        java.util.Currency currency13 = numberFormat11.getCurrency();
        numberFormat8.setCurrency(currency13);
        java.util.Currency currency15 = numberFormat8.getCurrency();
        fractionFormat3.setDenominatorFormat(numberFormat8);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        properFractionFormat20.setWholeFormat(numberFormat22);
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getWholeFormat();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number29 = numberFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        parsePosition28.setErrorIndex(0);
        parsePosition28.setIndex(1);
        parsePosition28.setErrorIndex(32);
        java.lang.Number number36 = numberFormat8.parse("Korean", parsePosition28);
        int int37 = numberFormat8.getMinimumFractionDigits();
        java.lang.String str39 = numberFormat8.format((long) (short) -1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(number29);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-100%" + "'", str39, "-100%");
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        int int14 = numberFormat12.getMaximumFractionDigits();
        boolean boolean15 = numberFormat5.equals((java.lang.Object) int14);
        int int16 = numberFormat5.getMinimumIntegerDigits();
        numberFormat5.setMinimumFractionDigits(600);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        boolean boolean28 = numberFormat26.isGroupingUsed();
        java.lang.String str30 = numberFormat26.format((double) 100);
        java.lang.String str32 = numberFormat26.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat26);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition(10);
        int int37 = fieldPosition36.getEndIndex();
        fieldPosition36.setBeginIndex((int) '#');
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale40.getScript();
        java.util.Locale locale45 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str46 = locale40.getDisplayScript(locale45);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale45);
        int int48 = numberFormat47.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        boolean boolean51 = fieldPosition36.equals((java.lang.Object) numberFormat47);
        numberFormat47.setMinimumIntegerDigits((int) (byte) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat47);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        numberFormat56.setMaximumFractionDigits(100);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getCurrencyInstance(locale61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat63.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition66);
        int int68 = parsePosition66.getIndex();
        java.lang.Object obj69 = numberFormat56.parseObject("0%", parsePosition66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat56);
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field71);
        java.lang.String str73 = field71.toString();
        java.text.FieldPosition fieldPosition75 = new java.text.FieldPosition((java.text.Format.Field) field71, (int) (byte) 87);
        java.lang.StringBuffer stringBuffer76 = null;
        java.text.NumberFormat.Field field77 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field77);
        int int79 = fieldPosition78.getEndIndex();
        fieldPosition78.setBeginIndex((int) (byte) 100);
        java.util.Locale locale83 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale83);
        java.lang.String str86 = fractionFormat84.format((java.lang.Object) 100);
        boolean boolean87 = fieldPosition78.equals((java.lang.Object) fractionFormat84);
        fieldPosition78.setBeginIndex(34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer90 = fractionFormat70.format((java.lang.Object) field71, stringBuffer76, fieldPosition78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10,000%" + "'", str30, "10,000%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1,000%" + "'", str32, "1,000%");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale45.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str73, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals(locale83.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "100 0 / 1" + "'", str86, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        int int9 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale10);
        java.util.Currency currency13 = numberFormat12.getCurrency();
        numberFormat12.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat16 = null;
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        numberFormat21.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean24 = numberFormat21.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat12, numberFormat16);
        int int27 = numberFormat12.getMinimumFractionDigits();
        java.lang.Object obj28 = numberFormat12.clone();
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        int int31 = fieldPosition30.getEndIndex();
        java.lang.String str32 = fieldPosition30.toString();
        int int33 = fieldPosition30.getBeginIndex();
        fieldPosition30.setBeginIndex(2147483647);
        java.text.Format.Field field36 = fieldPosition30.getFieldAttribute();
        java.lang.String str37 = fieldPosition30.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator38 = numberFormat12.formatToCharacterIterator((java.lang.Object) fieldPosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "TWD");
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str32, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(field36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=2147483647,endIndex=0]" + "'", str37, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=2147483647,endIndex=0]");
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=35,errorIndex=35]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat2);
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        boolean boolean8 = numberFormat6.equals((java.lang.Object) locale7);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str23 = locale7.getDisplayVariant(locale19);
        java.lang.String str24 = locale7.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese" + "'", str13, "Chinese");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        numberFormat2.setMaximumFractionDigits(100);
        java.lang.String str7 = numberFormat2.format((long) 100);
        properFractionFormat0.setWholeFormat(numberFormat2);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale9);
        java.util.Currency currency12 = numberFormat11.getCurrency();
        numberFormat11.setMinimumIntegerDigits(1);
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        java.util.Currency currency24 = numberFormat22.getCurrency();
        numberFormat19.setCurrency(currency24);
        java.util.Currency currency26 = numberFormat19.getCurrency();
        numberFormat11.setCurrency(currency26);
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        fractionFormat32.setDenominatorFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat37);
        numberFormat11.setGroupingUsed(true);
        properFractionFormat0.setDenominatorFormat(numberFormat11);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "TWD");
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction2.reciprocal();
        int int24 = fraction2.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction35.add(fraction42);
        java.lang.String str45 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction35);
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str48 = locale46.getISO3Language();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale46);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction52.add(fraction59);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        long long72 = fraction70.longValue();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction66.multiply(fraction70);
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction81 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.negate();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.abs();
        long long84 = fraction82.longValue();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction78.multiply(fraction82);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction70.subtract(fraction85);
        org.apache.commons.math.fraction.Fraction fraction87 = fraction85.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction88 = fraction87.abs();
        org.apache.commons.math.fraction.Fraction fraction89 = fraction61.add(fraction87);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction87.abs();
        java.lang.String str91 = numberFormat49.format((java.lang.Object) fraction90);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction35.subtract(fraction90);
        int int93 = fraction90.intValue();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction2.add(fraction90);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1 / 60" + "'", str45, "1 / 60");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zho" + "'", str48, "zho");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "14,400" + "'", str91, "14,400");
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 14400 + "'", int93 == 14400);
        org.junit.Assert.assertNotNull(fraction94);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction23.add(fraction26);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str39 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction43.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction38.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.ONE;
        long long55 = fraction54.longValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction38.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction37.subtract(fraction56);
        java.lang.String str58 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction56);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        long long69 = fraction67.longValue();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction63.multiply(fraction67);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction63.abs();
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.negate();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.negate();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.abs();
        long long82 = fraction80.longValue();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction76.multiply(fraction80);
        org.apache.commons.math.fraction.Fraction fraction84 = fraction63.multiply(fraction83);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction56.add(fraction84);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction34.subtract(fraction85);
        org.apache.commons.math.fraction.Fraction fraction87 = fraction34.negate();
        short short88 = fraction87.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1 / 1" + "'", str39, "1 / 1");
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1 / 1" + "'", str58, "1 / 1");
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertTrue("'" + short88 + "' != '" + (short) 0 + "'", short88 == (short) 0);
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        java.util.Locale locale3 = new java.util.Locale("en", "11,700%", "zho");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.lang.String str13 = locale8.toLanguageTag();
        java.util.Set<java.lang.String> strSet14 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        boolean boolean18 = locale15.hasExtensions();
        java.lang.String str19 = locale8.getDisplayVariant(locale15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        numberFormat23.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        java.lang.String str30 = fieldPosition29.toString();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayName(locale32);
        boolean boolean35 = fieldPosition29.equals((java.lang.Object) locale32);
        fieldPosition29.setEndIndex((int) '#');
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat40.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition43);
        boolean boolean45 = fieldPosition29.equals((java.lang.Object) parsePosition43);
        java.lang.Number number46 = numberFormat23.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getInstance(locale53);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        boolean boolean56 = numberFormat54.equals((java.lang.Object) locale55);
        boolean boolean57 = fraction52.equals((java.lang.Object) locale55);
        boolean boolean58 = parsePosition43.equals((java.lang.Object) locale55);
        java.lang.String str59 = locale8.getDisplayScript(locale55);
        java.lang.String str60 = locale5.getDisplayName(locale55);
        java.lang.String str61 = locale3.getDisplayName(locale5);
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.PRC;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = locale3.getDisplayScript(locale63);
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getNumberInstance(locale63);
        org.junit.Assert.assertEquals(locale3.toString(), "en_11,700%_zho");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zho" + "'", str4, "zho");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Taiwan" + "'", str6, "Taiwan");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese" + "'", str7, "Chinese");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (Taiwan)" + "'", str34, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese (Taiwan)" + "'", str60, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u82f1\u6587 (11,700%,zho)" + "'", str61, "\u82f1\u6587 (11,700%,zho)");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str64, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(numberFormat66);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale11.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str21 = locale11.getScript();
        java.util.Locale.Builder builder22 = builder10.setLocale(locale11);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction26.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction35.divide(fraction38);
        int int41 = fraction35.intValue();
        float float42 = fraction35.floatValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((-1.0d));
        int int47 = fraction46.getNumerator();
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale48.getISO3Language();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction57.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction54.add(fraction61);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        long long74 = fraction72.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction68.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.abs();
        long long86 = fraction84.longValue();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction80.multiply(fraction84);
        org.apache.commons.math.fraction.Fraction fraction88 = fraction72.subtract(fraction87);
        org.apache.commons.math.fraction.Fraction fraction89 = fraction87.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction89.abs();
        org.apache.commons.math.fraction.Fraction fraction91 = fraction63.add(fraction89);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction89.abs();
        java.lang.String str93 = numberFormat51.format((java.lang.Object) fraction92);
        org.apache.commons.math.fraction.Fraction fraction94 = fraction46.subtract(fraction92);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction92.negate();
        org.apache.commons.math.fraction.Fraction fraction96 = fraction95.abs();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction44.divide(fraction95);
        boolean boolean98 = locale11.equals((java.lang.Object) fraction44);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais" + "'", str19, "anglais");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.016666668f + "'", float42 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zho" + "'", str50, "zho");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "14,400" + "'", str93, "14,400");
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        numberFormat4.setMinimumIntegerDigits(0);
        numberFormat4.setMinimumFractionDigits(1728000);
        java.lang.StringBuffer stringBuffer12 = null;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((int) ' ');
        int int15 = fieldPosition14.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer16 = numberFormat4.format(14400.0d, stringBuffer12, fieldPosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.lang.String str19 = numberFormat17.format((double) 10L);
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat1.setCurrency(currency20);
        java.lang.String str23 = numberFormat1.format((double) 2L);
        java.util.Locale locale27 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = numberFormat1.format((java.lang.Object) locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1,000%" + "'", str19, "1,000%");
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertEquals(locale27.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(fractionFormat28);
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency32 = numberFormat31.getCurrency();
        java.lang.String str34 = numberFormat31.format(1.0d);
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale36);
        java.util.Currency currency39 = numberFormat38.getCurrency();
        numberFormat38.setMinimumIntegerDigits(1);
        numberFormat38.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj47 = numberFormat38.parseObject("Japan", parsePosition46);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException51 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str52 = fractionConversionException51.getPattern();
        java.lang.Throwable[] throwableArray53 = fractionConversionException51.getSuppressed();
        java.lang.Object[] objArray54 = fractionConversionException51.getArguments();
        boolean boolean55 = parsePosition46.equals((java.lang.Object) objArray54);
        int int56 = parsePosition46.getIndex();
        java.lang.String str57 = parsePosition46.toString();
        java.lang.Object obj58 = numberFormat31.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition46);
        java.math.RoundingMode roundingMode59 = numberFormat31.getRoundingMode();
        java.lang.StringBuffer stringBuffer60 = null;
        java.text.NumberFormat.Field field61 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field61);
        int int63 = fieldPosition62.getBeginIndex();
        int int64 = fieldPosition62.getField();
        fieldPosition62.setEndIndex(117);
        fieldPosition62.setEndIndex((int) (byte) 88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer69 = fractionFormat4.format((java.lang.Object) roundingMode59, stringBuffer60, fieldPosition62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
// flaky:         org.junit.Assert.assertEquals(currency32.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100%" + "'", str34, "100%");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "TWD");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str52, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str57, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode59.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance(locale34);
        int int39 = numberFormat38.getMaximumIntegerDigits();
        properFractionFormat32.setWholeFormat(numberFormat38);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat32.parse("87");
        double double43 = fraction42.doubleValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japan" + "'", str36, "Japan");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 87.0d + "'", double43 == 87.0d);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        boolean boolean12 = numberFormat10.isGroupingUsed();
        boolean boolean13 = numberFormat10.isGroupingUsed();
        fractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.Object obj43 = fractionFormat22.parseObject("java.text.NumberFormat$Field(currency)", parsePosition39);
        java.lang.Object obj44 = numberFormat10.parseObject("Italian", parsePosition39);
        java.lang.Object obj45 = numberFormat1.parseObject("600", parsePosition39);
        java.util.Locale locale47 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        int int61 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat48, numberFormat51);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str65 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction64);
        int int66 = fraction64.getNumerator();
        long long67 = fraction64.longValue();
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = properFractionFormat63.formatToCharacterIterator((java.lang.Object) long67);
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat63.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = properFractionFormat63.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals(locale47.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1 / 1" + "'", str65, "1 / 1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        int int12 = numberFormat7.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        boolean boolean20 = numberFormat18.isGroupingUsed();
        boolean boolean21 = numberFormat18.isGroupingUsed();
        fractionFormat14.setNumeratorFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        java.lang.String str31 = numberFormat26.format((long) 100);
        int int32 = numberFormat26.getMaximumFractionDigits();
        numberFormat26.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat36, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat18, numberFormat26);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale48.getDisplayCountry();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale51.getISO3Language();
        java.lang.String str54 = locale48.getDisplayScript(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getIntegerInstance(locale48);
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        int int62 = numberFormat61.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode63 = numberFormat61.getRoundingMode();
        java.util.Locale locale65 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale65);
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale68);
        java.util.Currency currency71 = numberFormat70.getCurrency();
        numberFormat70.setMinimumIntegerDigits(1);
        numberFormat70.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition78 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj79 = numberFormat70.parseObject("Japan", parsePosition78);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException83 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str84 = fractionConversionException83.getPattern();
        java.lang.Throwable[] throwableArray85 = fractionConversionException83.getSuppressed();
        java.lang.Object[] objArray86 = fractionConversionException83.getArguments();
        boolean boolean87 = parsePosition78.equals((java.lang.Object) objArray86);
        int int88 = parsePosition78.getIndex();
        int int89 = parsePosition78.getIndex();
        java.lang.Object obj90 = fractionFormat66.parseObject("\ud55c\uad6d\uc5b4", parsePosition78);
        java.lang.Number number91 = numberFormat61.parse("1 / 100", parsePosition78);
        int int92 = numberFormat61.getMinimumFractionDigits();
        numberFormat61.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat95 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat56, numberFormat61);
        numberFormat56.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat98 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56);
        boolean boolean99 = numberFormat56.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10,000%" + "'", str31, "10,000%");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zho" + "'", str53, "zho");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "TWD");
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str84, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(number91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        numberFormat4.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        numberFormat25.setMaximumIntegerDigits((int) (byte) 0);
        properFractionFormat19.setDenominatorFormat(numberFormat25);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction35.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        long long55 = fraction53.longValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction49.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        long long67 = fraction65.longValue();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction61.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction53.subtract(fraction68);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction68.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction44.add(fraction70);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction70.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction32.add(fraction70);
        double double76 = fraction70.doubleValue();
        java.lang.StringBuffer stringBuffer77 = null;
        java.text.NumberFormat.Field field78 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field78);
        java.lang.String str80 = fieldPosition79.toString();
        java.util.Locale locale81 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.lang.String str83 = locale82.getDisplayScript();
        java.lang.String str84 = locale81.getDisplayName(locale82);
        boolean boolean85 = fieldPosition79.equals((java.lang.Object) locale82);
        fieldPosition79.setBeginIndex(119);
        org.apache.commons.math.fraction.Fraction fraction90 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        int int91 = fraction90.getNumerator();
        boolean boolean92 = fieldPosition79.equals((java.lang.Object) int91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer93 = properFractionFormat19.format(fraction70, stringBuffer77, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 14400.0d + "'", double76 == 14400.0d);
        org.junit.Assert.assertNotNull(field78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str80, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Chinese (Taiwan)" + "'", str84, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.lang.String str19 = numberFormat17.format((double) 10L);
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat1.setCurrency(currency20);
        numberFormat1.setMinimumFractionDigits((int) (byte) 97);
        numberFormat1.setParseIntegerOnly(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number27 = numberFormat1.parse("-144 / 1");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"-144 / 1\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1,000%" + "'", str19, "1,000%");
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = locale0.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) 'a');
        java.lang.String str72 = parsePosition71.toString();
        java.lang.String str73 = parsePosition71.toString();
        java.lang.Object obj74 = properFractionFormat9.parseObject("zh-tw", parsePosition71);
        java.text.NumberFormat numberFormat75 = properFractionFormat9.getWholeFormat();
        java.lang.Object obj76 = numberFormat75.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.util.Locale locale79 = locale78.stripExtensions();
        java.util.Locale locale80 = locale79.stripExtensions();
        java.lang.String str81 = locale80.getDisplayLanguage();
        java.lang.String str82 = locale80.getDisplayCountry();
        java.lang.String str83 = locale80.getLanguage();
        java.lang.StringBuffer stringBuffer84 = null;
        java.text.FieldPosition fieldPosition86 = new java.text.FieldPosition(96);
        fieldPosition86.setBeginIndex(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer89 = numberFormat75.format((java.lang.Object) locale80, stringBuffer84, fieldPosition86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str72, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str73, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale4.getDisplayScript();
        java.lang.String str9 = locale3.getDisplayScript(locale4);
        java.util.Locale locale13 = new java.util.Locale("en", "11,700%", "zho");
        java.lang.String str14 = locale13.getDisplayVariant();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale18.toLanguageTag();
        java.util.Set<java.lang.String> strSet24 = locale18.getUnicodeLocaleKeys();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        boolean boolean28 = locale25.hasExtensions();
        java.lang.String str29 = locale18.getDisplayVariant(locale25);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31, numberFormat33);
        numberFormat33.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field38);
        java.lang.String str40 = fieldPosition39.toString();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = locale41.getDisplayName(locale42);
        boolean boolean45 = fieldPosition39.equals((java.lang.Object) locale42);
        fieldPosition39.setEndIndex((int) '#');
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getCurrencyInstance(locale48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat50.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition53);
        boolean boolean55 = fieldPosition39.equals((java.lang.Object) parsePosition53);
        java.lang.Number number56 = numberFormat33.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition53);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.abs();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance(locale63);
        java.util.Locale locale65 = java.util.Locale.getDefault();
        boolean boolean66 = numberFormat64.equals((java.lang.Object) locale65);
        boolean boolean67 = fraction62.equals((java.lang.Object) locale65);
        boolean boolean68 = parsePosition53.equals((java.lang.Object) locale65);
        java.lang.String str69 = locale18.getDisplayScript(locale65);
        java.lang.String str70 = locale15.getDisplayName(locale65);
        java.lang.String str71 = locale13.getDisplayName(locale15);
        java.lang.String str72 = locale3.getDisplayName(locale13);
        boolean boolean73 = locale13.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale13.toString(), "en_11,700%_zho");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ub9cc" + "'", str16, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str17, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str40, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (Taiwan)" + "'", str44, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(number56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (Taiwan)" + "'", str70, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u82f1\u6587 (11,700%,zho)" + "'", str71, "\u82f1\u6587 (11,700%,zho)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Korean" + "'", str72, "Korean");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode6 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setGroupingUsed(false);
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean14 = field12.equals((java.lang.Object) field13);
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field12);
        java.text.Format.Field field16 = fieldPosition15.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer17 = numberFormat4.format((long) 40, stringBuffer11, fieldPosition15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(field16);
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault(category3);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale.setDefault(category3, locale10);
        java.util.Locale locale14 = java.util.Locale.getDefault(category3);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale15.getDisplayCountry();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale15.getDisplayScript(locale18);
        java.util.Locale.setDefault(category3, locale15);
        java.util.Locale locale23 = java.util.Locale.getDefault(category3);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getScript();
        java.util.Locale locale29 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str30 = locale24.getDisplayScript(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Locale.setDefault(category3, locale29);
        java.util.Locale.setDefault(locale29);
        java.lang.String str34 = locale0.getDisplayVariant(locale29);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        int int12 = numberFormat7.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        boolean boolean20 = numberFormat18.isGroupingUsed();
        boolean boolean21 = numberFormat18.isGroupingUsed();
        fractionFormat14.setNumeratorFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        java.lang.String str31 = numberFormat26.format((long) 100);
        int int32 = numberFormat26.getMaximumFractionDigits();
        numberFormat26.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat36, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat18, numberFormat26);
        boolean boolean48 = numberFormat26.isParseIntegerOnly();
        java.lang.StringBuffer stringBuffer50 = null;
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition53 = new java.text.FieldPosition((java.text.Format.Field) field51, (int) '#');
        java.text.Format.Field field54 = fieldPosition53.getFieldAttribute();
        java.text.Format.Field field55 = fieldPosition53.getFieldAttribute();
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition(field55, 599);
        int int58 = fieldPosition57.getField();
        java.text.Format.Field field59 = fieldPosition57.getFieldAttribute();
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition(field59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer61 = numberFormat26.format((long) (byte) 87, stringBuffer50, fieldPosition60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10,000%" + "'", str31, "10,000%");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 599 + "'", int58 == 599);
        org.junit.Assert.assertNotNull(field59);
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Currency currency8 = numberFormat7.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        boolean boolean11 = numberFormat10.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.lang.Object obj6 = numberFormat4.clone();
        numberFormat4.setParseIntegerOnly(false);
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.lang.String str13 = fieldPosition12.toString();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayName(locale15);
        boolean boolean18 = fieldPosition12.equals((java.lang.Object) locale15);
        fieldPosition12.setEndIndex((int) '#');
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction27 = properFractionFormat23.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition26);
        boolean boolean28 = fieldPosition12.equals((java.lang.Object) parsePosition26);
        int int29 = fieldPosition12.getEndIndex();
        java.lang.String str30 = fieldPosition12.toString();
        int int31 = fieldPosition12.getField();
        java.text.Format.Field field32 = fieldPosition12.getFieldAttribute();
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(field32, (int) (short) 2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = numberFormat4.format(1.0d, stringBuffer10, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(fraction27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]" + "'", str30, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(field32);
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale9);
        int int19 = numberFormat18.getMinimumIntegerDigits();
        properFractionFormat8.setWholeFormat(numberFormat18);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat29 = properFractionFormat24.getDenominatorFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat24.getWholeFormat();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        int int39 = parsePosition37.getIndex();
        org.apache.commons.math.fraction.Fraction fraction40 = properFractionFormat24.parse("it", parsePosition37);
        java.lang.Number number41 = numberFormat18.parse("\u610f\u5927\u5229\u6587", parsePosition37);
        int int42 = parsePosition37.getIndex();
        parsePosition37.setIndex((int) (short) 17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "anglais" + "'", str17, "anglais");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(fraction40);
        org.junit.Assert.assertNull(number41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        int int13 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(0);
        java.text.Format.Field field16 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field16);
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition(field16, (int) (byte) -120);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        long long30 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction24.divide(fraction43);
        double double45 = fraction44.doubleValue();
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale46);
        java.util.Locale locale49 = locale46.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        java.lang.String str52 = locale49.getDisplayName(locale50);
        boolean boolean53 = fraction44.equals((java.lang.Object) locale49);
        java.lang.String str54 = locale49.getVariant();
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale49.getDisplayVariant(locale55);
        java.util.Set<java.lang.String> strSet58 = locale49.getUnicodeLocaleKeys();
        boolean boolean59 = field16.equals((java.lang.Object) locale49);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = locale60.getCountry();
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.lang.String str68 = locale66.getDisplayCountry();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getIntegerInstance(locale66);
        java.lang.String str70 = locale63.getDisplayCountry(locale66);
        java.lang.String str71 = locale63.getISO3Language();
        java.lang.String str72 = locale63.getDisplayName();
        java.lang.String str74 = locale63.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.negate();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction78.abs();
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getInstance(locale81);
        java.util.Locale locale83 = java.util.Locale.getDefault();
        boolean boolean84 = numberFormat82.equals((java.lang.Object) locale83);
        boolean boolean85 = fraction80.equals((java.lang.Object) locale83);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction80.abs();
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale87);
        boolean boolean89 = fraction86.equals((java.lang.Object) locale87);
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getPercentInstance(locale87);
        java.lang.String str91 = locale63.getDisplayScript(locale87);
        java.lang.String str92 = locale60.getDisplayVariant(locale63);
        java.lang.String str93 = locale49.getDisplayLanguage(locale60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat94 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale60);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 120.0d + "'", double45 == 120.0d);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str52, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "KR" + "'", str62, "KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "France" + "'", str70, "France");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str72, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str93, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat94);
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field5, (int) '#');
        java.text.Format.Field field8 = fieldPosition7.getFieldAttribute();
        java.text.Format.Field field9 = fieldPosition7.getFieldAttribute();
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(field9, 599);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition(field9, (int) (short) 32);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) 'a');
        java.lang.String str16 = parsePosition15.toString();
        java.lang.Object obj17 = null;
        boolean boolean18 = parsePosition15.equals(obj17);
        boolean boolean19 = field9.equals((java.lang.Object) parsePosition15);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat2.parse("\ud55c\uad6d\uc5b4 (JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0],overflow trying to convert {0} to fraction ({1}/{2}))", parsePosition15);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        numberFormat25.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str29 = numberFormat25.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.lang.String str32 = numberFormat25.format((long) 600);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25, numberFormat34);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str41 = locale39.getDisplayCountry();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getIntegerInstance(locale39);
        java.lang.String str43 = locale36.getDisplayCountry(locale39);
        java.lang.String str44 = locale36.getISO3Language();
        java.lang.String str45 = locale36.getDisplayName();
        java.lang.String str47 = locale36.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction51.abs();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale54);
        java.util.Locale locale56 = java.util.Locale.getDefault();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) locale56);
        boolean boolean58 = fraction53.equals((java.lang.Object) locale56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction53.abs();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale60);
        boolean boolean62 = fraction59.equals((java.lang.Object) locale60);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale60);
        java.lang.String str64 = locale36.getDisplayScript(locale60);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getCurrencyInstance(locale60);
        numberFormat65.setParseIntegerOnly(true);
        fractionFormat35.setDenominatorFormat(numberFormat65);
        java.util.Locale locale71 = new java.util.Locale("france", "DEU");
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("fr");
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale74);
        java.lang.String str76 = locale73.getDisplayLanguage(locale74);
        java.util.Locale locale77 = locale73.stripExtensions();
        java.lang.String str78 = locale71.getDisplayVariant(locale77);
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getIntegerInstance(locale71);
        java.lang.String str80 = locale71.getLanguage();
        boolean boolean81 = numberFormat65.equals((java.lang.Object) locale71);
        java.lang.StringBuffer stringBuffer82 = null;
        java.text.NumberFormat.Field field83 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition84 = new java.text.FieldPosition((java.text.Format.Field) field83);
        int int85 = fieldPosition84.getEndIndex();
        int int86 = fieldPosition84.getField();
        fieldPosition84.setEndIndex(0);
        int int89 = fieldPosition84.getField();
        int int90 = fieldPosition84.getEndIndex();
        int int91 = fieldPosition84.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer92 = properFractionFormat2.format((java.lang.Object) locale71, stringBuffer82, fieldPosition84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "60,000%" + "'", str32, "60,000%");
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "France" + "'", str43, "France");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str45, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals(locale71.toString(), "france_DEU");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fran\347ais" + "'", str76, "fran\347ais");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "france" + "'", str80, "france");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(field83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale2.getDisplayName(locale3);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale11 = java.util.Locale.getDefault(category6);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.US;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        boolean boolean32 = numberFormat30.equals((java.lang.Object) locale31);
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale38 = java.util.Locale.getDefault(category33);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayScript();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale39.getDisplayScript(locale41);
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale52.getDisplayCountry();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale55.getScript();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.lang.String str63 = locale62.getDisplayScript();
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale68 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Locale locale70 = locale69.stripExtensions();
        java.util.Locale locale72 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale72);
        java.lang.String str74 = locale72.getDisplayCountry();
        java.util.Locale locale75 = java.util.Locale.PRC;
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = locale76.getDisplayScript();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getISO3Language();
        java.lang.String str80 = locale76.getDisplayScript(locale78);
        java.util.Locale locale81 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.lang.String str83 = locale82.getDisplayScript();
        java.lang.String str84 = locale81.getDisplayName(locale82);
        java.util.Locale locale85 = java.util.Locale.TAIWAN;
        java.lang.String str86 = locale85.toLanguageTag();
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale2, locale11, locale13, locale18, locale22, locale24, locale27, locale31, locale38, locale41, locale45, locale49, locale51, locale52, locale54, locale55, locale58, locale60, locale61, locale62, locale64, locale68, locale69, locale72, locale75, locale78, locale82, locale85 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale locale90 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap91 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList92 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap91);
        java.util.Locale locale96 = new java.util.Locale("Chinese (China)", "cor\351en", "100%");
        java.util.Set<java.lang.String> strSet97 = locale96.getUnicodeLocaleKeys();
        java.lang.String str98 = java.util.Locale.lookupTag(languageRangeList92, (java.util.Collection<java.lang.String>) strSet97);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinese (Taiwan)" + "'", str5, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "kor" + "'", str42, "kor");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals(locale49.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
// flaky:         org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Chinese (Taiwan)" + "'", str84, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "zh-TW" + "'", str86, "zh-TW");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(locale90);
        org.junit.Assert.assertNotNull(languageRangeList92);
        org.junit.Assert.assertEquals(locale96.toString(), "chinese (china)_COR\351EN_100%");
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        long long12 = fraction8.longValue();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        boolean boolean21 = fraction8.equals((java.lang.Object) str20);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction30.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction30.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction8.divide(fraction30);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.abs();
        long long63 = fraction61.longValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction57.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.negate();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.abs();
        long long75 = fraction73.longValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction69.multiply(fraction73);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction61.subtract(fraction76);
        org.apache.commons.math.fraction.Fraction fraction80 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str81 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction61.subtract(fraction80);
        long long83 = fraction80.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction30.divide(fraction80);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction80.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 / 100" + "'", str50, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-1 / 100" + "'", str81, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        long long16 = fraction12.longValue();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayScript();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        java.lang.String str22 = locale17.toLanguageTag();
        java.lang.String str23 = locale17.getDisplayVariant();
        java.lang.String str24 = locale17.getVariant();
        boolean boolean25 = fraction12.equals((java.lang.Object) str24);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        long long48 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction34.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction34.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction12.divide(fraction34);
        org.apache.commons.math.fraction.Fraction fraction59 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        long long71 = fraction69.longValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction65.multiply(fraction69);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.negate();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.negate();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.abs();
        long long83 = fraction81.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction77.multiply(fraction81);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction69.subtract(fraction84);
        org.apache.commons.math.fraction.Fraction fraction88 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str89 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction88);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction69.subtract(fraction88);
        long long91 = fraction88.longValue();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction60.divide(fraction88);
        org.apache.commons.math.fraction.Fraction fraction93 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction34.divide(fraction60);
        boolean boolean95 = fraction3.equals((java.lang.Object) fraction60);
        java.lang.String str96 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction60);
        int int97 = fraction60.intValue();
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 / 100" + "'", str54, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-1 / 100" + "'", str89, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "-100 / 1" + "'", str96, "-100 / 1");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-100) + "'", int97 == (-100));
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        numberFormat4.setMaximumIntegerDigits((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category15, locale20);
        java.lang.String str22 = locale14.getDisplayLanguage(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat27.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition30);
        java.lang.Object obj32 = fractionFormat23.parseObject("214,748,364,700%", parsePosition30);
        java.lang.String str33 = parsePosition30.toString();
        java.lang.Object obj34 = numberFormat4.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition30);
        parsePosition30.setErrorIndex(0);
        parsePosition30.setErrorIndex(7260);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "anglais" + "'", str22, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str33, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 1);
        int int14 = numberFormat11.getMinimumIntegerDigits();
        numberFormat11.setGroupingUsed(true);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition(120);
        parsePosition19.setErrorIndex(119);
        int int22 = parsePosition19.getErrorIndex();
        parsePosition19.setErrorIndex((int) (short) -19366);
        java.lang.Object obj25 = numberFormat11.parseObject("1%", parsePosition19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 119 + "'", int22 == 119);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction16.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        int int46 = fraction40.intValue();
        float float47 = fraction40.floatValue();
        int int48 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction40.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction19.divide(fraction49);
        long long51 = fraction19.longValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.016666668f + "'", float47 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) 'a');
        java.lang.String str16 = parsePosition15.toString();
        java.lang.String str17 = parsePosition15.toString();
        java.lang.Object obj18 = numberFormat4.parseObject("zho", parsePosition15);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        long long29 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction23.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction27.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        double double48 = fraction46.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction52);
        boolean boolean54 = fraction43.equals((java.lang.Object) fraction46);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale55.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getISO3Language();
        java.lang.String str61 = locale55.getDisplayScript(locale58);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale55.getDisplayCountry(locale62);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale55);
        boolean boolean65 = fraction46.equals((java.lang.Object) locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale55);
        java.text.NumberFormat numberFormat68 = fractionFormat67.getNumeratorFormat();
        java.text.NumberFormat numberFormat69 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat68, numberFormat69);
        java.lang.StringBuffer stringBuffer72 = null;
        java.text.NumberFormat.Field field73 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field73);
        int int75 = fieldPosition74.getField();
        java.text.Format.Field field76 = fieldPosition74.getFieldAttribute();
        int int77 = fieldPosition74.getField();
        fieldPosition74.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer80 = numberFormat4.format((long) (byte) 100, stringBuffer72, fieldPosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str17, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-0.008333333333333333d) + "'", double48 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str56, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-TW" + "'", str57, "zh-TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zho" + "'", str60, "zho");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Taiwan" + "'", str63, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(field73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(field76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale36 = locale12.stripExtensions();
        java.lang.String str37 = locale9.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale39.getDisplayLanguage(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.util.Locale.setDefault(category0, locale41);
        java.lang.String str47 = locale41.getScript();
        java.util.Locale.setDefault(locale41);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinesisch" + "'", str42, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setVariant("");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        boolean boolean13 = numberFormat1.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder15 = builder11.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("java.text.ParsePosition[index=97,errorIndex=1]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.ParsePosition[index=97,errorIndex=1] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction4.add(fraction14);
        int int19 = fraction18.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 / 100" + "'", str15, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj23 = numberFormat18.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition22);
        parsePosition22.setIndex(0);
        java.lang.Object obj26 = fractionFormat13.parseObject("FR", parsePosition22);
        java.text.NumberFormat numberFormat27 = fractionFormat13.getDenominatorFormat();
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field28, (int) (byte) 0);
        java.lang.String str31 = fieldPosition30.toString();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits(2147483647);
        int int39 = numberFormat36.getMinimumFractionDigits();
        numberFormat36.setParseIntegerOnly(true);
        boolean boolean42 = fraction34.equals((java.lang.Object) numberFormat36);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) numberFormat46);
        java.lang.Object obj48 = numberFormat46.clone();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean53 = numberFormat51.equals((java.lang.Object) numberFormat52);
        java.util.Locale locale58 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        int int60 = numberFormat59.getMaximumIntegerDigits();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        boolean boolean63 = numberFormat62.isGroupingUsed();
        java.util.Currency currency64 = numberFormat62.getCurrency();
        numberFormat59.setCurrency(currency64);
        java.util.Currency currency66 = numberFormat59.getCurrency();
        java.math.RoundingMode roundingMode67 = numberFormat59.getRoundingMode();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) 'a');
        java.lang.String str71 = parsePosition70.toString();
        java.lang.String str72 = parsePosition70.toString();
        java.lang.Object obj73 = numberFormat59.parseObject("zho", parsePosition70);
        java.lang.String str74 = parsePosition70.toString();
        java.lang.Number number75 = numberFormat52.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition70);
        java.lang.Object obj76 = numberFormat46.parseObject("cor\351en", parsePosition70);
        int int77 = parsePosition70.getErrorIndex();
        java.lang.Object obj78 = numberFormat36.parseObject("11,700%", parsePosition70);
        java.text.NumberFormat.Field field79 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition((java.text.Format.Field) field79);
        boolean boolean81 = parsePosition70.equals((java.lang.Object) field79);
        java.text.FieldPosition fieldPosition82 = new java.text.FieldPosition((java.text.Format.Field) field79);
        boolean boolean83 = fieldPosition30.equals((java.lang.Object) field79);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator84 = numberFormat27.formatToCharacterIterator((java.lang.Object) fieldPosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinois" + "'", str12, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals(locale58.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode67 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode67.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str71, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str72, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str74, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(field79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        numberFormat2.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.lang.String str13 = locale8.toLanguageTag();
        java.util.Set<java.lang.String> strSet14 = locale8.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale8);
        java.lang.Object obj16 = numberFormat15.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = properFractionFormat20.getWholeFormat();
        numberFormat21.setMinimumIntegerDigits((int) (byte) 0);
        properFractionFormat17.setWholeFormat(numberFormat21);
        int int25 = numberFormat21.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat21);
        java.util.Currency currency27 = numberFormat2.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.util.Locale locale9 = new java.util.Locale("anglais", "kor");
        java.lang.String str10 = locale1.getDisplayLanguage(locale9);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        boolean boolean15 = field11.equals((java.lang.Object) locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale13.getISO3Language();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale9.getDisplayName(locale18);
        java.lang.String str20 = locale18.getScript();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str23 = locale18.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais (KOR)" + "'", str19, "anglais (KOR)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        boolean boolean4 = numberFormat1.isParseIntegerOnly();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        java.math.RoundingMode roundingMode18 = numberFormat10.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        boolean boolean25 = numberFormat23.isGroupingUsed();
        boolean boolean26 = numberFormat23.isGroupingUsed();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj30 = numberFormat23.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition29);
        numberFormat23.setParseIntegerOnly(false);
        properFractionFormat19.setWholeFormat(numberFormat23);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale35.getScript();
        java.util.Locale locale40 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str41 = locale35.getDisplayScript(locale40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) numberFormat46);
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        int int54 = numberFormat53.getMaximumIntegerDigits();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        boolean boolean57 = numberFormat56.isGroupingUsed();
        java.util.Currency currency58 = numberFormat56.getCurrency();
        numberFormat53.setCurrency(currency58);
        java.util.Currency currency60 = numberFormat53.getCurrency();
        java.math.RoundingMode roundingMode61 = numberFormat53.getRoundingMode();
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) 'a');
        java.lang.String str65 = parsePosition64.toString();
        java.lang.String str66 = parsePosition64.toString();
        java.lang.Object obj67 = numberFormat53.parseObject("zho", parsePosition64);
        java.lang.String str68 = parsePosition64.toString();
        java.lang.Number number69 = numberFormat46.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition64);
        java.lang.Object obj70 = fractionFormat42.parseObject("zho", parsePosition64);
        org.apache.commons.math.fraction.Fraction fraction71 = properFractionFormat19.parse("en_CA", parsePosition64);
        java.lang.Object obj72 = numberFormat1.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition64);
        int int73 = parsePosition64.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str65, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str66, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str68, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(fraction71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str14 = locale7.getDisplayCountry(locale10);
        java.lang.String str15 = locale7.getLanguage();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder18 = builder3.setLanguageTag("fra");
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        long long21 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.multiply(fraction29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        boolean boolean35 = fraction29.equals((java.lang.Object) properFractionFormat34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction19.subtract(fraction29);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.setScript("");
        java.util.Locale locale40 = builder37.build();
        java.util.Locale.Builder builder42 = builder37.setRegion("en");
        java.util.Locale locale43 = builder42.build();
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale48);
        java.lang.String str51 = locale48.getDisplayScript();
        java.lang.String str52 = locale44.getDisplayVariant(locale48);
        java.lang.String str54 = locale44.getExtension('a');
        java.lang.String str55 = locale43.getDisplayCountry(locale44);
        java.util.Set<java.lang.String> strSet56 = locale43.getUnicodeLocaleKeys();
        boolean boolean57 = fraction36.equals((java.lang.Object) locale43);
        java.util.Locale.Builder builder58 = builder3.setLocale(locale43);
        java.util.Locale.Builder builder60 = builder58.setLanguageTag("cinese");
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.lang.String str64 = locale61.getDisplayScript(locale63);
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = locale61.getDisplayCountry();
        java.util.Locale.Builder builder67 = builder60.setLocale(locale61);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "France" + "'", str14, "France");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 / 1" + "'", str20, "1 / 1");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "_EN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str45, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Taiwan" + "'", str47, "Taiwan");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EN" + "'", str55, "EN");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ub3c5\uc77c" + "'", str66, "\ub3c5\uc77c");
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = locale9.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category19, locale24);
        java.lang.String str26 = locale18.getDisplayLanguage(locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale18);
        int int28 = numberFormat27.getMinimumIntegerDigits();
        properFractionFormat17.setWholeFormat(numberFormat27);
        int int30 = numberFormat27.getMinimumFractionDigits();
        int int31 = numberFormat27.getMaximumFractionDigits();
        properFractionFormat2.setWholeFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str10, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh-TW" + "'", str11, "zh-TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        float float20 = fraction5.floatValue();
        java.util.Locale locale24 = new java.util.Locale("ko", "-1", "\244120.00000000000000000000000000000000000");
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setLanguageTag("en");
        java.util.Locale.Builder builder30 = builder25.setExtension('a', "Korean");
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        java.lang.String str36 = locale31.toLanguageTag();
        java.lang.String str37 = locale31.getDisplayVariant();
        boolean boolean38 = locale31.hasExtensions();
        java.util.Locale.Builder builder39 = builder30.setLocale(locale31);
        java.util.Locale.setDefault(locale31);
        java.lang.String str41 = locale24.getDisplayCountry(locale31);
        java.util.Locale locale42 = locale24.stripExtensions();
        java.util.Set<java.lang.String> strSet43 = locale24.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = fraction5.compareTo((java.lang.Object) strSet43);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$EmptySet cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-1.0f) + "'", float20 == (-1.0f));
        org.junit.Assert.assertEquals(locale24.toString(), "ko_-1_\244120.00000000000000000000000000000000000");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "und" + "'", str36, "und");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_-1_\244120.00000000000000000000000000000000000");
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.util.Locale locale9 = new java.util.Locale("anglais", "kor");
        java.lang.String str10 = locale1.getDisplayLanguage(locale9);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        boolean boolean15 = field11.equals((java.lang.Object) locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale13.getISO3Language();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale9.getDisplayName(locale18);
        java.lang.String str20 = locale18.getDisplayLanguage();
        java.lang.String str21 = locale18.getDisplayScript();
        java.lang.String str22 = locale18.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais (KOR)" + "'", str19, "anglais (KOR)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        numberFormat10.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat4.setCurrency(currency13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        numberFormat4.setMaximumIntegerDigits(599);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat19.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        numberFormat28.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str32 = numberFormat28.format((double) 0.0f);
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37);
        java.text.NumberFormat numberFormat40 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28, numberFormat37, numberFormat40);
        java.math.RoundingMode roundingMode42 = numberFormat28.getRoundingMode();
        numberFormat19.setRoundingMode(roundingMode42);
        numberFormat4.setRoundingMode(roundingMode42);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition(14400);
        java.lang.Object obj48 = numberFormat4.parseObject("coreano", parsePosition47);
        java.lang.StringBuffer stringBuffer50 = null;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition(1);
        java.text.NumberFormat.Field field53 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field53);
        java.text.FieldPosition fieldPosition56 = new java.text.FieldPosition((java.text.Format.Field) field53, 1);
        int int57 = fieldPosition56.getEndIndex();
        boolean boolean58 = fieldPosition52.equals((java.lang.Object) fieldPosition56);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition(100);
        fieldPosition60.setBeginIndex((int) 'u');
        int int63 = fieldPosition60.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction66 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str67 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction66);
        long long68 = fraction66.longValue();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction66.abs();
        int int70 = fraction69.getDenominator();
        boolean boolean71 = fieldPosition60.equals((java.lang.Object) fraction69);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction69.abs();
        boolean boolean73 = fieldPosition56.equals((java.lang.Object) fraction72);
        java.text.Format.Field field74 = fieldPosition56.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer75 = numberFormat4.format((long) (short) -14400, stringBuffer50, fieldPosition56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0%" + "'", str32, "0%");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1 / 100" + "'", str67, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(field74);
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        java.lang.String str20 = locale17.getDisplayName(locale18);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        java.lang.String str23 = locale22.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale12.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str20, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh_TW" + "'", str23, "zh_TW");
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        int int11 = parsePosition9.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = fractionFormat5.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat8 = fractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale9);
        fractionFormat5.setNumeratorFormat(numberFormat22);
        properFractionFormat2.setWholeFormat(numberFormat22);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        boolean boolean28 = numberFormat27.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction33 = properFractionFormat29.parse("0%", parsePosition32);
        java.lang.Object obj34 = properFractionFormat2.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition32);
        java.text.NumberFormat numberFormat35 = properFractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction38.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        long long52 = fraction50.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction47.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction41.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        long long66 = fraction64.longValue();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.multiply(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str71 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction70);
        long long72 = fraction70.longValue();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction60.add(fraction70);
        int int75 = fraction70.intValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction54.subtract(fraction70);
        boolean boolean77 = numberFormat35.equals((java.lang.Object) fraction54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.lang.StringBuffer stringBuffer80 = null;
        java.text.FieldPosition fieldPosition82 = new java.text.FieldPosition(100);
        fieldPosition82.setBeginIndex((int) 'u');
        int int85 = fieldPosition82.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction88 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str89 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction88);
        long long90 = fraction88.longValue();
        org.apache.commons.math.fraction.Fraction fraction91 = fraction88.abs();
        int int92 = fraction91.getDenominator();
        boolean boolean93 = fieldPosition82.equals((java.lang.Object) fraction91);
        fieldPosition82.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer96 = numberFormat35.format((double) 0.006666667f, stringBuffer80, fieldPosition82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100 0 / 1" + "'", str7, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(fraction33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 / 100" + "'", str71, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-1 / 100" + "'", str89, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = builder10.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException16 = new org.apache.commons.math.fraction.FractionConversionException((double) (-120L), (long) 10, 10L);
        java.lang.Object[] objArray17 = fractionConversionException16.getArguments();
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition(100);
        fieldPosition20.setBeginIndex((int) 'u');
        int int23 = fieldPosition20.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction26 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction26);
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction26.abs();
        int int30 = fraction29.getDenominator();
        boolean boolean31 = fieldPosition20.equals((java.lang.Object) fraction29);
        fieldPosition20.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer34 = fractionFormat12.format((java.lang.Object) fractionConversionException16, stringBuffer18, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[-120.0, 10, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[-120.0, 10, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1 / 100" + "'", str27, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", "100%");
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = builder4.build();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.lang.String str9 = locale3.getDisplayVariant(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale3);
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.reciprocal();
        java.lang.StringBuffer stringBuffer14 = null;
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str16 = field15.toString();
        java.lang.String str17 = field15.toString();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str22 = fractionFormat20.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat23 = fractionFormat20.getNumeratorFormat();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.lang.String str30 = locale24.getDisplayName(locale27);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        java.lang.String str36 = locale24.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getNumberInstance(locale24);
        fractionFormat20.setNumeratorFormat(numberFormat37);
        numberFormat37.setMinimumIntegerDigits(2);
        boolean boolean41 = field15.equals((java.lang.Object) numberFormat37);
        java.text.FieldPosition fieldPosition42 = new java.text.FieldPosition((java.text.Format.Field) field15);
        int int43 = fieldPosition42.getField();
        java.lang.String str44 = fieldPosition42.toString();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        boolean boolean47 = numberFormat46.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj57 = numberFormat52.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition56);
        properFractionFormat48.setNumeratorFormat(numberFormat52);
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getCurrencyInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.util.Locale locale63 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.lang.String str66 = fractionFormat64.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat67 = fractionFormat64.getNumeratorFormat();
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Locale locale69 = locale68.stripExtensions();
        java.util.Locale locale71 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale71);
        java.lang.String str73 = locale71.getDisplayCountry();
        java.lang.String str74 = locale68.getDisplayName(locale71);
        java.util.Locale locale75 = java.util.Locale.ROOT;
        java.lang.String str76 = locale75.getDisplayScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = locale77.getISO3Language();
        java.lang.String str79 = locale75.getDisplayScript(locale77);
        java.lang.String str80 = locale68.getDisplayLanguage(locale77);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getNumberInstance(locale68);
        fractionFormat64.setNumeratorFormat(numberFormat81);
        properFractionFormat61.setWholeFormat(numberFormat81);
        properFractionFormat48.setWholeFormat(numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        java.text.NumberFormat numberFormat86 = properFractionFormat85.getDenominatorFormat();
        java.text.NumberFormat numberFormat87 = properFractionFormat85.getNumeratorFormat();
        java.text.NumberFormat numberFormat88 = properFractionFormat85.getNumeratorFormat();
        java.text.NumberFormat numberFormat89 = properFractionFormat85.getNumeratorFormat();
        boolean boolean90 = fieldPosition42.equals((java.lang.Object) numberFormat89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer91 = numberFormat10.format((java.lang.Object) fraction13, stringBuffer14, fieldPosition42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u56fd)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]_100%");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str16, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str17, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100 0 / 1" + "'", str22, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str44, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100 0 / 1" + "'", str66, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals(locale71.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "kor" + "'", str78, "kor");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.lang.String str11 = numberFormat4.format((long) 600);
        numberFormat4.setParseIntegerOnly(false);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale17);
        java.util.Currency currency20 = numberFormat19.getCurrency();
        numberFormat19.setMinimumIntegerDigits(1);
        numberFormat19.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat19.parseObject("Japan", parsePosition27);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException32 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str33 = fractionConversionException32.getPattern();
        java.lang.Throwable[] throwableArray34 = fractionConversionException32.getSuppressed();
        java.lang.Object[] objArray35 = fractionConversionException32.getArguments();
        boolean boolean36 = parsePosition27.equals((java.lang.Object) objArray35);
        int int37 = parsePosition27.getIndex();
        int int38 = parsePosition27.getIndex();
        java.lang.Object obj39 = fractionFormat15.parseObject("\ud55c\uad6d\uc5b4", parsePosition27);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.lang.String str46 = numberFormat42.format(0.008333333333333333d);
        boolean boolean47 = numberFormat42.isParseIntegerOnly();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj51 = numberFormat42.parseObject("\u65e5\u6587", parsePosition50);
        int int52 = parsePosition50.getIndex();
        java.lang.Object obj53 = fractionFormat15.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition50);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale54.getDisplayCountry(locale55);
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getIntegerInstance(locale55);
        int int60 = numberFormat59.getMaximumIntegerDigits();
        int int61 = numberFormat59.getMaximumFractionDigits();
        int int62 = numberFormat59.getMaximumIntegerDigits();
        fractionFormat15.setNumeratorFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat59);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale65);
        java.util.Locale locale70 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale70);
        java.lang.String str73 = fractionFormat71.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat74 = fractionFormat71.getNumeratorFormat();
        fractionFormat68.setNumeratorFormat(numberFormat74);
        java.lang.Object obj76 = numberFormat74.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat59, numberFormat74);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "60,000%" + "'", str11, "60,000%");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "TWD");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str33, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1%" + "'", str46, "1%");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Japan" + "'", str57, "Japan");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100 0 / 1" + "'", str73, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        int int16 = numberFormat15.getMaximumFractionDigits();
        java.lang.Object obj17 = numberFormat15.clone();
        numberFormat15.setMinimumIntegerDigits((-1));
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setBeginIndex(119);
        int int32 = fieldPosition23.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer33 = numberFormat15.format((long) 32, stringBuffer21, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 119 + "'", int32 == 119);
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japanese");
        java.lang.String str3 = locale1.getExtension('x');
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) locale6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale9);
        java.lang.String str13 = locale6.getDisplayVariant(locale9);
        java.lang.String str14 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(locale6);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale6);
        java.lang.String str17 = locale1.getDisplayLanguage(locale6);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "japanese");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "japanese" + "'", str17, "japanese");
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        fractionFormat3.setNumeratorFormat(numberFormat9);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        java.util.Currency currency20 = numberFormat18.getCurrency();
        numberFormat15.setCurrency(currency20);
        java.util.Currency currency22 = numberFormat15.getCurrency();
        java.math.RoundingMode roundingMode23 = numberFormat15.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode23);
        java.math.RoundingMode roundingMode25 = numberFormat9.getRoundingMode();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale locale28 = builder26.build();
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        boolean boolean32 = field29.equals((java.lang.Object) locale31);
        java.lang.String str33 = locale31.getDisplayVariant();
        java.util.Locale.Builder builder34 = builder26.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder26.clear();
        java.util.Locale.Builder builder36 = builder26.clear();
        boolean boolean37 = numberFormat9.equals((java.lang.Object) builder26);
        numberFormat9.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode25.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.lang.Object obj14 = numberFormat7.clone();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setMinimumIntegerDigits(1);
        java.util.Currency currency21 = numberFormat17.getCurrency();
        numberFormat7.setCurrency(currency21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = numberFormat7.parseObject("und-EN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "TWD");
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale4);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale4);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) '4');
        parsePosition11.setErrorIndex(600);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale17);
        java.lang.String str21 = locale14.getDisplayCountry(locale17);
        java.lang.String str22 = locale14.getISO3Language();
        java.lang.String str23 = locale14.getDisplayName();
        java.lang.String str25 = locale14.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        boolean boolean35 = numberFormat33.equals((java.lang.Object) locale34);
        boolean boolean36 = fraction31.equals((java.lang.Object) locale34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction31.abs();
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        boolean boolean40 = fraction37.equals((java.lang.Object) locale38);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale38);
        java.lang.String str42 = locale14.getDisplayScript(locale38);
        boolean boolean43 = parsePosition11.equals((java.lang.Object) str42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean49 = numberFormat48.isGroupingUsed();
        properFractionFormat46.setWholeFormat(numberFormat48);
        java.text.NumberFormat numberFormat51 = properFractionFormat46.getWholeFormat();
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number55 = numberFormat51.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition54);
        int int56 = parsePosition54.getIndex();
        int int57 = parsePosition54.getErrorIndex();
        boolean boolean58 = parsePosition11.equals((java.lang.Object) parsePosition54);
        int int59 = parsePosition54.getIndex();
        java.lang.Object obj60 = numberFormat8.parseObject("x-lvariant-fr", parsePosition54);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "France" + "'", str21, "France");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str23, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(number55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        java.lang.String str7 = numberFormat3.format((double) 100);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.util.Set<java.lang.Character> charSet10 = locale8.getExtensionKeys();
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale8.getDisplayVariant(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        boolean boolean28 = parsePosition24.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat15.parse("java.text.ParseException: zh_TW", parsePosition24);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.lang.String str34 = fractionFormat32.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat35 = fractionFormat32.getNumeratorFormat();
        numberFormat35.setMaximumFractionDigits((int) (short) -1);
        int int38 = numberFormat35.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode39 = numberFormat35.getRoundingMode();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        properFractionFormat42.setWholeFormat(numberFormat44);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = locale47.getDisplayName(locale50);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale47.getDisplayLanguage(locale56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale47);
        java.util.Currency currency61 = numberFormat60.getCurrency();
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        int int67 = numberFormat66.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat66);
        numberFormat66.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode71 = numberFormat66.getRoundingMode();
        numberFormat60.setRoundingMode(roundingMode71);
        numberFormat44.setRoundingMode(roundingMode71);
        numberFormat35.setRoundingMode(roundingMode71);
        properFractionFormat15.setWholeFormat(numberFormat35);
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = locale77.getDisplayScript();
        java.lang.String str79 = locale76.getDisplayCountry(locale77);
        java.util.Set<java.lang.String> strSet80 = locale77.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getIntegerInstance(locale77);
        int int82 = numberFormat81.getMaximumIntegerDigits();
        boolean boolean83 = numberFormat81.isParseIntegerOnly();
        properFractionFormat15.setNumeratorFormat(numberFormat81);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction87 = fractionFormat85.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100 0 / 1" + "'", str34, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode39.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertEquals(locale65.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode71.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Japan" + "'", str79, "Japan");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction20.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str32 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction12.subtract(fraction31);
        long long34 = fraction31.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction3.divide(fraction31);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction3.negate();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.Object obj40 = numberFormat38.clone();
        boolean boolean41 = fraction36.equals(obj40);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction43.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction36.multiply(fraction52);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 / 100" + "'", str32, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        java.util.Locale locale3 = new java.util.Locale("zho (CHINESE (TAIWAN),Overflow trying to convert {0} to fraction ({1}/{2}))", "fra", "java.text.NumberFormat$Field(exponent symbol)");
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale3.getDisplayName(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zho (chinese (taiwan),overflow trying to convert {0} to fraction ({1}/{2}))_FRA_java.text.NumberFormat$Field(exponent symbol)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zho (chinese (taiwan),overflow trying to convert {0} to fraction ({1}/{2})) (FRA,java.text.NumberFormat$Field(exponent symbol))" + "'", str4, "zho (chinese (taiwan),overflow trying to convert {0} to fraction ({1}/{2})) (FRA,java.text.NumberFormat$Field(exponent symbol))");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ub300\ub9cc" + "'", str6, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho (chinese (taiwan),overflow trying to convert {0} to fraction ({1}/{2})) (FRA,java.text.NumberFormat$Field(exponent symbol))" + "'", str8, "zho (chinese (taiwan),overflow trying to convert {0} to fraction ({1}/{2})) (FRA,java.text.NumberFormat$Field(exponent symbol))");
        org.junit.Assert.assertNotNull(fractionFormat9);
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "java.text.parseposition[index=35,errorindex=600]");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = locale2.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale7.toLanguageTag();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale16.getDisplayScript(locale19);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale16.getDisplayCountry(locale23);
        java.util.Locale locale26 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str27 = locale23.getDisplayLanguage(locale26);
        java.lang.String str28 = locale14.getDisplayCountry(locale26);
        java.lang.String str29 = locale7.getDisplayVariant(locale14);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        java.util.Locale.setDefault(category0, locale33);
        java.lang.String str39 = locale33.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Taiwan" + "'", str24, "Taiwan");
        org.junit.Assert.assertEquals(locale26.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale locale10 = builder7.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        boolean boolean18 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Currency currency23 = numberFormat21.getCurrency();
        fractionFormat19.setNumeratorFormat(numberFormat21);
        fractionFormat11.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getNumeratorFormat();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale30);
        numberFormat33.setMinimumIntegerDigits(0);
        java.lang.String str37 = numberFormat33.format(1.0d);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.abs();
        long long63 = fraction61.longValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction57.multiply(fraction61);
        boolean boolean65 = numberFormat51.equals((java.lang.Object) fraction57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28, numberFormat33, numberFormat51);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance();
        numberFormat67.setMaximumIntegerDigits(2147483647);
        java.lang.String str71 = numberFormat67.format((long) 2147483647);
        java.util.Locale locale75 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        int int77 = numberFormat76.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat76);
        numberFormat76.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode81 = numberFormat76.getRoundingMode();
        numberFormat67.setRoundingMode(roundingMode81);
        numberFormat33.setRoundingMode(roundingMode81);
        java.lang.String str85 = numberFormat33.format((long) (short) 1);
        fractionFormat26.setDenominatorFormat(numberFormat33);
        java.text.NumberFormat numberFormat87 = null;
        // The following exception was thrown during execution in test generation
        try {
            fractionFormat26.setNumeratorFormat(numberFormat87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(numberFormat67);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "214\240748\240364\240700 %" + "'", str71, "214\240748\240364\240700 %");
        org.junit.Assert.assertEquals(locale75.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode81 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode81.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet7 = locale4.getExtensionKeys();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) '4');
        parsePosition12.setIndex(0);
        java.lang.Object obj15 = properFractionFormat9.parseObject("und", parsePosition12);
        java.lang.Object obj16 = fractionFormat2.parseObject("1 / 100", parsePosition12);
        parsePosition12.setIndex(120);
        parsePosition12.setErrorIndex((int) (short) 599);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale11.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str21 = locale11.getScript();
        java.util.Locale.Builder builder22 = builder10.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder10.setRegion("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais" + "'", str19, "anglais");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        numberFormat2.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj11 = numberFormat2.parseObject("Japan", parsePosition10);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str16 = fractionConversionException15.getPattern();
        java.lang.Throwable[] throwableArray17 = fractionConversionException15.getSuppressed();
        java.lang.Object[] objArray18 = fractionConversionException15.getArguments();
        boolean boolean19 = parsePosition10.equals((java.lang.Object) objArray18);
        int int20 = parsePosition10.getIndex();
        int int21 = parsePosition10.getIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat29 = properFractionFormat24.getWholeFormat();
        java.util.Currency currency30 = numberFormat29.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        boolean boolean32 = parsePosition10.equals((java.lang.Object) numberFormat29);
        numberFormat29.setMinimumFractionDigits(2);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayName(locale38);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        java.lang.String str47 = locale35.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale35);
        java.util.Currency currency49 = numberFormat48.getCurrency();
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        int int55 = numberFormat54.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54);
        numberFormat54.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode59 = numberFormat54.getRoundingMode();
        numberFormat48.setRoundingMode(roundingMode59);
        java.math.RoundingMode roundingMode61 = numberFormat48.getRoundingMode();
        numberFormat29.setRoundingMode(roundingMode61);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getNumeratorFormat();
        java.lang.String str67 = numberFormat65.format((double) (-2));
        int int68 = numberFormat65.getMaximumFractionDigits();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance();
        numberFormat69.setMaximumIntegerDigits(2147483647);
        int int72 = numberFormat69.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = new org.apache.commons.math.fraction.FractionFormat(numberFormat69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63, numberFormat65, numberFormat69);
        java.util.Locale locale78 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        int int80 = numberFormat79.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode81 = numberFormat79.getRoundingMode();
        numberFormat65.setRoundingMode(roundingMode81);
        numberFormat29.setRoundingMode(roundingMode81);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str16, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode59.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-2" + "'", str67, "-2");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertEquals(locale78.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode81 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode81.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale12 = java.util.Locale.getDefault(category7);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale.setDefault(category7, locale14);
        java.util.Locale locale21 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category7, locale21);
        java.lang.String str24 = locale21.getDisplayScript();
        java.lang.String str25 = locale21.getVariant();
        java.util.Locale.setDefault(category0, locale21);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals(locale21.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-tw" + "'", str25, "zh-tw");
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        boolean boolean36 = numberFormat34.equals((java.lang.Object) locale35);
        boolean boolean37 = fraction32.equals((java.lang.Object) locale35);
        boolean boolean38 = parsePosition23.equals((java.lang.Object) locale35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale35);
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition((java.text.Format.Field) field40, 1);
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field40, (int) (short) 100);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str49 = locale46.getDisplayCountry(locale47);
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        boolean boolean52 = field40.equals((java.lang.Object) locale47);
        java.lang.String str53 = locale35.getDisplayName(locale47);
        java.lang.String str54 = locale47.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Japan" + "'", str49, "Japan");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        int int16 = fraction0.intValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.divide(fraction40);
        double double42 = fraction36.doubleValue();
        int int43 = fraction36.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction27.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction27.reciprocal();
        float float46 = fraction27.floatValue();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str48 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction47);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction52.add(fraction58);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction47.multiply(fraction58);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction47.negate();
        long long64 = fraction63.longValue();
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction66.add(fraction72);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction63.multiply(fraction66);
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.negate();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction78.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.abs();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction84.abs();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction78.add(fraction84);
        org.apache.commons.math.fraction.Fraction fraction90 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction91 = fraction90.negate();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction87.divide(fraction90);
        int int93 = fraction87.intValue();
        float float94 = fraction87.floatValue();
        int int95 = fraction87.intValue();
        org.apache.commons.math.fraction.Fraction fraction96 = fraction87.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction66.divide(fraction96);
        org.apache.commons.math.fraction.Fraction fraction98 = fraction27.multiply(fraction66);
        float float99 = fraction66.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 / 100" + "'", str34, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.01d + "'", double42 == 0.01d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.008333334f + "'", float46 == 0.008333334f);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1 / 1" + "'", str48, "1 / 1");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + float94 + "' != '" + 0.016666668f + "'", float94 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertNotNull(fraction98);
        org.junit.Assert.assertTrue("'" + float99 + "' != '" + (-1.0f) + "'", float99 == (-1.0f));
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        long long5 = fraction3.longValue();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction0.divide(fraction3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = numberFormat8.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj19 = numberFormat14.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition18);
        properFractionFormat10.setNumeratorFormat(numberFormat14);
        java.lang.Object obj21 = numberFormat14.clone();
        boolean boolean22 = fraction3.equals((java.lang.Object) numberFormat14);
        boolean boolean23 = numberFormat14.isGroupingUsed();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        boolean boolean11 = numberFormat1.isGroupingUsed();
        numberFormat1.setMaximumFractionDigits((int) (short) 100);
        int int14 = numberFormat1.getMaximumIntegerDigits();
        numberFormat1.setMaximumFractionDigits(5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        numberFormat4.setMinimumFractionDigits((int) (short) 1);
        boolean boolean16 = numberFormat4.isGroupingUsed();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale21);
        java.util.Currency currency24 = numberFormat23.getCurrency();
        numberFormat23.setMinimumIntegerDigits(1);
        numberFormat23.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj32 = numberFormat23.parseObject("Japan", parsePosition31);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException36 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str37 = fractionConversionException36.getPattern();
        java.lang.Throwable[] throwableArray38 = fractionConversionException36.getSuppressed();
        java.lang.Object[] objArray39 = fractionConversionException36.getArguments();
        boolean boolean40 = parsePosition31.equals((java.lang.Object) objArray39);
        int int41 = parsePosition31.getIndex();
        int int42 = parsePosition31.getIndex();
        java.lang.Object obj43 = fractionFormat19.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition31);
        int int44 = parsePosition31.getIndex();
        java.lang.Object obj45 = numberFormat4.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition31);
        int int46 = parsePosition31.getErrorIndex();
        int int47 = parsePosition31.getErrorIndex();
        parsePosition31.setIndex((int) (byte) 0);
        parsePosition31.setErrorIndex(120);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "TWD");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str37, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getWholeFormat();
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        int int71 = numberFormat63.getMaximumFractionDigits();
        numberFormat63.setMinimumFractionDigits((int) 'a');
        properFractionFormat57.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat75 = properFractionFormat57.getDenominatorFormat();
        java.text.ParsePosition parsePosition77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = numberFormat75.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert -120 to fraction (10/10)", parsePosition77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(numberFormat75);
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat39.getWholeFormat();
        java.math.RoundingMode roundingMode42 = numberFormat41.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = numberFormat41.parseObject("\u610f\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        numberFormat18.setParseIntegerOnly(true);
        java.lang.String str57 = numberFormat18.format((double) 14400);
        int int58 = numberFormat18.getMinimumFractionDigits();
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        numberFormat63.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str67 = numberFormat63.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat63);
        java.text.NumberFormat numberFormat69 = fractionFormat68.getNumeratorFormat();
        java.lang.String str71 = numberFormat69.format(1.0d);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale73 = locale72.stripExtensions();
        java.util.Locale locale75 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale75);
        java.lang.String str77 = locale75.getDisplayCountry();
        java.lang.String str78 = locale72.getDisplayName(locale75);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.lang.String str80 = locale79.getDisplayScript();
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.lang.String str82 = locale81.getISO3Language();
        java.lang.String str83 = locale79.getDisplayScript(locale81);
        java.lang.String str84 = locale72.getDisplayLanguage(locale81);
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getNumberInstance(locale72);
        java.util.Currency currency86 = numberFormat85.getCurrency();
        numberFormat69.setCurrency(currency86);
        numberFormat18.setCurrency(currency86);
        numberFormat18.setMaximumFractionDigits(5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "14,400" + "'", str57, "14,400");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0%" + "'", str67, "0%");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "100%" + "'", str71, "100%");
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
// flaky:         org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Korean" + "'", str78, "Korean");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "kor" + "'", str82, "kor");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str84, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(currency86);
        org.junit.Assert.assertEquals(currency86.toString(), "XXX");
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayName();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction20.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        double double33 = fraction31.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction37);
        boolean boolean39 = fraction28.equals((java.lang.Object) fraction31);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale40.toLanguageTag();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale43.getISO3Language();
        java.lang.String str46 = locale40.getDisplayScript(locale43);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale40.getDisplayCountry(locale47);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale40);
        boolean boolean50 = fraction31.equals((java.lang.Object) locale40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale40);
        java.lang.String str53 = locale0.getDisplayName(locale40);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale40);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = locale55.getScript();
        java.util.Locale locale60 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str61 = locale55.getDisplayScript(locale60);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getNumberInstance(locale60);
        int int63 = numberFormat62.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat62);
        boolean boolean65 = numberFormat62.isGroupingUsed();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale66.getISO3Language();
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.lang.String str69 = locale66.getISO3Country();
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getNumberInstance(locale66);
        java.util.Locale locale74 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        int int76 = numberFormat75.getMaximumIntegerDigits();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance(locale77);
        boolean boolean79 = numberFormat78.isGroupingUsed();
        java.util.Currency currency80 = numberFormat78.getCurrency();
        numberFormat75.setCurrency(currency80);
        java.util.Currency currency82 = numberFormat75.getCurrency();
        int int83 = numberFormat75.getMaximumFractionDigits();
        java.lang.Object obj84 = numberFormat75.clone();
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getPercentInstance(locale85);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat86);
        numberFormat86.setMaximumFractionDigits(100);
        numberFormat86.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str93 = numberFormat86.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70, numberFormat75, numberFormat86);
        int int95 = numberFormat75.getMaximumIntegerDigits();
        boolean boolean96 = numberFormat75.isGroupingUsed();
        java.lang.Object obj97 = numberFormat75.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat98 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54, numberFormat62, numberFormat75);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "English" + "'", str3, "English");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.008333333333333333d) + "'", double33 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese" + "'", str41, "Chinese");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh-TW" + "'", str42, "zh-TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zho" + "'", str45, "zho");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Taiwan" + "'", str48, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u82f1\u6587" + "'", str53, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale60.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "kor" + "'", str67, "kor");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals(locale74.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(currency80);
        org.junit.Assert.assertEquals(currency80.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency82);
        org.junit.Assert.assertEquals(currency82.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "100%" + "'", str93, "100%");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2147483647 + "'", int95 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-14400), (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.multiply(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.negate();
        long long29 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction10.divide(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction2.add(fraction10);
        byte byte32 = fraction31.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-144 / 1" + "'", str3, "-144 / 1");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 1" + "'", str13, "1 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 113 + "'", byte32 == (byte) 113);
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(120, 119);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'x', 117);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction2.subtract(fraction11);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str17 = locale14.getDisplayName(locale15);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = locale18.getVariant();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setScript("");
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale24.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder28 = builder23.setLocale(locale24);
        java.lang.String str29 = locale18.getDisplayVariant(locale24);
        java.lang.String str30 = locale24.getDisplayName();
        java.lang.String str31 = locale24.getDisplayName();
        java.lang.String str32 = locale15.getDisplayScript(locale24);
        boolean boolean33 = fraction11.equals((java.lang.Object) str32);
        short short34 = fraction11.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "francese (Francia)" + "'", str17, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinesisch" + "'", str27, "Chinesisch");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (Taiwan)" + "'", str30, "Chinese (Taiwan)");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (Taiwan)" + "'", str31, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 1 + "'", short34 == (short) 1);
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj6 = properFractionFormat2.parseObject("", parsePosition5);
        parsePosition5.setErrorIndex((-1));
        parsePosition5.setIndex(120);
        parsePosition5.setIndex(34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.util.Locale locale34 = locale32.stripExtensions();
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str36 = locale27.getDisplayName(locale32);
        boolean boolean37 = locale27.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.lang.String str32 = numberFormat27.format((-1.0d));
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean37 = numberFormat35.equals((java.lang.Object) numberFormat36);
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        int int44 = numberFormat43.getMaximumIntegerDigits();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        java.util.Currency currency48 = numberFormat46.getCurrency();
        numberFormat43.setCurrency(currency48);
        java.util.Currency currency50 = numberFormat43.getCurrency();
        java.math.RoundingMode roundingMode51 = numberFormat43.getRoundingMode();
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) 'a');
        java.lang.String str55 = parsePosition54.toString();
        java.lang.String str56 = parsePosition54.toString();
        java.lang.Object obj57 = numberFormat43.parseObject("zho", parsePosition54);
        java.lang.String str58 = parsePosition54.toString();
        java.lang.Number number59 = numberFormat36.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition54);
        java.lang.String str60 = parsePosition54.toString();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        long long71 = fraction69.longValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction65.multiply(fraction69);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction81 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.negate();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.abs();
        long long84 = fraction82.longValue();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction78.multiply(fraction82);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction65.multiply(fraction85);
        int int87 = fraction86.intValue();
        boolean boolean88 = parsePosition54.equals((java.lang.Object) int87);
        java.lang.Object obj89 = numberFormat27.parseObject("Japanese (Japan)", parsePosition54);
        numberFormat27.setMaximumIntegerDigits(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean" + "'", str20, "Korean");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode51 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode51.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str55, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str56, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str60, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        java.util.Locale locale3 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        java.lang.String str15 = parsePosition13.toString();
        boolean boolean17 = parsePosition13.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj18 = numberFormat4.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition13);
        int int19 = numberFormat4.getMaximumIntegerDigits();
        java.lang.String str21 = numberFormat4.format((long) (-32));
        org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str15, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-32" + "'", str21, "-32");
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str9 = locale0.getDisplayName();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale0);
        int int11 = numberFormat10.getMinimumFractionDigits();
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        numberFormat16.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency19 = numberFormat16.getCurrency();
        numberFormat16.setGroupingUsed(true);
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        boolean boolean28 = numberFormat26.equals((java.lang.Object) strArray27);
        int int29 = numberFormat26.getMinimumIntegerDigits();
        java.util.Currency currency30 = numberFormat26.getCurrency();
        numberFormat16.setCurrency(currency30);
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        int int35 = fieldPosition34.getBeginIndex();
        java.text.NumberFormat.Field field36 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean37 = fieldPosition34.equals((java.lang.Object) field36);
        java.text.Format.Field field38 = fieldPosition34.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer39 = numberFormat10.format((java.lang.Object) numberFormat16, stringBuffer32, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(field36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(field38);
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        fractionFormat4.setDenominatorFormat(numberFormat9);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str16 = fractionFormat14.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat17 = fractionFormat14.getNumeratorFormat();
        numberFormat17.setMaximumFractionDigits((int) (short) -1);
        int int20 = numberFormat17.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        boolean boolean24 = numberFormat23.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat29.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition33);
        properFractionFormat25.setNumeratorFormat(numberFormat29);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str43 = fractionFormat41.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat44 = fractionFormat41.getNumeratorFormat();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Locale locale46 = locale45.stripExtensions();
        java.util.Locale locale48 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        java.lang.String str50 = locale48.getDisplayCountry();
        java.lang.String str51 = locale45.getDisplayName(locale48);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getISO3Language();
        java.lang.String str56 = locale52.getDisplayScript(locale54);
        java.lang.String str57 = locale45.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale45);
        fractionFormat41.setNumeratorFormat(numberFormat58);
        properFractionFormat38.setWholeFormat(numberFormat58);
        properFractionFormat25.setWholeFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        java.lang.String[] strArray68 = java.util.Locale.getISOCountries();
        boolean boolean69 = numberFormat67.equals((java.lang.Object) strArray68);
        java.lang.String str71 = numberFormat67.format((double) (byte) -1);
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = locale73.getDisplayScript();
        java.lang.String str75 = locale72.getDisplayCountry(locale73);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale72);
        numberFormat76.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat67, numberFormat76);
        properFractionFormat21.setWholeFormat(numberFormat67);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) 'a');
        java.lang.String str84 = parsePosition83.toString();
        java.lang.String str85 = parsePosition83.toString();
        java.lang.Object obj86 = properFractionFormat21.parseObject("zh-tw", parsePosition83);
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getNumberInstance(locale87);
        properFractionFormat21.setNumeratorFormat(numberFormat88);
        boolean boolean90 = numberFormat88.isParseIntegerOnly();
        fractionFormat4.setNumeratorFormat(numberFormat88);
        numberFormat88.setMaximumFractionDigits((int) (short) 1);
        java.math.RoundingMode roundingMode94 = numberFormat88.getRoundingMode();
        numberFormat88.setGroupingUsed(true);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100 0 / 1" + "'", str16, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100 0 / 1" + "'", str43, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Korean" + "'", str51, "Korean");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-100%" + "'", str71, "-100%");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Japan" + "'", str75, "Japan");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str84, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str85, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + roundingMode94 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode94.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(1);
        java.text.NumberFormat.Field field2 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field2);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field2, 1);
        int int6 = fieldPosition5.getEndIndex();
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) fieldPosition5);
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(100);
        fieldPosition9.setBeginIndex((int) 'u');
        int int12 = fieldPosition9.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str16 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction15);
        long long17 = fraction15.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction15.abs();
        int int19 = fraction18.getDenominator();
        boolean boolean20 = fieldPosition9.equals((java.lang.Object) fraction18);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction18.abs();
        boolean boolean22 = fieldPosition5.equals((java.lang.Object) fraction21);
        java.text.Format.Field field23 = fieldPosition5.getFieldAttribute();
        fieldPosition5.setBeginIndex(0);
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 / 100" + "'", str16, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(field23);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) 'a');
        java.lang.String str72 = parsePosition71.toString();
        java.lang.String str73 = parsePosition71.toString();
        java.lang.Object obj74 = properFractionFormat9.parseObject("zh-tw", parsePosition71);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale75);
        properFractionFormat9.setNumeratorFormat(numberFormat76);
        java.text.NumberFormat numberFormat78 = properFractionFormat9.getDenominatorFormat();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Korean" + "'", str39, "Korean");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str72, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str73, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat78);
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) '#');
        java.text.Format.Field field11 = fieldPosition10.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction14.add(fraction21);
        boolean boolean24 = field11.equals((java.lang.Object) fraction14);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field11);
        java.text.Format.Field field26 = fieldPosition25.getFieldAttribute();
        int int27 = fieldPosition25.getEndIndex();
        java.util.Locale locale30 = new java.util.Locale("eng", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        boolean boolean31 = fieldPosition25.equals((java.lang.Object) locale30);
        java.lang.String str32 = locale4.getDisplayCountry(locale30);
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getScript();
        java.lang.String str36 = locale33.getDisplayName(locale34);
        java.lang.String str37 = locale33.getScript();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale33);
        java.lang.String str39 = locale4.getDisplayVariant(locale33);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "eng_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str36, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale locale10 = new java.util.Locale("French (Canada)", "java.text.NumberFormat$Field(currency)");
        java.lang.String str11 = locale10.getDisplayScript();
        java.lang.String str12 = locale10.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str14 = locale3.getDisplayName(locale10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals(locale10.toString(), "french (canada)_JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale11 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        int int13 = numberFormat12.getMaximumIntegerDigits();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        java.util.Currency currency17 = numberFormat15.getCurrency();
        numberFormat12.setCurrency(currency17);
        java.util.Currency currency19 = numberFormat12.getCurrency();
        java.math.RoundingMode roundingMode20 = numberFormat12.getRoundingMode();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) 'a');
        java.lang.String str24 = parsePosition23.toString();
        java.lang.String str25 = parsePosition23.toString();
        java.lang.Object obj26 = numberFormat12.parseObject("zho", parsePosition23);
        java.lang.Object obj27 = fractionFormat6.parseObject("java.text.NumberFormat$Field(currency)", parsePosition23);
        java.util.Locale locale30 = new java.util.Locale("100%", "zh-TW");
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.setScript("");
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayLanguage(locale36);
        java.util.Locale.Builder builder38 = builder33.setLocale(locale34);
        java.lang.String str39 = locale30.getDisplayScript(locale34);
        java.lang.String str40 = locale30.getDisplayName();
        java.util.Locale.setDefault(locale30);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale30);
        fractionFormat6.setNumeratorFormat(numberFormat42);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode20.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str24, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str25, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals(locale30.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinesisch" + "'", str37, "Chinesisch");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100% (ZH-TW)" + "'", str40, "100% (ZH-TW)");
        org.junit.Assert.assertNotNull(numberFormat42);
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        float float33 = fraction32.floatValue();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        boolean boolean43 = numberFormat41.equals((java.lang.Object) locale42);
        boolean boolean44 = fraction39.equals((java.lang.Object) locale42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction39.negate();
        int int47 = fraction39.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction32.subtract(fraction39);
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition51 = new java.text.FieldPosition((java.text.Format.Field) field49, (int) '#');
        java.text.Format.Field field52 = fieldPosition51.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction58.multiply(fraction62);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction55.add(fraction62);
        boolean boolean65 = field52.equals((java.lang.Object) fraction55);
        int int66 = fraction55.intValue();
        long long67 = fraction55.longValue();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction48.divide(fraction55);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction8.divide(fraction55);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 10.0f + "'", float33 == 10.0f);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "100%_ZH-TW");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 120 + "'", int47 == 120);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertNotNull(field52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.AttributedCharacterIterator attributedCharacterIterator5 = numberFormat2.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj6 = numberFormat2.clone();
        numberFormat2.setMaximumFractionDigits(2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        properFractionFormat13.setWholeFormat(numberFormat15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.lang.String str24 = locale18.getDisplayName(locale21);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        java.lang.String str30 = locale18.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale18);
        java.util.Currency currency32 = numberFormat31.getCurrency();
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37);
        numberFormat37.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode42 = numberFormat37.getRoundingMode();
        numberFormat31.setRoundingMode(roundingMode42);
        numberFormat15.setRoundingMode(roundingMode42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat10, numberFormat15);
        java.lang.String str47 = numberFormat10.format((long) 2);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale50);
        java.util.Locale.setDefault(category48, locale50);
        java.util.Locale locale53 = java.util.Locale.getDefault(category48);
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale53);
        numberFormat55.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance(locale58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.text.NumberFormat numberFormat61 = properFractionFormat60.getWholeFormat();
        numberFormat61.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat55, numberFormat61);
        int int65 = numberFormat55.getMinimumFractionDigits();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat10, numberFormat55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(attributedCharacterIterator5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "100%_ZH-TW");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100% (ZH-TW)" + "'", str24, "100% (ZH-TW)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100%" + "'", str30, "100%");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2" + "'", str47, "2");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int3 = fraction2.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction20.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str32 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction12.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction2.subtract(fraction31);
        int int35 = fraction2.getNumerator();
        java.lang.String str36 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction2.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1 / 100" + "'", str32, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1 / 120" + "'", str36, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction37);
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        numberFormat18.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str22 = numberFormat18.format((double) 0.0f);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        java.text.NumberFormat numberFormat30 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat27, numberFormat30);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException34 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean35 = numberFormat27.equals((java.lang.Object) 10);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat39);
        int int41 = numberFormat37.getMaximumIntegerDigits();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.lang.String str45 = locale42.getDisplayCountry(locale43);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getIntegerInstance(locale43);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale43);
        java.util.Set<java.lang.Character> charSet49 = locale43.getExtensionKeys();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getIntegerInstance(locale43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat37, numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50);
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.NumberFormat.Field field54 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition((java.text.Format.Field) field54);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        boolean boolean58 = field54.equals((java.lang.Object) locale56);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field54, (int) '#');
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field54);
        java.text.Format.Field field62 = fieldPosition61.getFieldAttribute();
        fieldPosition61.setEndIndex(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer65 = fractionFormat13.format((java.lang.Object) numberFormat50, stringBuffer53, fieldPosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinois" + "'", str12, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Japan" + "'", str45, "Japan");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(field62);
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) '#');
        parsePosition71.setErrorIndex(600);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat9.parse("\ub300\ub9cc", parsePosition71);
        java.text.NumberFormat numberFormat75 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat76 = properFractionFormat9.getWholeFormat();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance(locale77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        numberFormat78.setMaximumFractionDigits(100);
        numberFormat78.setMaximumFractionDigits((int) (byte) 100);
        numberFormat78.setMaximumFractionDigits((int) (byte) -1);
        java.lang.String str87 = numberFormat78.format(9700L);
        java.lang.String str89 = numberFormat78.format((long) (-120));
        properFractionFormat9.setWholeFormat(numberFormat78);
        java.text.NumberFormat.Field field91 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition92 = new java.text.FieldPosition((java.text.Format.Field) field91);
        java.text.FieldPosition fieldPosition94 = new java.text.FieldPosition((java.text.Format.Field) field91, (int) '#');
        java.lang.String str95 = fieldPosition94.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = properFractionFormat9.format((java.lang.Object) fieldPosition94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "100%_ZH-TW");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100% (ZH-TW)" + "'", str39, "100% (ZH-TW)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100%" + "'", str45, "100%");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "970,000%" + "'", str87, "970,000%");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-12,000%" + "'", str89, "-12,000%");
        org.junit.Assert.assertNotNull(field91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(exponent),beginIndex=0,endIndex=0]" + "'", str95, "java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(exponent),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        float float31 = fraction29.floatValue();
        org.apache.commons.math.fraction.Fraction fraction34 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str35 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction29.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction12.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction41 = new org.apache.commons.math.fraction.Fraction(0.02d, (double) 117L, 17);
        int int42 = fraction37.compareTo((java.lang.Object) fraction41);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1 / 100" + "'", str35, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko" + "'", str8, "ko");
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale6 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale9 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale6.getDisplayLanguage(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale6);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        numberFormat18.setMinimumIntegerDigits(1728000);
        java.util.Currency currency21 = numberFormat18.getCurrency();
        numberFormat15.setCurrency(currency21);
        java.lang.String str24 = numberFormat15.format(1L);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        numberFormat29.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str33 = numberFormat29.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        int int35 = numberFormat29.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat15, numberFormat29);
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        numberFormat41.setMinimumIntegerDigits((int) (short) -1);
        numberFormat41.setMaximumFractionDigits(0);
        java.lang.Object obj46 = numberFormat41.clone();
        properFractionFormat36.setWholeFormat(numberFormat41);
        numberFormat41.setMaximumFractionDigits(6000);
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("zh-TW");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale53.getDisplayCountry();
        java.lang.String str55 = locale53.getDisplayLanguage();
        java.lang.String str56 = locale53.getScript();
        java.lang.String str57 = locale51.getDisplayName(locale53);
        boolean boolean58 = numberFormat41.equals((java.lang.Object) locale53);
        numberFormat41.setMaximumFractionDigits((int) (byte) 1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale9.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "chinese (taiwan)" + "'", str14, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\244 1.00" + "'", str24, "\244 1.00");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0%" + "'", str33, "0%");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Taiwan" + "'", str54, "Taiwan");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese" + "'", str55, "Chinese");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str57, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale12.getDisplayCountry();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "100%_ZH-TW");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "China" + "'", str16, "China");
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) 'a');
        java.lang.String str13 = parsePosition12.toString();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale.Builder builder17 = builder16.clear();
        boolean boolean18 = parsePosition12.equals((java.lang.Object) builder17);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean27 = parsePosition12.equals((java.lang.Object) locale24);
        java.lang.String str28 = locale6.getDisplayScript(locale24);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale29.getDisplayCountry();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.PRC;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale29.getDisplayCountry(locale31);
        java.lang.String str35 = locale24.getDisplayLanguage(locale29);
        java.util.Locale.setDefault(category0, locale24);
        java.lang.String str37 = locale24.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str13, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str33, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "coreano" + "'", str35, "coreano");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        java.util.Locale locale2 = new java.util.Locale("\ub300\ub9cc", "-100 %");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.lang.Object obj4 = fractionFormat3.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "\ub300\ub9cc_-100 %");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getExtension('x');
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field6);
        java.lang.String str8 = fieldPosition7.toString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.lang.String str12 = locale9.getDisplayName(locale10);
        boolean boolean13 = fieldPosition7.equals((java.lang.Object) locale10);
        fieldPosition7.setEndIndex((int) '#');
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction22 = properFractionFormat18.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition21);
        boolean boolean23 = fieldPosition7.equals((java.lang.Object) parsePosition21);
        java.lang.String str24 = parsePosition21.toString();
        parsePosition21.setErrorIndex((int) (short) 10);
        java.lang.Object obj27 = numberFormat4.parseObject("java.text.ParseException: zh_TW", parsePosition21);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale28);
        java.util.Currency currency31 = numberFormat30.getCurrency();
        numberFormat30.setMinimumIntegerDigits(1);
        numberFormat30.setMinimumIntegerDigits((int) (byte) 0);
        int int36 = numberFormat30.getMaximumFractionDigits();
        java.util.Currency currency37 = numberFormat30.getCurrency();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = locale38.getDisplayScript(locale40);
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        java.lang.String str45 = locale40.toLanguageTag();
        java.lang.String str46 = locale40.getDisplayLanguage();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance(locale40);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.text.AttributedCharacterIterator attributedCharacterIterator52 = numberFormat49.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj53 = numberFormat49.clone();
        numberFormat49.setMaximumFractionDigits(2147483647);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj65 = numberFormat60.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition64);
        java.lang.String str66 = parsePosition64.toString();
        java.lang.Number number67 = numberFormat49.parse("\ud55c\uad6d\uc5b4", parsePosition64);
        numberFormat49.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30, numberFormat47, numberFormat49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat30);
        java.lang.StringBuffer stringBuffer73 = null;
        java.text.FieldPosition fieldPosition75 = new java.text.FieldPosition((int) (byte) 87);
        fieldPosition75.setBeginIndex((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer78 = numberFormat4.format((double) 0.016666668f, stringBuffer73, fieldPosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str8, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (Taiwan)" + "'", str12, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(fraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str24, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ko" + "'", str45, "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Korean" + "'", str46, "Korean");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(attributedCharacterIterator52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str66, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number67);
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        numberFormat4.setGroupingUsed(true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = numberFormat8.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj19 = numberFormat14.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition18);
        properFractionFormat10.setNumeratorFormat(numberFormat14);
        java.lang.Object obj21 = numberFormat14.clone();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale22);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        numberFormat24.setMinimumIntegerDigits(1);
        java.util.Currency currency28 = numberFormat24.getCurrency();
        numberFormat14.setCurrency(currency28);
        numberFormat4.setCurrency(currency28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.lang.String str39 = locale37.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale40.getISO3Language();
        java.lang.String str43 = locale37.getDisplayScript(locale40);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = locale37.getDisplayCountry(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        java.math.RoundingMode roundingMode48 = numberFormat47.getRoundingMode();
        numberFormat36.setRoundingMode(roundingMode48);
        fractionFormat31.setDenominatorFormat(numberFormat36);
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        long long73 = fraction71.longValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction67.multiply(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction59.subtract(fraction74);
        org.apache.commons.math.fraction.Fraction fraction78 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str79 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction78);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction59.subtract(fraction78);
        org.apache.commons.math.fraction.Fraction fraction84 = new org.apache.commons.math.fraction.Fraction(0.0d, (double) 214748364700L, (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction59.subtract(fraction84);
        float float86 = fraction85.floatValue();
        java.lang.StringBuffer stringBuffer87 = null;
        java.text.NumberFormat.Field field88 = java.text.NumberFormat.Field.EXPONENT_SYMBOL;
        java.lang.String str89 = field88.toString();
        java.text.FieldPosition fieldPosition91 = new java.text.FieldPosition((java.text.Format.Field) field88, (int) (short) 0);
        java.text.Format.Field field92 = fieldPosition91.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer93 = fractionFormat31.format(fraction85, stringBuffer87, fieldPosition91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "TWD");
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "TWD");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese" + "'", str38, "Chinese");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-TW" + "'", str39, "zh-TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zho" + "'", str42, "zho");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Taiwan" + "'", str45, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-1 / 100" + "'", str79, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.008333334f + "'", float86 == 0.008333334f);
        org.junit.Assert.assertNotNull(field88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "java.text.NumberFormat$Field(exponent symbol)" + "'", str89, "java.text.NumberFormat$Field(exponent symbol)");
        org.junit.Assert.assertNotNull(field92);
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) 'a');
        java.lang.String str18 = parsePosition17.toString();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.clear();
        java.util.Locale.Builder builder22 = builder21.clear();
        boolean boolean23 = parsePosition17.equals((java.lang.Object) builder22);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category24);
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean32 = parsePosition17.equals((java.lang.Object) locale29);
        java.lang.String str33 = locale11.getDisplayScript(locale29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale34.getDisplayCountry(locale36);
        java.lang.String str40 = locale29.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale29);
        boolean boolean42 = locale29.hasExtensions();
        java.lang.String str43 = locale5.getDisplayVariant(locale29);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        numberFormat49.setMinimumIntegerDigits((int) (short) -1);
        numberFormat49.setMaximumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat49);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str18, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str38, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "coreano" + "'", str40, "coreano");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        numberFormat2.setGroupingUsed(true);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) '4');
        parsePosition36.setErrorIndex(600);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getIntegerInstance(locale42);
        java.lang.String str46 = locale39.getDisplayCountry(locale42);
        java.lang.String str47 = locale39.getISO3Language();
        java.lang.String str48 = locale39.getDisplayName();
        java.lang.String str50 = locale39.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction54.abs();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.getDefault();
        boolean boolean60 = numberFormat58.equals((java.lang.Object) locale59);
        boolean boolean61 = fraction56.equals((java.lang.Object) locale59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction56.abs();
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale63);
        boolean boolean65 = fraction62.equals((java.lang.Object) locale63);
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale63);
        java.lang.String str67 = locale39.getDisplayScript(locale63);
        boolean boolean68 = parsePosition36.equals((java.lang.Object) str67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        boolean boolean74 = numberFormat73.isGroupingUsed();
        properFractionFormat71.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat76 = properFractionFormat71.getWholeFormat();
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number80 = numberFormat76.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition79);
        int int81 = parsePosition79.getIndex();
        int int82 = parsePosition79.getErrorIndex();
        boolean boolean83 = parsePosition36.equals((java.lang.Object) parsePosition79);
        parsePosition36.setErrorIndex((-100));
        int int86 = parsePosition36.getIndex();
        java.lang.Number number87 = numberFormat2.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(decimal separator),beginIndex=0,endIndex=0]", parsePosition36);
        java.lang.Object obj88 = numberFormat2.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "France" + "'", str46, "France");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fra" + "'", str47, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)" + "'", str48, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(number80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertNull(number87);
        org.junit.Assert.assertNotNull(obj88);
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        java.util.Locale locale1 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale4 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale1.getDisplayLanguage(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale16.toLanguageTag();
        java.util.Set<java.lang.String> strSet22 = locale16.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean27 = numberFormat25.equals((java.lang.Object) numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        boolean boolean29 = numberFormat25.equals((java.lang.Object) fractionFormat28);
        fractionFormat23.setDenominatorFormat(numberFormat25);
        properFractionFormat15.setDenominatorFormat(numberFormat25);
        java.lang.Object obj32 = numberFormat25.clone();
        fractionFormat10.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency36 = numberFormat35.getCurrency();
        java.lang.String str38 = numberFormat35.format(1.0d);
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale40);
        java.util.Currency currency43 = numberFormat42.getCurrency();
        numberFormat42.setMinimumIntegerDigits(1);
        numberFormat42.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj51 = numberFormat42.parseObject("Japan", parsePosition50);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException55 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str56 = fractionConversionException55.getPattern();
        java.lang.Throwable[] throwableArray57 = fractionConversionException55.getSuppressed();
        java.lang.Object[] objArray58 = fractionConversionException55.getArguments();
        boolean boolean59 = parsePosition50.equals((java.lang.Object) objArray58);
        int int60 = parsePosition50.getIndex();
        java.lang.String str61 = parsePosition50.toString();
        java.lang.Object obj62 = numberFormat35.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition50);
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat10.parse("CAN", parsePosition50);
        org.junit.Assert.assertEquals(locale1.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale4.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinese (taiwan)" + "'", str9, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str12, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100%" + "'", str38, "100%");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "TWD");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str56, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str61, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(fraction63);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.lang.String str6 = locale1.getDisplayScript();
        java.lang.String str7 = locale1.getDisplayCountry();
        java.lang.String str8 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        numberFormat8.setMinimumIntegerDigits(1728000);
        boolean boolean11 = numberFormat8.isGroupingUsed();
        properFractionFormat4.setWholeFormat(numberFormat8);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) 'a');
        java.lang.String str26 = parsePosition25.toString();
        java.lang.String str27 = parsePosition25.toString();
        parsePosition25.setErrorIndex(3);
        org.apache.commons.math.fraction.Fraction fraction30 = properFractionFormat22.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition25);
        java.lang.Object obj31 = properFractionFormat4.parseObject("fra", parsePosition25);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.Object obj40 = numberFormat38.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str49 = fractionFormat47.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat50 = fractionFormat47.getNumeratorFormat();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.lang.String str56 = locale54.getDisplayCountry();
        java.lang.String str57 = locale51.getDisplayName(locale54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale60.getISO3Language();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.lang.String str63 = locale51.getDisplayLanguage(locale60);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale51);
        fractionFormat47.setNumeratorFormat(numberFormat64);
        properFractionFormat44.setWholeFormat(numberFormat64);
        fractionFormat41.setNumeratorFormat(numberFormat64);
        java.text.NumberFormat numberFormat68 = fractionFormat41.getNumeratorFormat();
        java.text.NumberFormat numberFormat69 = fractionFormat41.getDenominatorFormat();
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field71);
        java.lang.String str73 = fieldPosition72.toString();
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale75 = java.util.Locale.ROOT;
        java.lang.String str76 = locale75.getDisplayScript();
        java.lang.String str77 = locale74.getDisplayName(locale75);
        boolean boolean78 = fieldPosition72.equals((java.lang.Object) locale75);
        fieldPosition72.setEndIndex((int) '#');
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getCurrencyInstance(locale81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat82);
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat83.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition86);
        boolean boolean88 = fieldPosition72.equals((java.lang.Object) parsePosition86);
        java.lang.String str89 = parsePosition86.toString();
        int int90 = parsePosition86.getIndex();
        org.apache.commons.math.fraction.Fraction fraction91 = fractionFormat41.parse("Canada", parsePosition86);
        java.lang.Object obj92 = properFractionFormat35.parseObject("ko", parsePosition86);
        java.lang.Object obj93 = properFractionFormat4.parseObject("\244 100.00", parsePosition86);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str15, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str26, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str27, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100 0 / 1" + "'", str49, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Japanese" + "'", str57, "Japanese");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str63, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str73, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Chinese (Taiwan)" + "'", str77, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNull(fraction87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str89, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNull(fraction91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6, filteringMode8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList30, strMap31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strMap41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale43.toLanguageTag();
        java.util.Set<java.lang.String> strSet49 = locale43.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet49, filteringMode50);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags(languageRangeList53, (java.util.Collection<java.lang.String>) strSet58, filteringMode60);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList67);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags(languageRangeList53, (java.util.Collection<java.lang.String>) strList67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList53, strMap71);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList53, strMap73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList74, strMap75);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getIntegerInstance(locale77);
        java.lang.String str79 = locale77.getISO3Language();
        java.util.Set<java.lang.String> strSet80 = locale77.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.parse("ita");
        java.util.Locale locale83 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        java.util.Locale locale86 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale86);
        java.lang.String str88 = locale86.getDisplayCountry();
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getIntegerInstance(locale86);
        java.lang.String str90 = locale83.getDisplayCountry(locale86);
        java.util.Set<java.lang.String> strSet91 = locale83.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList82, (java.util.Collection<java.lang.String>) strSet91, filteringMode92);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList76, (java.util.Collection<java.lang.String>) strSet80, filteringMode92);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet49, filteringMode92);
        java.lang.String str96 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList95);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(languageRangeList74);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals(locale86.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "France" + "'", str90, "France");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode92.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.lang.String str36 = fieldPosition35.toString();
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayName(locale38);
        boolean boolean41 = fieldPosition35.equals((java.lang.Object) locale38);
        fieldPosition35.setEndIndex((int) '#');
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat46.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition49);
        boolean boolean51 = fieldPosition35.equals((java.lang.Object) parsePosition49);
        java.lang.String str52 = parsePosition49.toString();
        int int53 = parsePosition49.getIndex();
        org.apache.commons.math.fraction.Fraction fraction54 = fractionFormat4.parse("Canada", parsePosition49);
        java.text.NumberFormat numberFormat55 = fractionFormat4.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction57 = fractionFormat4.parse("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"zh_CN\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japanese" + "'", str20, "Japanese");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str26, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str36, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (Taiwan)" + "'", str40, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str52, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNotNull(numberFormat55);
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction27.multiply(fraction33);
        boolean boolean35 = fraction24.equals((java.lang.Object) fraction27);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str42 = locale36.getDisplayScript(locale39);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale36.getDisplayCountry(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean46 = fraction27.equals((java.lang.Object) locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale36);
        java.lang.String str48 = locale36.getDisplayScript();
        java.lang.String str49 = locale36.getISO3Country();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.008333333333333333d) + "'", double29 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str37, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "TWN" + "'", str49, "TWN");
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale locale10 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        numberFormat13.setMaximumFractionDigits(20);
        java.lang.Object obj16 = numberFormat13.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertEquals(locale10.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        int int5 = numberFormat3.getMaximumFractionDigits();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        int int7 = numberFormat3.getMaximumFractionDigits();
        java.lang.String str9 = numberFormat3.format((double) 0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0%" + "'", str9, "0%");
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction5);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction7.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction7.negate();
        long long24 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction23.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction38.add(fraction44);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.divide(fraction50);
        int int53 = fraction47.intValue();
        float float54 = fraction47.floatValue();
        int int55 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction47.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction26.divide(fraction56);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction5.subtract(fraction56);
        int int59 = fraction58.intValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 / 100" + "'", str6, "1 / 100");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 / 1" + "'", str8, "1 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.016666668f + "'", float54 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-59) + "'", int59 == (-59));
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        int int12 = fieldPosition1.getField();
        java.text.Format.Field field13 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        numberFormat17.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        java.lang.Number number40 = numberFormat17.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition37);
        java.lang.Object obj41 = numberFormat17.clone();
        boolean boolean42 = field13.equals(obj41);
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition(field13, 8654399);
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition(field13);
        fieldPosition45.setEndIndex((int) (byte) -120);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(number40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        boolean boolean4 = numberFormat2.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(2);
        java.lang.Object obj9 = properFractionFormat5.parseObject("java.text.ParsePosition[index=97,errorIndex=97]", parsePosition8);
        org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat5.parse("32");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(fraction11);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean6 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition15);
        properFractionFormat7.setNumeratorFormat(numberFormat11);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str25 = fractionFormat23.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.lang.String str33 = locale27.getDisplayName(locale30);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        java.lang.String str39 = locale27.getDisplayLanguage(locale36);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale27);
        fractionFormat23.setNumeratorFormat(numberFormat40);
        properFractionFormat20.setWholeFormat(numberFormat40);
        properFractionFormat7.setWholeFormat(numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        java.lang.String[] strArray50 = java.util.Locale.getISOCountries();
        boolean boolean51 = numberFormat49.equals((java.lang.Object) strArray50);
        java.lang.String str53 = numberFormat49.format((double) (byte) -1);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale54.getDisplayCountry(locale55);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale54);
        numberFormat58.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat49, numberFormat58);
        int int62 = numberFormat49.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction65 = fractionFormat63.parse("TAIWAN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"TAIWAN\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100 0 / 1" + "'", str25, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (Taiwan)" + "'", str33, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str39, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-100%" + "'", str53, "-100%");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Japan" + "'", str57, "Japan");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        int int17 = parsePosition15.getIndex();
        org.apache.commons.math.fraction.Fraction fraction18 = properFractionFormat2.parse("it", parsePosition15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat2.parse("59\240999 %");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"59?999 %\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(fraction18);
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field13, (int) '#');
        java.text.Format.Field field16 = fieldPosition15.getFieldAttribute();
        boolean boolean17 = field8.equals((java.lang.Object) fieldPosition15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        boolean boolean20 = field8.equals((java.lang.Object) locale19);
        java.lang.String str21 = locale19.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.setLanguageTag("en");
        java.util.Locale.Builder builder28 = builder23.setExtension('a', "Korean");
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale31.getISO3Language();
        java.lang.String str33 = locale29.getDisplayScript(locale31);
        java.lang.String str34 = locale29.toLanguageTag();
        java.lang.String str35 = locale29.getDisplayVariant();
        boolean boolean36 = locale29.hasExtensions();
        java.util.Locale.Builder builder37 = builder28.setLocale(locale29);
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("TWN");
        java.util.Locale locale40 = builder39.build();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        java.lang.StringBuffer stringBuffer42 = null;
        java.text.FieldPosition fieldPosition43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer44 = fractionFormat22.format((java.lang.Object) locale40, stringBuffer42, fieldPosition43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587" + "'", str21, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "kor" + "'", str32, "kor");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat41);
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        boolean boolean5 = numberFormat1.equals((java.lang.Object) fractionFormat4);
        java.lang.String str7 = numberFormat1.format((double) (short) -100);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        boolean boolean13 = numberFormat11.isGroupingUsed();
        boolean boolean14 = numberFormat11.isGroupingUsed();
        int int15 = numberFormat11.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-10,000%" + "'", str7, "-10,000%");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        boolean boolean4 = numberFormat2.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str19 = fractionFormat17.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat20 = fractionFormat17.getNumeratorFormat();
        numberFormat20.setMaximumFractionDigits((int) (short) -1);
        int int23 = numberFormat20.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setGroupingUsed(true);
        java.util.Currency currency27 = numberFormat20.getCurrency();
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        java.lang.String str31 = fieldPosition30.toString();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = locale32.getDisplayName(locale33);
        boolean boolean36 = fieldPosition30.equals((java.lang.Object) locale33);
        fieldPosition30.setEndIndex((int) '#');
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat41.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition44);
        boolean boolean46 = fieldPosition30.equals((java.lang.Object) parsePosition44);
        parsePosition44.setErrorIndex((int) '#');
        java.lang.Object obj49 = numberFormat20.parseObject("ja-JP", parsePosition44);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat9.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition44);
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56);
        java.util.Locale locale63 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        int int65 = numberFormat64.getMaximumIntegerDigits();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        boolean boolean68 = numberFormat67.isGroupingUsed();
        java.util.Currency currency69 = numberFormat67.getCurrency();
        numberFormat64.setCurrency(currency69);
        java.util.Currency currency71 = numberFormat64.getCurrency();
        java.math.RoundingMode roundingMode72 = numberFormat64.getRoundingMode();
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition((int) 'a');
        java.lang.String str76 = parsePosition75.toString();
        java.lang.String str77 = parsePosition75.toString();
        java.lang.Object obj78 = numberFormat64.parseObject("zho", parsePosition75);
        java.lang.Object obj79 = fractionFormat58.parseObject("java.text.NumberFormat$Field(currency)", parsePosition75);
        org.apache.commons.math.fraction.Fraction fraction80 = properFractionFormat9.parse("", parsePosition75);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat5.parse("\244 120.00 \244 0.00 / \244 1.00", parsePosition75);
        java.text.NumberFormat numberFormat82 = properFractionFormat5.getDenominatorFormat();
        numberFormat82.setMaximumFractionDigits(13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100 0 / 1" + "'", str19, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (Taiwan)" + "'", str35, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertEquals(locale63.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(currency69);
        org.junit.Assert.assertEquals(currency69.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode72 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode72.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str76, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str77, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNull(fraction80);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertNotNull(numberFormat82);
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field7, (int) '#');
        java.text.Format.Field field10 = fieldPosition9.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction13.add(fraction20);
        boolean boolean23 = field10.equals((java.lang.Object) fraction13);
        int int24 = fraction13.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction13.divide(fraction25);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction6.multiply(fraction25);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0 / 1" + "'", str3, "0 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1 / 1" + "'", str28, "1 / 1");
        org.junit.Assert.assertNotNull(fraction29);
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(120, (int) (byte) -120);
        int int3 = fraction2.intValue();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        java.lang.String str9 = locale4.toLanguageTag();
        java.util.Set<java.lang.String> strSet10 = locale4.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.lang.Object obj12 = numberFormat11.clone();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        numberFormat17.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        java.lang.Number number40 = numberFormat17.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition37);
        java.lang.Object obj41 = numberFormat11.parseObject("\ud55c\uad6d\uc5b4", parsePosition37);
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        int int47 = numberFormat46.getMaximumIntegerDigits();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        boolean boolean50 = numberFormat49.isGroupingUsed();
        java.util.Currency currency51 = numberFormat49.getCurrency();
        numberFormat46.setCurrency(currency51);
        java.util.Currency currency53 = numberFormat46.getCurrency();
        java.math.RoundingMode roundingMode54 = numberFormat46.getRoundingMode();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) 'a');
        java.lang.String str58 = parsePosition57.toString();
        java.lang.String str59 = parsePosition57.toString();
        java.lang.Object obj60 = numberFormat46.parseObject("zho", parsePosition57);
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.lang.String str63 = locale61.toLanguageTag();
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale64.getISO3Language();
        java.lang.String str67 = locale61.getDisplayScript(locale64);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category71 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale72 = java.util.Locale.getDefault(category71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale73);
        java.util.Locale.setDefault(category71, locale73);
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category71, locale76);
        java.lang.String str78 = locale70.getDisplayLanguage(locale76);
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getInstance(locale70);
        int int80 = numberFormat79.getMinimumIntegerDigits();
        properFractionFormat69.setWholeFormat(numberFormat79);
        java.text.NumberFormat numberFormat82 = properFractionFormat69.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat46, numberFormat82);
        numberFormat82.setMaximumFractionDigits((int) (short) 10000);
        boolean boolean86 = fraction2.equals((java.lang.Object) (short) 10000);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(number40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str59, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str62, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh-TW" + "'", str63, "zh-TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "zho" + "'", str66, "zho");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertTrue("'" + category71 + "' != '" + java.util.Locale.Category.FORMAT + "'", category71.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "anglais" + "'", str78, "anglais");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale15.getVariant();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.setScript("");
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale21.getDisplayLanguage(locale23);
        java.util.Locale.Builder builder25 = builder20.setLocale(locale21);
        java.lang.String str26 = locale15.getDisplayVariant(locale21);
        java.lang.String str27 = locale21.getScript();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale21);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.lang.String str31 = locale21.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale12.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinesisch" + "'", str24, "Chinesisch");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        numberFormat1.setParseIntegerOnly(true);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((-1));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        fractionFormat4.setDenominatorFormat(numberFormat9);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str16 = fractionFormat14.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat17 = fractionFormat14.getNumeratorFormat();
        numberFormat17.setMaximumFractionDigits((int) (short) -1);
        int int20 = numberFormat17.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        boolean boolean24 = numberFormat23.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat29.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition33);
        properFractionFormat25.setNumeratorFormat(numberFormat29);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str43 = fractionFormat41.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat44 = fractionFormat41.getNumeratorFormat();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Locale locale46 = locale45.stripExtensions();
        java.util.Locale locale48 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        java.lang.String str50 = locale48.getDisplayCountry();
        java.lang.String str51 = locale45.getDisplayName(locale48);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getISO3Language();
        java.lang.String str56 = locale52.getDisplayScript(locale54);
        java.lang.String str57 = locale45.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale45);
        fractionFormat41.setNumeratorFormat(numberFormat58);
        properFractionFormat38.setWholeFormat(numberFormat58);
        properFractionFormat25.setWholeFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        java.lang.String[] strArray68 = java.util.Locale.getISOCountries();
        boolean boolean69 = numberFormat67.equals((java.lang.Object) strArray68);
        java.lang.String str71 = numberFormat67.format((double) (byte) -1);
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = locale73.getDisplayScript();
        java.lang.String str75 = locale72.getDisplayCountry(locale73);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale72);
        numberFormat76.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat67, numberFormat76);
        properFractionFormat21.setWholeFormat(numberFormat67);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) 'a');
        java.lang.String str84 = parsePosition83.toString();
        java.lang.String str85 = parsePosition83.toString();
        java.lang.Object obj86 = properFractionFormat21.parseObject("zh-tw", parsePosition83);
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getNumberInstance(locale87);
        properFractionFormat21.setNumeratorFormat(numberFormat88);
        boolean boolean90 = numberFormat88.isParseIntegerOnly();
        fractionFormat4.setNumeratorFormat(numberFormat88);
        int int92 = numberFormat88.getMinimumFractionDigits();
        java.lang.Object obj93 = numberFormat88.clone();
        boolean boolean94 = numberFormat88.isGroupingUsed();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100 0 / 1" + "'", str16, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100 0 / 1" + "'", str43, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "French" + "'", str51, "French");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str57, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-100%" + "'", str71, "-100%");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Japan" + "'", str75, "Japan");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str84, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str85, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Currency currency8 = numberFormat7.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.lang.Object obj10 = numberFormat7.clone();
        int int11 = numberFormat7.getMaximumIntegerDigits();
        java.lang.Object obj12 = numberFormat7.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        numberFormat10.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction15 = fractionFormat13.parse("97");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"97\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat6 = properFractionFormat5.getWholeFormat();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = numberFormat8.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj19 = numberFormat14.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition18);
        properFractionFormat10.setNumeratorFormat(numberFormat14);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str28 = fractionFormat26.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat29 = fractionFormat26.getNumeratorFormat();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale30);
        fractionFormat26.setNumeratorFormat(numberFormat43);
        properFractionFormat23.setWholeFormat(numberFormat43);
        properFractionFormat10.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) strArray53);
        java.lang.String str56 = numberFormat52.format((double) (byte) -1);
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.lang.String str60 = locale57.getDisplayCountry(locale58);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getNumberInstance(locale57);
        numberFormat61.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43, numberFormat52, numberFormat61);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        boolean boolean71 = numberFormat70.isGroupingUsed();
        properFractionFormat68.setWholeFormat(numberFormat70);
        java.text.NumberFormat numberFormat73 = properFractionFormat68.getWholeFormat();
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number77 = numberFormat73.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition76);
        parsePosition76.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction80 = properFractionFormat64.parse("\u65e5\u6587\u65e5\u672c)", parsePosition76);
        java.text.NumberFormat numberFormat81 = properFractionFormat64.getWholeFormat();
        java.util.Locale.Category category82 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale83 = java.util.Locale.getDefault(category82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale84);
        java.util.Locale.setDefault(category82, locale84);
        java.util.Locale locale87 = java.util.Locale.getDefault(category82);
        java.util.Locale.Category category88 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.lang.String str90 = locale89.getISO3Language();
        java.util.Locale.setDefault(category88, locale89);
        java.util.Locale.setDefault(category82, locale89);
        java.util.Locale locale93 = java.util.Locale.ITALIAN;
        java.lang.String str94 = locale93.getISO3Country();
        java.text.NumberFormat numberFormat95 = java.text.NumberFormat.getIntegerInstance(locale93);
        java.util.Locale.setDefault(category82, locale93);
        java.text.NumberFormat numberFormat97 = java.text.NumberFormat.getNumberInstance(locale93);
        properFractionFormat64.setDenominatorFormat(numberFormat97);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator99 = numberFormat6.formatToCharacterIterator((java.lang.Object) numberFormat97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100 0 / 1" + "'", str28, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "French" + "'", str36, "French");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str42, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-100%" + "'", str56, "-100%");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Japan" + "'", str60, "Japan");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertNull(fraction80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + category82 + "' != '" + java.util.Locale.Category.FORMAT + "'", category82.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "fr");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category88 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category88.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "kor" + "'", str90, "kor");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "it");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(numberFormat95);
        org.junit.Assert.assertNotNull(numberFormat97);
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj21 = numberFormat16.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition20);
        java.lang.String str22 = parsePosition20.toString();
        java.lang.Number number23 = numberFormat4.parse("Chinese", parsePosition20);
        java.lang.String str25 = numberFormat4.format((double) (short) 10);
        boolean boolean26 = numberFormat4.isGroupingUsed();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        boolean boolean29 = numberFormat28.isGroupingUsed();
        numberFormat28.setGroupingUsed(true);
        int int32 = numberFormat28.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat28);
        java.lang.Object obj34 = numberFormat28.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str22, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1,000%" + "'", str25, "1,000%");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (-0.016666668f));
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        int int8 = fraction7.intValue();
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field9, (int) '#');
        java.text.Format.Field field12 = fieldPosition11.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction15.add(fraction22);
        boolean boolean25 = field12.equals((java.lang.Object) fraction15);
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction15);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction7.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.NumberFormat.Field field31 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field31);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        boolean boolean35 = field31.equals((java.lang.Object) locale33);
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition((java.text.Format.Field) field31, (int) '#');
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field31);
        int int39 = fieldPosition38.getBeginIndex();
        fieldPosition38.setEndIndex(32);
        fieldPosition38.setBeginIndex(599);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer44 = properFractionFormat3.format(fraction29, stringBuffer30, fieldPosition38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 / 120" + "'", str26, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        java.lang.Number number19 = numberFormat1.parse("\ud55c\uad6d\uc5b4", parsePosition16);
        java.lang.Object obj20 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits((int) (short) 1);
        java.math.RoundingMode roundingMode23 = numberFormat1.getRoundingMode();
        java.lang.Object obj25 = numberFormat1.parseObject("0%");
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.Object obj29 = numberFormat27.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getCurrencyInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.util.Locale locale35 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.lang.String str38 = fractionFormat36.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat39 = fractionFormat36.getNumeratorFormat();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Locale locale43 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale43);
        java.lang.String str45 = locale43.getDisplayCountry();
        java.lang.String str46 = locale40.getDisplayName(locale43);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayScript();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale49.getISO3Language();
        java.lang.String str51 = locale47.getDisplayScript(locale49);
        java.lang.String str52 = locale40.getDisplayLanguage(locale49);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale40);
        fractionFormat36.setNumeratorFormat(numberFormat53);
        properFractionFormat33.setWholeFormat(numberFormat53);
        fractionFormat30.setNumeratorFormat(numberFormat53);
        java.lang.String str58 = numberFormat53.format((-1.0d));
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getCurrencyInstance(locale59);
        boolean boolean63 = numberFormat62.isParseIntegerOnly();
        java.math.RoundingMode roundingMode64 = numberFormat62.getRoundingMode();
        java.lang.Object obj65 = numberFormat62.clone();
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition((int) 'a');
        java.lang.String str68 = parsePosition67.toString();
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder69.clearExtensions();
        java.util.Locale.Builder builder71 = builder69.clear();
        java.util.Locale.Builder builder72 = builder71.clear();
        boolean boolean73 = parsePosition67.equals((java.lang.Object) builder72);
        java.util.Locale.Builder builder75 = builder72.setVariant("Japan");
        java.util.Locale.Builder builder76 = builder75.clearExtensions();
        boolean boolean77 = numberFormat62.equals((java.lang.Object) builder75);
        java.math.RoundingMode roundingMode78 = numberFormat62.getRoundingMode();
        numberFormat53.setRoundingMode(roundingMode78);
        numberFormat1.setRoundingMode(roundingMode78);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + 0L + "'", obj25, 0L);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100 0 / 1" + "'", str38, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "French" + "'", str46, "French");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str52, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1" + "'", str58, "-1");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str68, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + roundingMode78 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode78.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale3.getDisplayName(locale6);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.lang.String str15 = locale3.getDisplayLanguage(locale12);
        java.lang.String str16 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str18 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str20 = locale1.getDisplayVariant(locale3);
        java.lang.String str21 = null; // flaky: locale1.getISO3Language();
        boolean boolean22 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "French" + "'", str9, "French");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str15, "\ud504\ub791\uc2a4\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertNotNull(numberFormat17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) 'a');
        java.lang.String str2 = parsePosition1.toString();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder5.clear();
        boolean boolean7 = parsePosition1.equals((java.lang.Object) builder6);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale13 = java.util.Locale.getDefault(category8);
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean16 = parsePosition1.equals((java.lang.Object) locale13);
        java.lang.String str17 = locale13.getCountry();
        java.lang.String str18 = locale13.getDisplayName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.divide(fraction7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        boolean boolean11 = numberFormat10.isGroupingUsed();
        java.util.Currency currency12 = numberFormat10.getCurrency();
        int int13 = numberFormat10.getMinimumFractionDigits();
        int int14 = numberFormat10.getMinimumIntegerDigits();
        java.lang.Object obj15 = numberFormat10.clone();
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat16);
        boolean boolean18 = fraction7.equals((java.lang.Object) numberFormat10);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction24.add(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction19.multiply(fraction30);
        float float35 = fraction30.floatValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction7.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction7.negate();
        float float38 = fraction37.floatValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 / 1" + "'", str20, "1 / 1");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.008333334f + "'", float35 == 0.008333334f);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.01f + "'", float38 == 0.01f);
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getDenominatorFormat();
        java.lang.Number number23 = numberFormat21.parse("-100%");
        int int24 = numberFormat21.getMaximumIntegerDigits();
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition(100);
        java.text.Format.Field field29 = fieldPosition28.getFieldAttribute();
        fieldPosition28.setBeginIndex((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer32 = numberFormat21.format((-1L), stringBuffer26, fieldPosition28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-100L) + "'", number23, (-100L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNull(field29);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat9.parse("\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"????????? (??????)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition13);
        java.text.NumberFormat numberFormat26 = fractionFormat1.getNumeratorFormat();
        int int27 = numberFormat26.getMaximumIntegerDigits();
        numberFormat26.setMinimumIntegerDigits((int) (byte) -119);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale31);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale34);
        java.util.Currency currency37 = numberFormat36.getCurrency();
        numberFormat36.setMinimumIntegerDigits(1);
        numberFormat36.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj45 = numberFormat36.parseObject("Japan", parsePosition44);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException49 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str50 = fractionConversionException49.getPattern();
        java.lang.Throwable[] throwableArray51 = fractionConversionException49.getSuppressed();
        java.lang.Object[] objArray52 = fractionConversionException49.getArguments();
        boolean boolean53 = parsePosition44.equals((java.lang.Object) objArray52);
        int int54 = parsePosition44.getIndex();
        int int55 = parsePosition44.getIndex();
        java.lang.Object obj56 = fractionFormat32.parseObject("\ud55c\uad6d\uc5b4", parsePosition44);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.lang.String str63 = numberFormat59.format(0.008333333333333333d);
        boolean boolean64 = numberFormat59.isParseIntegerOnly();
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj68 = numberFormat59.parseObject("\u65e5\u6587", parsePosition67);
        int int69 = parsePosition67.getIndex();
        java.lang.Object obj70 = fractionFormat32.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition67);
        parsePosition67.setIndex(97);
        java.lang.String str73 = parsePosition67.toString();
        java.lang.Number number74 = numberFormat26.parse("x-lvariant-fr", parsePosition67);
        numberFormat26.setMinimumFractionDigits((int) (short) 32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "TWD");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str50, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1%" + "'", str63, "1%");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=1]" + "'", str73, "java.text.ParsePosition[index=97,errorIndex=1]");
        org.junit.Assert.assertNull(number74);
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        int int5 = numberFormat4.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        java.lang.String str30 = numberFormat27.format((long) 600);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.text.AttributedCharacterIterator attributedCharacterIterator35 = numberFormat32.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj36 = numberFormat32.clone();
        numberFormat32.setMaximumFractionDigits(2147483647);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat41, numberFormat43);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj48 = numberFormat43.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition47);
        java.lang.String str49 = parsePosition47.toString();
        java.lang.Number number50 = numberFormat32.parse("\ud55c\uad6d\uc5b4", parsePosition47);
        int int51 = numberFormat32.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat32);
        numberFormat27.setParseIntegerOnly(true);
        numberFormat27.setMaximumIntegerDigits((int) (short) 0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat58.getDenominatorFormat();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat62, numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj69 = numberFormat64.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition68);
        java.lang.String str70 = parsePosition68.toString();
        boolean boolean72 = parsePosition68.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        parsePosition68.setErrorIndex(2147483647);
        java.lang.Object obj75 = numberFormat59.parseObject("\u4e2d\u6587\u4e2d\u570b)", parsePosition68);
        parsePosition68.setIndex(10);
        parsePosition68.setErrorIndex((int) (short) 10);
        java.lang.Object obj80 = numberFormat27.parseObject("java.text.NumberFormat$Field(exponent sign)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat6.parse("DEU", parsePosition68);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "French" + "'", str20, "French");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str26, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "600" + "'", str30, "600");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(attributedCharacterIterator35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str70, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNull(fraction81);
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale locale57 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale57);
        java.lang.String str59 = locale57.getDisplayCountry();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getIntegerInstance(locale57);
        java.lang.String str61 = locale54.getDisplayCountry(locale57);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale54);
        properFractionFormat53.setWholeFormat(numberFormat62);
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getInstance(locale64);
        java.util.Set<java.lang.Character> charSet66 = locale64.getExtensionKeys();
        java.util.Locale locale70 = new java.util.Locale("", "97", "java.text.ParseException: 20 / 7");
        java.lang.String str71 = locale70.getScript();
        java.lang.String str72 = locale64.getDisplayCountry(locale70);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder74 = builder73.clearExtensions();
        java.util.Locale.Builder builder76 = builder73.setVariant("");
        java.util.Locale.Builder builder78 = builder73.setScript("");
        java.util.Locale locale79 = builder73.build();
        java.lang.String str80 = locale70.getDisplayVariant(locale79);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getIntegerInstance(locale70);
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getCurrencyInstance(locale70);
        properFractionFormat53.setWholeFormat(numberFormat82);
        numberFormat82.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "France" + "'", str61, "France");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertEquals(locale70.toString(), "_97_java.text.ParseException: 20 / 7");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "java.text.ParseException: 20 / 7" + "'", str80, "java.text.ParseException: 20 / 7");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        long long27 = fraction25.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        long long39 = fraction37.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction33.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction25.subtract(fraction40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction15.add(fraction44);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction15.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        numberFormat1.setParseIntegerOnly(true);
        numberFormat1.setMaximumIntegerDigits(51);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale11 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category4, locale11);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction16.add(fraction22);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.divide(fraction28);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str33 = locale31.getScript();
        boolean boolean34 = fraction30.equals((java.lang.Object) locale31);
        java.util.Locale.setDefault(category4, locale31);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat39);
        numberFormat39.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field44);
        java.lang.String str46 = fieldPosition45.toString();
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.lang.String str50 = locale47.getDisplayName(locale48);
        boolean boolean51 = fieldPosition45.equals((java.lang.Object) locale48);
        fieldPosition45.setEndIndex((int) '#');
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance(locale54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction60 = properFractionFormat56.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition59);
        boolean boolean61 = fieldPosition45.equals((java.lang.Object) parsePosition59);
        java.lang.Number number62 = numberFormat39.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition59);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction66.abs();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        boolean boolean72 = numberFormat70.equals((java.lang.Object) locale71);
        boolean boolean73 = fraction68.equals((java.lang.Object) locale71);
        boolean boolean74 = parsePosition59.equals((java.lang.Object) locale71);
        java.util.Locale.setDefault(category4, locale71);
        java.lang.String str76 = locale71.getVariant();
        java.util.Locale.setDefault(category0, locale71);
        java.lang.String str78 = locale71.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals(locale11.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str46, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese (Taiwan)" + "'", str50, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(fraction60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fr" + "'", str78, "fr");
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.lang.String str36 = fieldPosition35.toString();
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayName(locale38);
        boolean boolean41 = fieldPosition35.equals((java.lang.Object) locale38);
        fieldPosition35.setEndIndex((int) '#');
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat46.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition49);
        boolean boolean51 = fieldPosition35.equals((java.lang.Object) parsePosition49);
        java.lang.String str52 = parsePosition49.toString();
        int int53 = parsePosition49.getIndex();
        org.apache.commons.math.fraction.Fraction fraction54 = fractionFormat4.parse("Canada", parsePosition49);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = locale55.getScript();
        java.util.Locale locale60 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str61 = locale55.getDisplayScript(locale60);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getNumberInstance(locale60);
        java.util.Set<java.lang.String> strSet63 = locale60.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet64 = locale60.getExtensionKeys();
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.PRC;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale60.getDisplayName(locale65);
        java.util.Locale locale69 = locale65.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = locale71.getDisplayScript();
        java.lang.String str73 = locale70.getDisplayCountry(locale71);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale69.getDisplayVariant(locale71);
        java.lang.String str76 = locale69.getDisplayCountry();
        java.lang.String str77 = locale69.getScript();
        java.lang.String str78 = locale69.getLanguage();
        java.util.Locale locale82 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleKeys();
        java.lang.String str84 = locale69.getDisplayVariant(locale82);
        boolean boolean85 = parsePosition49.equals((java.lang.Object) locale69);
        parsePosition49.setIndex((int) (byte) 17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str26, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str36, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (Taiwan)" + "'", str40, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str52, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale60.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str67, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str68, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Japan" + "'", str73, "Japan");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Canada" + "'", str76, "Canada");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "en" + "'", str78, "en");
        org.junit.Assert.assertEquals(locale82.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.Class<?> wildcardClass9 = numberFormat8.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        long long5 = fraction3.longValue();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction0.divide(fraction3);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction15.add(fraction21);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction10.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.ONE;
        long long27 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction10.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction9.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction6.divide(fraction28);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1 / 1" + "'", str11, "1 / 1");
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        org.apache.commons.math.fraction.Fraction fraction21 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((int) 'a');
        fieldPosition24.setBeginIndex((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer27 = properFractionFormat3.format(fraction21, stringBuffer22, fieldPosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        properFractionFormat11.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getWholeFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number20 = numberFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        parsePosition19.setErrorIndex(0);
        int int23 = parsePosition19.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat7.parse("\u65e5\u6587", parsePosition19);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale29);
        java.util.Currency currency32 = numberFormat31.getCurrency();
        numberFormat31.setMinimumIntegerDigits(1);
        numberFormat31.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat31.parseObject("Japan", parsePosition39);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException44 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str45 = fractionConversionException44.getPattern();
        java.lang.Throwable[] throwableArray46 = fractionConversionException44.getSuppressed();
        java.lang.Object[] objArray47 = fractionConversionException44.getArguments();
        boolean boolean48 = parsePosition39.equals((java.lang.Object) objArray47);
        int int49 = parsePosition39.getIndex();
        int int50 = parsePosition39.getIndex();
        java.lang.Object obj51 = fractionFormat27.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition39);
        int int52 = parsePosition39.getIndex();
        java.lang.String str53 = parsePosition39.toString();
        java.text.ParseException parseException56 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int57 = parseException56.getErrorOffset();
        java.lang.Throwable[] throwableArray58 = parseException56.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException62 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) 117, (long) 0);
        parseException56.addSuppressed((java.lang.Throwable) fractionConversionException62);
        boolean boolean64 = parsePosition39.equals((java.lang.Object) parseException56);
        java.lang.Object obj65 = properFractionFormat7.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 35 to fraction after 35 iterations", parsePosition39);
        int int66 = parsePosition39.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(number20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "TWD");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str45, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str53, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale14 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        java.util.Locale locale20 = new java.util.Locale("java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale.setDefault(category0, locale20);
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale25);
        java.util.Locale.setDefault(category23, locale25);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale28.getDisplayScript(locale29);
        java.util.Locale.setDefault(category23, locale28);
        java.util.Locale locale35 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category23, locale35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale37.getDisplayCountry();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale40.getISO3Language();
        java.lang.String str43 = locale37.getDisplayScript(locale40);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale40);
        java.util.Locale.setDefault(category23, locale40);
        java.util.Locale locale48 = new java.util.Locale("0 / 1", "\u53f0\u6e7e");
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = locale49.getScript();
        java.util.Locale locale54 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.lang.String str57 = locale49.getCountry();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale58.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.PRC;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale58.getDisplayCountry(locale60);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale64.getISO3Language();
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleKeys();
        java.lang.String str67 = locale64.getDisplayLanguage();
        java.lang.String str68 = locale58.getDisplayScript(locale64);
        java.lang.String str69 = locale49.getDisplayScript(locale58);
        java.lang.String str70 = locale48.getDisplayName(locale49);
        java.util.Locale.setDefault(category23, locale48);
        java.lang.String str72 = locale20.getDisplayScript(locale48);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals(locale14.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals(locale20.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale35.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zho" + "'", str42, "zho");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals(locale54.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str62, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "kor" + "'", str65, "kor");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u53f0\u6e7e)" + "'", str70, "\u53f0\u6e7e)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str11 = locale2.getDisplayLanguage(locale6);
        java.util.Locale locale12 = locale2.stripExtensions();
        java.lang.String str13 = locale2.getCountry();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.setDefault(category14, locale19);
        java.util.Locale locale26 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category14, locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale28.getDisplayCountry();
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str34 = locale28.getDisplayScript(locale31);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale31);
        java.util.Locale.setDefault(category14, locale31);
        java.lang.String str37 = locale2.getDisplayName(locale31);
        java.lang.String str38 = locale31.getVariant();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(locale26.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zho" + "'", str33, "zho");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str37, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        java.util.Locale.setDefault(category5, locale10);
        java.util.Locale locale17 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category5, locale17);
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field20, 1);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field20, (int) (short) 100);
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale26.getDisplayCountry(locale27);
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        boolean boolean32 = field20.equals((java.lang.Object) locale27);
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field20);
        java.text.Format.Field field34 = fieldPosition33.getFieldAttribute();
        int int35 = fieldPosition33.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = numberFormat4.format((java.lang.Object) locale17, stringBuffer19, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ub300\ub9cc" + "'", str3, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale17.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japan" + "'", str29, "Japan");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fr");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale1.getDisplayLanguage(locale2);
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleKeys();
        java.lang.String str6 = locale1.getCountry();
        java.lang.String str7 = locale1.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str9 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais" + "'", str4, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode9 = numberFormat5.getRoundingMode();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        java.text.NumberFormat numberFormat68 = properFractionFormat67.getWholeFormat();
        int int69 = numberFormat68.getMaximumFractionDigits();
        numberFormat68.setMaximumIntegerDigits((int) (byte) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat68);
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field75);
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field75, (int) (short) 0);
        java.text.Format.Field field79 = fieldPosition78.getFieldAttribute();
        fieldPosition78.setBeginIndex(60);
        int int82 = fieldPosition78.getField();
        int int83 = fieldPosition78.getField();
        int int84 = fieldPosition78.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer85 = numberFormat5.format((double) (byte) 97, stringBuffer74, fieldPosition78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Italian" + "'", str39, "Italian");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str45, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertNotNull(field79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        boolean boolean7 = numberFormat6.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        boolean boolean9 = numberFormat6.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat6);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.util.Currency currency14 = numberFormat12.getCurrency();
        fractionFormat10.setNumeratorFormat(numberFormat12);
        java.text.NumberFormat numberFormat16 = fractionFormat10.getDenominatorFormat();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        numberFormat22.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency25 = numberFormat22.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22);
        java.lang.Number number28 = numberFormat22.parse("9,700%");
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str32 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction31);
        float float33 = fraction31.floatValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction31.negate();
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        int int41 = numberFormat39.getMaximumFractionDigits();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39, numberFormat43);
        boolean boolean48 = fraction34.equals((java.lang.Object) fractionFormat47);
        java.text.NumberFormat numberFormat49 = fractionFormat47.getNumeratorFormat();
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52, numberFormat54);
        numberFormat54.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field59);
        java.lang.String str61 = fieldPosition60.toString();
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str65 = locale62.getDisplayName(locale63);
        boolean boolean66 = fieldPosition60.equals((java.lang.Object) locale63);
        fieldPosition60.setEndIndex((int) '#');
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getCurrencyInstance(locale69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat71.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition74);
        boolean boolean76 = fieldPosition60.equals((java.lang.Object) parsePosition74);
        java.lang.Number number77 = numberFormat54.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition74);
        int int78 = parsePosition74.getIndex();
        java.lang.String str79 = parsePosition74.toString();
        java.lang.Object obj80 = null;
        boolean boolean81 = parsePosition74.equals(obj80);
        java.lang.Object obj82 = numberFormat49.parseObject("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition74);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale83);
        boolean boolean85 = numberFormat84.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat84);
        numberFormat84.setMaximumFractionDigits((int) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat22, numberFormat49);
        java.util.Locale locale91 = java.util.Locale.JAPAN;
        java.util.Locale locale92 = java.util.Locale.ROOT;
        java.lang.String str93 = locale92.getDisplayScript();
        java.lang.String str94 = locale91.getDisplayCountry(locale92);
        java.text.NumberFormat numberFormat95 = java.text.NumberFormat.getInstance(locale92);
        java.util.Currency currency96 = numberFormat95.getCurrency();
        numberFormat22.setCurrency(currency96);
        numberFormat2.setCurrency(currency96);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + number28 + "' != '" + 9700L + "'", number28, 9700L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1 / 1" + "'", str32, "1 / 1");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str61, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (Taiwan)" + "'", str65, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str79, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Japan" + "'", str94, "Japan");
        org.junit.Assert.assertNotNull(numberFormat95);
        org.junit.Assert.assertNotNull(currency96);
        org.junit.Assert.assertEquals(currency96.toString(), "XXX");
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.lang.String str6 = locale1.getDisplayScript();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale1);
        java.lang.String str9 = numberFormat7.format((double) 0.1f);
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field12);
        java.lang.String str14 = fieldPosition13.toString();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayName(locale16);
        boolean boolean19 = fieldPosition13.equals((java.lang.Object) locale16);
        int int20 = fieldPosition13.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer21 = numberFormat7.format((double) 600, stringBuffer11, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10%" + "'", str9, "10%");
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str14, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (Taiwan)" + "'", str18, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        numberFormat4.setMinimumFractionDigits((int) (byte) 0);
        numberFormat4.setMinimumFractionDigits(60);
        numberFormat4.setMinimumFractionDigits(35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        java.util.Locale locale2 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        boolean boolean6 = numberFormat5.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits((int) (byte) -120);
        boolean boolean10 = numberFormat3.equals((java.lang.Object) (byte) -120);
        numberFormat3.setMaximumIntegerDigits((int) (short) -32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        org.junit.Assert.assertEquals(locale2.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        numberFormat27.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str31 = numberFormat27.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        java.text.NumberFormat numberFormat33 = fractionFormat32.getNumeratorFormat();
        java.lang.String str35 = numberFormat33.format(1.0d);
        java.lang.String str37 = numberFormat33.format((long) 117);
        properFractionFormat22.setWholeFormat(numberFormat33);
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        int int44 = numberFormat43.getMaximumIntegerDigits();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        java.util.Currency currency48 = numberFormat46.getCurrency();
        numberFormat43.setCurrency(currency48);
        java.lang.Object obj50 = numberFormat43.clone();
        boolean boolean51 = numberFormat43.isGroupingUsed();
        properFractionFormat22.setWholeFormat(numberFormat43);
        java.text.NumberFormat.Field field53 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field53);
        java.lang.String str55 = fieldPosition54.toString();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayName(locale57);
        boolean boolean60 = fieldPosition54.equals((java.lang.Object) locale57);
        java.text.NumberFormat.Field field61 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field61);
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition((java.text.Format.Field) field61, (int) (byte) 10);
        boolean boolean65 = fieldPosition54.equals((java.lang.Object) field61);
        java.text.NumberFormat.Field field66 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition((java.text.Format.Field) field66, (int) '#');
        java.text.Format.Field field69 = fieldPosition68.getFieldAttribute();
        boolean boolean70 = field61.equals((java.lang.Object) fieldPosition68);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Locale locale72 = locale71.stripExtensions();
        boolean boolean73 = field61.equals((java.lang.Object) locale72);
        java.lang.String str74 = locale72.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale72);
        java.text.NumberFormat numberFormat76 = fractionFormat75.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = properFractionFormat22.format((java.lang.Object) numberFormat76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0%" + "'", str31, "0%");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100%" + "'", str35, "100%");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "11,700%" + "'", str37, "11,700%");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str55, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (Taiwan)" + "'", str59, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(field61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(field66);
        org.junit.Assert.assertNotNull(field69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str74, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = locale9.getDisplayScript(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale9);
        int int18 = numberFormat17.getMaximumFractionDigits();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        numberFormat19.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode22 = numberFormat19.getRoundingMode();
        numberFormat17.setRoundingMode(roundingMode22);
        properFractionFormat2.setWholeFormat(numberFormat17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + roundingMode22 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode22.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        numberFormat25.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str29 = numberFormat25.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        int int31 = numberFormat25.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat25);
        java.lang.String str34 = numberFormat25.format(1728000.0d);
        boolean boolean35 = numberFormat25.isGroupingUsed();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (Taiwan)" + "'", str12, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str18, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "172,800,000%" + "'", str34, "172,800,000%");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.lang.String str17 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction26.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str46 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction26.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        long long58 = fraction56.longValue();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction52.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        long long70 = fraction68.longValue();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction64.multiply(fraction68);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction56.subtract(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str76 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction75);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction56.subtract(fraction75);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction45.divide(fraction77);
        int int79 = fraction77.intValue();
        long long80 = fraction77.longValue();
        int int81 = fraction77.getNumerator();
        java.lang.String str82 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction77);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction6.divide(fraction77);
        int int84 = fraction77.intValue();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1 / 120" + "'", str17, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 / 100" + "'", str46, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1 / 100" + "'", str76, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 11 + "'", int81 == 11);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "11 / 600" + "'", str82, "11 / 600");
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction16.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        int int46 = fraction40.intValue();
        float float47 = fraction40.floatValue();
        int int48 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction40.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction19.divide(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction50.add(fraction53);
        java.lang.String str55 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction59.add(fraction65);
        int int69 = fraction65.getNumerator();
        int int70 = fraction65.intValue();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction65.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction53.add(fraction65);
        long long73 = fraction65.longValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.016666668f + "'", float47 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "10 / 1" + "'", str55, "10 / 1");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale8.getDisplayScript(locale10);
        java.lang.String str12 = locale3.getDisplayScript(locale10);
        java.lang.String str13 = locale10.getDisplayLanguage();
        java.lang.Object obj14 = locale10.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u6cd5\u6587" + "'", str13, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "fr_CA");
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        boolean boolean17 = numberFormat16.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat22.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition26);
        properFractionFormat18.setNumeratorFormat(numberFormat22);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str36 = fractionFormat34.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat37 = fractionFormat34.getNumeratorFormat();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        fractionFormat34.setNumeratorFormat(numberFormat51);
        properFractionFormat31.setWholeFormat(numberFormat51);
        properFractionFormat18.setWholeFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        numberFormat51.setGroupingUsed(true);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        java.util.Currency currency61 = numberFormat59.getCurrency();
        int int62 = numberFormat59.getMinimumFractionDigits();
        int int63 = numberFormat59.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat51, numberFormat59);
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.negate();
        long long75 = fraction73.longValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction70.subtract(fraction73);
        org.apache.commons.math.fraction.Fraction fraction79 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction82 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.negate();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction79.multiply(fraction83);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction76.add(fraction83);
        java.lang.String str86 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction76);
        java.lang.String str87 = numberFormat59.format((java.lang.Object) fraction76);
        numberFormat59.setParseIntegerOnly(true);
        boolean boolean90 = numberFormat59.isGroupingUsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number92 = numberFormat59.parse("ja_JP");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"ja_JP\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100 0 / 1" + "'", str36, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (Taiwan)" + "'", str44, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str50, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1 / 60" + "'", str86, "1 / 60");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2%" + "'", str87, "2%");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        int int1 = numberFormat0.getMaximumFractionDigits();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        numberFormat9.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat3, numberFormat9);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        numberFormat14.setMaximumFractionDigits(100);
        java.lang.String str19 = numberFormat14.format((long) 100);
        int int20 = numberFormat14.getMaximumFractionDigits();
        numberFormat14.setMinimumFractionDigits((int) (short) 0);
        int int23 = numberFormat14.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode24 = numberFormat14.getRoundingMode();
        numberFormat14.setGroupingUsed(false);
        java.lang.Object obj27 = numberFormat14.clone();
        properFractionFormat12.setNumeratorFormat(numberFormat14);
        java.text.NumberFormat numberFormat29 = properFractionFormat12.getDenominatorFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat12.getDenominatorFormat();
        java.text.NumberFormat numberFormat31 = properFractionFormat12.getNumeratorFormat();
        numberFormat31.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        double double46 = fraction45.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction45.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        long long62 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction56.multiply(fraction60);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        long long74 = fraction72.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction68.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction60.subtract(fraction75);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction75.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction50.subtract(fraction79);
        org.apache.commons.math.fraction.Fraction fraction81 = fraction45.add(fraction80);
        java.lang.StringBuffer stringBuffer82 = null;
        java.text.FieldPosition fieldPosition84 = new java.text.FieldPosition((-1));
        java.text.Format.Field field85 = fieldPosition84.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer86 = numberFormat31.format((java.lang.Object) fraction45, stringBuffer82, fieldPosition84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10,000%" + "'", str19, "10,000%");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 6.944444444444444E-5d + "'", double46 == 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNull(field85);
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj21 = numberFormat16.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition20);
        java.lang.String str22 = parsePosition20.toString();
        java.lang.Number number23 = numberFormat4.parse("Chinese", parsePosition20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat28);
        numberFormat28.setMaximumIntegerDigits(1728000);
        int int33 = numberFormat28.getMinimumIntegerDigits();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        int int37 = parsePosition36.getErrorIndex();
        java.lang.String str38 = parsePosition36.toString();
        java.lang.Object obj39 = numberFormat28.parseObject("\244 100.00", parsePosition36);
        int int40 = parsePosition36.getErrorIndex();
        parsePosition36.setIndex(1727999);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str22, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=-1]" + "'", str38, "java.text.ParsePosition[index=1,errorIndex=-1]");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        numberFormat4.setMinimumFractionDigits((int) (short) 1);
        boolean boolean16 = numberFormat4.isGroupingUsed();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale21);
        java.util.Currency currency24 = numberFormat23.getCurrency();
        numberFormat23.setMinimumIntegerDigits(1);
        numberFormat23.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj32 = numberFormat23.parseObject("Japan", parsePosition31);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException36 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str37 = fractionConversionException36.getPattern();
        java.lang.Throwable[] throwableArray38 = fractionConversionException36.getSuppressed();
        java.lang.Object[] objArray39 = fractionConversionException36.getArguments();
        boolean boolean40 = parsePosition31.equals((java.lang.Object) objArray39);
        int int41 = parsePosition31.getIndex();
        int int42 = parsePosition31.getIndex();
        java.lang.Object obj43 = fractionFormat19.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition31);
        int int44 = parsePosition31.getIndex();
        java.lang.Object obj45 = numberFormat4.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition31);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) 'a');
        java.lang.String str49 = parsePosition48.toString();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clearExtensions();
        java.util.Locale.Builder builder52 = builder50.clear();
        java.util.Locale.Builder builder53 = builder52.clear();
        boolean boolean54 = parsePosition48.equals((java.lang.Object) builder53);
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        java.util.Locale.setDefault(category55, locale57);
        java.util.Locale locale60 = java.util.Locale.getDefault(category55);
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale60);
        boolean boolean63 = parsePosition48.equals((java.lang.Object) locale60);
        java.lang.Number number64 = numberFormat4.parse("\ub3c5\uc77c", parsePosition48);
        int int65 = numberFormat4.getMaximumFractionDigits();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "TWD");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str37, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str49, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(number64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale8 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getField();
        java.text.Format.Field field13 = fieldPosition11.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        boolean boolean15 = field13.equals((java.lang.Object) fraction14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits(2147483647);
        int int19 = numberFormat16.getMaximumIntegerDigits();
        numberFormat16.setMaximumIntegerDigits((int) (short) 32);
        boolean boolean22 = fraction14.equals((java.lang.Object) numberFormat16);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        properFractionFormat32.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat37 = properFractionFormat32.getWholeFormat();
        properFractionFormat25.setWholeFormat(numberFormat37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.util.Currency currency47 = numberFormat46.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46);
        java.lang.Object obj49 = numberFormat46.clone();
        boolean boolean50 = numberFormat46.isParseIntegerOnly();
        properFractionFormat25.setWholeFormat(numberFormat46);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits(100);
        java.lang.String str58 = numberFormat53.format((long) 100);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat46, numberFormat53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat9, numberFormat46);
        java.lang.StringBuffer stringBuffer62 = null;
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition(120);
        java.text.Format.Field field65 = fieldPosition64.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer66 = numberFormat1.format((double) (-2L), stringBuffer62, fieldPosition64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale8.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10,000%" + "'", str58, "10,000%");
        org.junit.Assert.assertNull(field65);
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        numberFormat2.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj11 = numberFormat2.parseObject("Japan", parsePosition10);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str16 = fractionConversionException15.getPattern();
        java.lang.Throwable[] throwableArray17 = fractionConversionException15.getSuppressed();
        java.lang.Object[] objArray18 = fractionConversionException15.getArguments();
        boolean boolean19 = parsePosition10.equals((java.lang.Object) objArray18);
        int int20 = parsePosition10.getIndex();
        int int21 = parsePosition10.getIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat29 = properFractionFormat24.getWholeFormat();
        java.util.Currency currency30 = numberFormat29.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        boolean boolean32 = parsePosition10.equals((java.lang.Object) numberFormat29);
        numberFormat29.setMinimumFractionDigits(2);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayName(locale38);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        java.lang.String str47 = locale35.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale35);
        java.util.Currency currency49 = numberFormat48.getCurrency();
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        int int55 = numberFormat54.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54);
        numberFormat54.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode59 = numberFormat54.getRoundingMode();
        numberFormat48.setRoundingMode(roundingMode59);
        java.math.RoundingMode roundingMode61 = numberFormat48.getRoundingMode();
        numberFormat29.setRoundingMode(roundingMode61);
        boolean boolean63 = numberFormat29.isParseIntegerOnly();
        numberFormat29.setMinimumIntegerDigits((int) (short) 100);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str16, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode59.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.divide(fraction9);
        double double11 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction5.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction14 = fraction12.divide(fraction13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fraction must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.01d + "'", double11 == 0.01d);
        org.junit.Assert.assertNotNull(fraction12);
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str14 = locale7.getDisplayCountry(locale10);
        java.lang.String str15 = locale7.getLanguage();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder18 = builder3.setLanguageTag("fra");
        java.util.Locale.Builder builder19 = builder3.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setVariant("\ud504\ub791\uc2a4\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "France" + "'", str14, "France");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        numberFormat11.setMinimumIntegerDigits(0);
        numberFormat11.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str20 = numberFormat11.format((java.lang.Object) 100.0f);
        properFractionFormat4.setWholeFormat(numberFormat11);
        java.lang.Class<?> wildcardClass22 = properFractionFormat4.getClass();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
// flaky:         org.junit.Assert.assertEquals(currency1.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100 %" + "'", str3, "100 %");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long9 = fraction2.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20 / 7" + "'", str8, "20 / 7");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category0, locale6);
        java.lang.String str8 = locale6.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinese (taiwan)" + "'", str8, "chinese (taiwan)");
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        java.lang.Object obj27 = fractionFormat15.parseObject("\uc911\uad6d\uc5b4", parsePosition24);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat0.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition24);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.setDefault(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale29);
        properFractionFormat0.setDenominatorFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        java.lang.String str40 = locale35.toLanguageTag();
        java.util.Set<java.lang.String> strSet41 = locale35.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        properFractionFormat0.setWholeFormat(numberFormat43);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.setScript("");
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.lang.String str50 = locale48.toLanguageTag();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale51.getISO3Language();
        java.lang.String str54 = locale48.getDisplayScript(locale51);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale48.getDisplayCountry(locale55);
        java.util.Locale.Builder builder57 = builder45.setLocale(locale55);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale60.getISO3Language();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.lang.String str63 = locale58.toLanguageTag();
        java.lang.String str64 = locale58.getDisplayVariant();
        java.lang.String str65 = locale58.getVariant();
        java.util.Locale.Builder builder66 = builder57.setLocale(locale58);
        java.util.Locale locale67 = locale58.stripExtensions();
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getInstance(locale58);
        properFractionFormat0.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat70 = properFractionFormat0.getWholeFormat();
        numberFormat70.setMinimumFractionDigits((int) (short) 14400);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese" + "'", str30, "Chinese");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587" + "'", str49, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-TW" + "'", str50, "zh-TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zho" + "'", str53, "zho");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Taiwan" + "'", str56, "Taiwan");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "und" + "'", str63, "und");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat70);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat4 = fractionFormat1.getDenominatorFormat();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        numberFormat7.setMinimumIntegerDigits(1728000);
        boolean boolean10 = numberFormat7.isGroupingUsed();
        numberFormat7.setMaximumIntegerDigits((int) (short) 1);
        int int13 = numberFormat7.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale16);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        boolean boolean22 = numberFormat20.isParseIntegerOnly();
        int int23 = numberFormat20.getMaximumFractionDigits();
        numberFormat20.setMinimumIntegerDigits(52);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        numberFormat29.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.lang.String str36 = fieldPosition35.toString();
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayName(locale38);
        boolean boolean41 = fieldPosition35.equals((java.lang.Object) locale38);
        fieldPosition35.setEndIndex((int) '#');
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat46.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition49);
        boolean boolean51 = fieldPosition35.equals((java.lang.Object) parsePosition49);
        java.lang.Number number52 = numberFormat29.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition49);
        java.lang.String str54 = numberFormat29.format((long) '#');
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale55.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getISO3Language();
        java.lang.String str61 = locale55.getDisplayScript(locale58);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale55.getDisplayCountry(locale62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        java.math.RoundingMode roundingMode66 = numberFormat65.getRoundingMode();
        numberFormat29.setRoundingMode(roundingMode66);
        numberFormat20.setRoundingMode(roundingMode66);
        numberFormat20.setMaximumFractionDigits((-1));
        fractionFormat14.setNumeratorFormat(numberFormat20);
        java.text.NumberFormat.Field field73 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field73);
        java.lang.String str75 = fieldPosition74.toString();
        java.util.Locale locale76 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = locale77.getDisplayScript();
        java.lang.String str79 = locale76.getDisplayName(locale77);
        boolean boolean80 = fieldPosition74.equals((java.lang.Object) locale77);
        fieldPosition74.setEndIndex((int) '#');
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getCurrencyInstance(locale83);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat84);
        java.text.ParsePosition parsePosition88 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction89 = properFractionFormat85.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition88);
        boolean boolean90 = fieldPosition74.equals((java.lang.Object) parsePosition88);
        java.lang.String str91 = parsePosition88.toString();
        int int92 = parsePosition88.getIndex();
        int int93 = parsePosition88.getIndex();
        java.lang.Object obj94 = numberFormat20.parseObject("java.text.ParsePosition[index=0,errorIndex=3]", parsePosition88);
        fractionFormat1.setNumeratorFormat(numberFormat20);
        java.text.NumberFormat numberFormat96 = fractionFormat1.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japan" + "'", str18, "Japan");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str36, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (Taiwan)" + "'", str40, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(number52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "3,500.0000000000000000000000000000000000000000000000000000%" + "'", str54, "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese" + "'", str56, "Chinese");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-TW" + "'", str57, "zh-TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zho" + "'", str60, "zho");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Taiwan" + "'", str63, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + roundingMode66 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode66.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str75, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Chinese (Taiwan)" + "'", str79, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNull(fraction89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str91, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(numberFormat96);
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.lang.String str7 = locale4.toLanguageTag();
        java.lang.String str8 = locale4.getISO3Country();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-CN" + "'", str7, "zh-CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CHN" + "'", str8, "CHN");
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        java.lang.String str9 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet10 = locale0.getExtensionKeys();
        java.util.Set<java.lang.String> strSet11 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        long long12 = fraction8.longValue();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        boolean boolean21 = fraction8.equals((java.lang.Object) str20);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction30.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction30.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction8.divide(fraction30);
        long long53 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction(2, (int) (byte) 1);
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str59 = locale57.getISO3Language();
        java.util.Locale locale61 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str63 = locale61.getDisplayCountry();
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getIntegerInstance(locale61);
        java.lang.String str65 = locale57.getDisplayLanguage(locale61);
        boolean boolean66 = fraction56.equals((java.lang.Object) str65);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction8.subtract(fraction56);
        org.apache.commons.math.fraction.Fraction fraction70 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str71 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction70);
        long long72 = fraction70.longValue();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.abs();
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction78 = fraction73.divide(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction77.negate();
        org.apache.commons.math.fraction.Fraction fraction81 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction79.divide(fraction81);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction8.subtract(fraction79);
        float float84 = fraction83.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 / 100" + "'", str50, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zho" + "'", str59, "zho");
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese" + "'", str65, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1 / 100" + "'", str71, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 2.8654761f + "'", float84 == 2.8654761f);
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.String str16 = locale12.getVariant();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        java.util.Locale locale23 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str24 = locale17.getDisplayName(locale23);
        java.lang.String str25 = locale12.getDisplayName(locale23);
        java.lang.String str26 = locale23.getDisplayLanguage();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str19, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals(locale23.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (China)" + "'", str25, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "overflow trying to convert {0} to fraction ({1}/{2})" + "'", str26, "overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.util.Set<java.lang.Character> charSet34 = locale32.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale32.getDisplayVariant(locale35);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj49 = numberFormat44.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition48);
        java.lang.String str50 = parsePosition48.toString();
        boolean boolean52 = parsePosition48.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat39.parse("java.text.ParseException: zh_TW", parsePosition48);
        java.lang.Object obj54 = fractionFormat30.parseObject("Italian", parsePosition48);
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat7.parse("\uc77c\ubcf8,1 / 1)", parsePosition48);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = locale57.getDisplayScript(locale59);
        java.lang.String str62 = locale57.toLanguageTag();
        java.util.Set<java.lang.String> strSet63 = locale57.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale57);
        java.lang.Object obj65 = numberFormat64.clone();
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getInstance(locale67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat68, numberFormat70);
        numberFormat70.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field75);
        java.lang.String str77 = fieldPosition76.toString();
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.lang.String str80 = locale79.getDisplayScript();
        java.lang.String str81 = locale78.getDisplayName(locale79);
        boolean boolean82 = fieldPosition76.equals((java.lang.Object) locale79);
        fieldPosition76.setEndIndex((int) '#');
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getCurrencyInstance(locale85);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat86);
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction91 = properFractionFormat87.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition90);
        boolean boolean92 = fieldPosition76.equals((java.lang.Object) parsePosition90);
        java.lang.Number number93 = numberFormat70.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition90);
        java.lang.Object obj94 = numberFormat64.parseObject("\ud55c\uad6d\uc5b4", parsePosition90);
        parsePosition90.setIndex(10);
        org.apache.commons.math.fraction.Fraction fraction97 = properFractionFormat7.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=35,endIndex=35]", parsePosition90);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str50, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "und" + "'", str62, "und");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str77, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Chinese (Taiwan)" + "'", str81, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNull(fraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(number93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(fraction97);
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale5.toLanguageTag();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale14.getDisplayCountry(locale21);
        java.util.Locale locale24 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str25 = locale21.getDisplayLanguage(locale24);
        java.lang.String str26 = locale12.getDisplayCountry(locale24);
        java.lang.String str27 = locale5.getDisplayVariant(locale12);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.lang.String str36 = locale12.getDisplayVariant(locale29);
        java.lang.String str37 = locale29.getDisplayCountry();
        java.lang.String str38 = locale0.getDisplayName(locale29);
        java.lang.String str40 = locale0.getExtension('x');
        boolean boolean41 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str15, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Taiwan" + "'", str22, "Taiwan");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        numberFormat26.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field31 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field31);
        java.lang.String str33 = fieldPosition32.toString();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayName(locale35);
        boolean boolean38 = fieldPosition32.equals((java.lang.Object) locale35);
        fieldPosition32.setEndIndex((int) '#');
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        boolean boolean48 = fieldPosition32.equals((java.lang.Object) parsePosition46);
        java.lang.Number number49 = numberFormat26.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction53.abs();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        boolean boolean59 = numberFormat57.equals((java.lang.Object) locale58);
        boolean boolean60 = fraction55.equals((java.lang.Object) locale58);
        boolean boolean61 = parsePosition46.equals((java.lang.Object) locale58);
        java.lang.Object obj62 = properFractionFormat21.parseObject("\uc911\uad6d\uc5b4", parsePosition46);
        java.text.NumberFormat numberFormat63 = properFractionFormat21.getWholeFormat();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale65);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getDenominatorFormat();
        numberFormat67.setMinimumIntegerDigits(1728000);
        boolean boolean70 = numberFormat67.isGroupingUsed();
        numberFormat67.setMaximumIntegerDigits((int) (short) 1);
        int int73 = numberFormat67.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67);
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition(119);
        int int78 = parsePosition77.getIndex();
        org.apache.commons.math.fraction.Fraction fraction79 = fractionFormat74.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]", parsePosition77);
        java.lang.Number number80 = numberFormat63.parse("ZH-TW", parsePosition77);
        int int81 = parsePosition77.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str33, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (Taiwan)" + "'", str37, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(number49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 119 + "'", int78 == 119);
        org.junit.Assert.assertNull(fraction79);
        org.junit.Assert.assertNull(number80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 119 + "'", int81 == 119);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) '#');
        parsePosition71.setErrorIndex(600);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat9.parse("\ub300\ub9cc", parsePosition71);
        java.text.NumberFormat numberFormat75 = properFractionFormat9.getWholeFormat();
        numberFormat75.setGroupingUsed(false);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) 'a');
        java.lang.String str81 = parsePosition80.toString();
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder82.clearExtensions();
        java.util.Locale.Builder builder84 = builder82.clear();
        java.util.Locale.Builder builder85 = builder84.clear();
        boolean boolean86 = parsePosition80.equals((java.lang.Object) builder85);
        java.util.Locale.Category category87 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale88 = java.util.Locale.getDefault(category87);
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat90 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale89);
        java.util.Locale.setDefault(category87, locale89);
        java.util.Locale locale92 = java.util.Locale.getDefault(category87);
        java.util.Set<java.lang.String> strSet93 = locale92.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat94 = java.text.NumberFormat.getPercentInstance(locale92);
        boolean boolean95 = parsePosition80.equals((java.lang.Object) locale92);
        parsePosition80.setErrorIndex((int) (short) 0);
        java.lang.Object obj98 = numberFormat75.parseObject("coreano", parsePosition80);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str81, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + category87 + "' != '" + java.util.Locale.Category.FORMAT + "'", category87.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat90);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.lang.String str32 = numberFormat27.format((-1.0d));
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance(locale33);
        boolean boolean37 = numberFormat36.isParseIntegerOnly();
        java.math.RoundingMode roundingMode38 = numberFormat36.getRoundingMode();
        java.lang.Object obj39 = numberFormat36.clone();
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) 'a');
        java.lang.String str42 = parsePosition41.toString();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        java.util.Locale.Builder builder45 = builder43.clear();
        java.util.Locale.Builder builder46 = builder45.clear();
        boolean boolean47 = parsePosition41.equals((java.lang.Object) builder46);
        java.util.Locale.Builder builder49 = builder46.setVariant("Japan");
        java.util.Locale.Builder builder50 = builder49.clearExtensions();
        boolean boolean51 = numberFormat36.equals((java.lang.Object) builder49);
        java.math.RoundingMode roundingMode52 = numberFormat36.getRoundingMode();
        numberFormat27.setRoundingMode(roundingMode52);
        java.util.Locale.Category category54 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale55 = java.util.Locale.getDefault(category54);
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str59 = locale56.getDisplayScript(locale58);
        java.util.Locale.setDefault(category54, locale58);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale61.getScript();
        java.util.Locale locale66 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str67 = locale61.getDisplayScript(locale66);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getNumberInstance(locale66);
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet70 = locale66.getExtensionKeys();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.PRC;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.lang.String str74 = locale66.getDisplayName(locale71);
        java.util.Locale locale75 = locale71.stripExtensions();
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = locale77.getDisplayScript();
        java.lang.String str79 = locale76.getDisplayCountry(locale77);
        java.util.Set<java.lang.String> strSet80 = locale77.getUnicodeLocaleAttributes();
        java.lang.String str81 = locale75.getDisplayVariant(locale77);
        java.lang.String str83 = locale75.getExtension('a');
        java.lang.String str84 = locale58.getDisplayCountry(locale75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getNumberInstance(locale58);
        java.util.Currency currency87 = numberFormat86.getCurrency();
        numberFormat27.setCurrency(currency87);
        boolean boolean89 = numberFormat27.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + roundingMode38 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode38.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str42, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + roundingMode52 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode52.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.FORMAT + "'", category54.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals(locale66.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str73, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str74, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Japan" + "'", str79, "Japan");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Canada" + "'", str84, "Canada");
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(currency87);
        org.junit.Assert.assertEquals(currency87.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat28.getNumeratorFormat();
        java.lang.String str48 = numberFormat46.format((-14400.0d));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1,440,000%" + "'", str48, "-1,440,000%");
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        java.util.Locale locale1 = new java.util.Locale("java.text.ParsePosition[index=35,errorIndex=600]");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale2.getDisplayName();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale6.toLanguageTag();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getISO3Country();
        java.lang.String str10 = locale2.getDisplayScript(locale6);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Locale locale13 = locale11.stripExtensions();
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale2.getDisplayVariant(locale14);
        java.lang.String str16 = locale1.getDisplayCountry(locale14);
        java.lang.String str17 = locale14.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseposition[index=35,errorindex=600]");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TWN" + "'", str9, "TWN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CHN" + "'", str17, "CHN");
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.lang.String str12 = locale11.getVariant();
        boolean boolean13 = locale11.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setScript("");
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getISO3Language();
        java.lang.String str26 = locale20.getDisplayScript(locale23);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale20.getDisplayCountry(locale27);
        java.util.Locale.Builder builder29 = builder17.setLocale(locale27);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale30.toLanguageTag();
        java.lang.String str36 = locale30.getDisplayVariant();
        java.lang.String str37 = locale30.getVariant();
        java.util.Locale.Builder builder38 = builder29.setLocale(locale30);
        java.util.Locale locale39 = locale30.stripExtensions();
        java.lang.String str40 = locale14.getDisplayName(locale39);
        java.lang.String str41 = locale39.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-CA" + "'", str16, "en-CA");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str21, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (Canada)" + "'", str40, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        java.lang.Object obj26 = null;
        boolean boolean27 = parsePosition13.equals(obj26);
        java.lang.Object obj28 = null;
        boolean boolean29 = parsePosition13.equals(obj28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=35,errorIndex=600]");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale3.toLanguageTag();
        java.lang.String str5 = locale3.getVariant();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setScript("");
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder13 = builder8.setLocale(locale9);
        java.lang.String str14 = locale3.getDisplayVariant(locale9);
        java.lang.String str15 = locale9.getScript();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getWholeFormat();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        numberFormat21.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        int int32 = numberFormat31.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31);
        numberFormat31.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode36 = numberFormat31.getRoundingMode();
        boolean boolean37 = numberFormat31.isGroupingUsed();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.Object obj42 = numberFormat40.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.util.Locale locale48 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        java.lang.String str51 = fractionFormat49.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat52 = fractionFormat49.getNumeratorFormat();
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.util.Locale locale54 = locale53.stripExtensions();
        java.util.Locale locale56 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale56);
        java.lang.String str58 = locale56.getDisplayCountry();
        java.lang.String str59 = locale53.getDisplayName(locale56);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale62.getISO3Language();
        java.lang.String str64 = locale60.getDisplayScript(locale62);
        java.lang.String str65 = locale53.getDisplayLanguage(locale62);
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getNumberInstance(locale53);
        fractionFormat49.setNumeratorFormat(numberFormat66);
        properFractionFormat46.setWholeFormat(numberFormat66);
        fractionFormat43.setNumeratorFormat(numberFormat66);
        java.text.NumberFormat numberFormat70 = fractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat71 = fractionFormat43.getDenominatorFormat();
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) '4');
        parsePosition74.setIndex(0);
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition(1);
        boolean boolean79 = parsePosition74.equals((java.lang.Object) fieldPosition78);
        org.apache.commons.math.fraction.Fraction fraction80 = fractionFormat43.parse("it-IT", parsePosition74);
        java.lang.Number number81 = numberFormat31.parse("\u4e2d\u56fd\u8a9e", parsePosition74);
        int int82 = parsePosition74.getErrorIndex();
        java.lang.Number number83 = numberFormat19.parse("java.text.ParsePosition[index=97,errorIndex=96]", parsePosition74);
        java.lang.Object obj84 = numberFormat16.parseObject("und", parsePosition74);
        boolean boolean85 = locale2.equals((java.lang.Object) "und");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-TW" + "'", str4, "zh-TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinesisch" + "'", str12, "Chinesisch");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100 0 / 1" + "'", str51, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "kor" + "'", str63, "kor");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(fraction80);
        org.junit.Assert.assertNull(number81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(number83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.lang.String str37 = locale31.getDisplayName(locale34);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = locale38.getDisplayScript(locale40);
        java.lang.String str43 = locale31.getDisplayLanguage(locale40);
        java.lang.String str44 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale31);
        java.lang.String str46 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale31);
        java.lang.String str48 = locale29.getDisplayVariant(locale31);
        java.util.Locale.setDefault(category0, locale29);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale50.getDisplayCountry(locale52);
        java.lang.String str54 = locale52.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale55);
        java.util.Locale locale58 = locale55.stripExtensions();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        java.lang.String str61 = locale58.getDisplayName(locale59);
        java.lang.String str62 = locale52.getDisplayLanguage(locale59);
        java.util.Set<java.lang.Character> charSet63 = locale59.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale59);
        java.lang.Class<?> wildcardClass65 = category0.getClass();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str14, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str25, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "und" + "'", str44, "und");
        org.junit.Assert.assertNotNull(numberFormat45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "und" + "'", str46, "und");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str51, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Taiwan" + "'", str53, "Taiwan");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str54, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str61, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str62, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits(2147483647);
        java.lang.String str37 = numberFormat33.format((long) 'a');
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        numberFormat40.setMinimumIntegerDigits(1728000);
        numberFormat40.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat40);
        java.lang.String str47 = numberFormat32.format((long) 0);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) 'a');
        java.lang.String str51 = parsePosition50.toString();
        java.lang.String str52 = parsePosition50.toString();
        parsePosition50.setErrorIndex(3);
        int int55 = parsePosition50.getErrorIndex();
        java.lang.Object obj56 = numberFormat32.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (-1/1)", parsePosition50);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9,700%" + "'", str37, "9,700%");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0%" + "'", str47, "0%");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str51, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str52, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        java.lang.String str5 = numberFormat1.format((double) 0.016666668f);
        java.util.Currency currency6 = numberFormat1.getCurrency();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet13, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        boolean boolean20 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet21, filteringMode22);
        boolean boolean24 = numberFormat1.equals((java.lang.Object) strSet21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        java.lang.String str27 = locale25.getDisplayCountry();
        java.lang.String str28 = locale25.getVariant();
        java.util.Set<java.lang.Character> charSet29 = locale25.getExtensionKeys();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.FieldPosition fieldPosition31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer32 = numberFormat1.format((java.lang.Object) charSet29, stringBuffer30, fieldPosition31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2%" + "'", str5, "2%");
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + filteringMode15 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode15.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode22.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale0.getDisplayLanguage(locale4);
        java.lang.String str9 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.Object obj14 = properFractionFormat13.clone();
        java.text.NumberFormat numberFormat15 = properFractionFormat13.getDenominatorFormat();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale20);
        java.util.Currency currency23 = numberFormat22.getCurrency();
        numberFormat22.setMinimumIntegerDigits(1);
        numberFormat22.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat22.parseObject("Japan", parsePosition30);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException35 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str36 = fractionConversionException35.getPattern();
        java.lang.Throwable[] throwableArray37 = fractionConversionException35.getSuppressed();
        java.lang.Object[] objArray38 = fractionConversionException35.getArguments();
        boolean boolean39 = parsePosition30.equals((java.lang.Object) objArray38);
        int int40 = parsePosition30.getIndex();
        int int41 = parsePosition30.getIndex();
        java.lang.Object obj42 = fractionFormat18.parseObject("\ud55c\uad6d\uc5b4", parsePosition30);
        parsePosition30.setErrorIndex(14400);
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat13.parse("\u65e5\u6587", parsePosition30);
        boolean boolean46 = locale0.equals((java.lang.Object) fraction45);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese (Taiwan)" + "'", str7, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u6587" + "'", str8, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ja-JP" + "'", str9, "ja-JP");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "TWD");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str36, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.reciprocal();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.divide(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction11.divide(fraction13);
        byte byte15 = fraction11.byteValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) -2 + "'", byte15 == (byte) -2);
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str15 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        float float21 = fraction19.floatValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction19.negate();
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        int int29 = numberFormat27.getMaximumFractionDigits();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31, numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat31);
        boolean boolean36 = fraction22.equals((java.lang.Object) fractionFormat35);
        java.text.NumberFormat numberFormat37 = fractionFormat35.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat37);
        boolean boolean39 = numberFormat16.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(numberFormat14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 / 1" + "'", str20, "1 / 1");
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getLanguage();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale9);
        int int16 = numberFormat15.getMinimumFractionDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        boolean boolean4 = numberFormat2.equals((java.lang.Object) locale3);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str10 = locale3.getDisplayVariant(locale6);
        java.lang.String str11 = locale0.getDisplayVariant(locale3);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setScript("");
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayLanguage(locale17);
        java.util.Locale.Builder builder19 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder14.clearExtensions();
        java.util.Locale locale21 = builder20.build();
        java.lang.String str22 = locale0.getDisplayVariant(locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getNumberInstance(locale21);
        java.lang.Number number25 = numberFormat23.parse("3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinesisch" + "'", str18, "Chinesisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 3500L + "'", number25, 3500L);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        numberFormat0.setMinimumIntegerDigits(10);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction15 = properFractionFormat11.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        properFractionFormat18.setWholeFormat(numberFormat20);
        java.text.NumberFormat numberFormat23 = properFractionFormat18.getWholeFormat();
        properFractionFormat11.setWholeFormat(numberFormat23);
        java.text.NumberFormat numberFormat25 = properFractionFormat11.getNumeratorFormat();
        java.util.Currency currency26 = numberFormat25.getCurrency();
        numberFormat8.setCurrency(currency26);
        numberFormat0.setCurrency(currency26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number30 = numberFormat0.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=52]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=52]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(fraction15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getISO3Language();
        java.lang.String str9 = locale0.getDisplayName();
        java.lang.String str11 = locale0.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) locale20);
        boolean boolean22 = fraction17.equals((java.lang.Object) locale20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction17.abs();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale24);
        boolean boolean26 = fraction23.equals((java.lang.Object) locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str28 = locale0.getDisplayScript(locale24);
        java.lang.String str29 = locale24.getCountry();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale24);
        java.lang.Class<?> wildcardClass31 = locale24.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str9, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CN" + "'", str29, "CN");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fr");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale1.getDisplayLanguage(locale2);
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleKeys();
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Locale.setDefault(locale1);
        boolean boolean8 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais" + "'", str4, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.lang.String str32 = locale27.getDisplayName();
        java.util.Locale locale33 = locale27.stripExtensions();
        java.lang.String str34 = locale33.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale1.getDisplayVariant(locale3);
        java.lang.String str6 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean10 = numberFormat8.equals((java.lang.Object) numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        boolean boolean12 = numberFormat8.equals((java.lang.Object) fractionFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        boolean boolean20 = numberFormat18.equals((java.lang.Object) strArray19);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        boolean boolean29 = numberFormat28.isGroupingUsed();
        java.util.Currency currency30 = numberFormat28.getCurrency();
        numberFormat25.setCurrency(currency30);
        java.util.Currency currency32 = numberFormat25.getCurrency();
        java.math.RoundingMode roundingMode33 = numberFormat25.getRoundingMode();
        numberFormat18.setRoundingMode(roundingMode33);
        boolean boolean35 = numberFormat18.isParseIntegerOnly();
        java.lang.Object obj36 = numberFormat18.clone();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str41 = fractionFormat39.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat42 = fractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = fractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = fractionFormat39.getNumeratorFormat();
        java.lang.String str46 = numberFormat44.format((long) 2147483647);
        java.math.RoundingMode roundingMode47 = numberFormat44.getRoundingMode();
        numberFormat18.setRoundingMode(roundingMode47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat8, numberFormat18);
        int int51 = numberFormat1.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100 0 / 1" + "'", str41, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2,147,483,647" + "'", str46, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.lang.String str12 = locale3.getVariant();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale3);
        numberFormat13.setMaximumIntegerDigits((-1));
        properFractionFormat2.setDenominatorFormat(numberFormat13);
        numberFormat13.setMinimumFractionDigits((int) (byte) 88);
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition(10);
        int int21 = fieldPosition20.getEndIndex();
        fieldPosition20.setBeginIndex((int) '#');
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getScript();
        java.util.Locale locale29 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str30 = locale24.getDisplayScript(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        int int32 = numberFormat31.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        boolean boolean35 = fieldPosition20.equals((java.lang.Object) numberFormat31);
        numberFormat31.setGroupingUsed(false);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.util.Set<java.lang.Character> charSet40 = locale38.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet41 = locale38.getExtensionKeys();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31, numberFormat42);
        java.lang.String str45 = numberFormat42.format((double) 35);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator46 = numberFormat13.formatToCharacterIterator((java.lang.Object) str45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chinois" + "'", str4, "chinois");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\244 35.00" + "'", str45, "\244 35.00");
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setVariant("");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        boolean boolean13 = numberFormat1.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder15 = builder11.setRegion("");
        java.util.Locale.Builder builder16 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setLanguage("fr-CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: fr-CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category10);
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale5.getDisplayName(locale12);
        java.lang.String str15 = locale12.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ko" + "'", str13, "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale6 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str7 = locale0.getDisplayName(locale6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale14 = new java.util.Locale("119", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", "");
        java.lang.String str15 = locale9.getDisplayVariant(locale14);
        java.lang.String str16 = locale0.getDisplayLanguage(locale9);
        java.lang.Object obj17 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str2, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale6.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "119_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=100,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "en_CA");
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.AttributedCharacterIterator attributedCharacterIterator11 = numberFormat8.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj12 = numberFormat8.clone();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        java.lang.Object obj21 = numberFormat8.parseObject("zh-TW", parsePosition19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale22.getDisplayScript(locale25);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale22.getDisplayCountry(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        boolean boolean32 = numberFormat8.equals((java.lang.Object) locale22);
        int int33 = numberFormat8.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat8);
        java.lang.Object obj35 = numberFormat8.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(attributedCharacterIterator11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str23, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zho" + "'", str27, "zho");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Taiwan" + "'", str30, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        java.util.Locale locale3 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str10 = locale6.toLanguageTag();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder11.build();
        java.lang.String str14 = locale13.getScript();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale15.getDisplayScript(locale18);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale15.getDisplayCountry(locale22);
        java.util.Locale locale25 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str26 = locale22.getDisplayLanguage(locale25);
        java.lang.String str27 = locale13.getDisplayCountry(locale25);
        java.lang.String str28 = locale6.getDisplayVariant(locale13);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale30 = locale6.stripExtensions();
        java.lang.String str31 = locale3.getDisplayLanguage(locale6);
        java.lang.Object obj32 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str16, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Taiwan" + "'", str23, "Taiwan");
        org.junit.Assert.assertEquals(locale25.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italian" + "'", str26, "Italian");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1 / 1" + "'", str31, "1 / 1");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1 / 1__zh-tw");
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        numberFormat19.setMinimumIntegerDigits(2);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        numberFormat24.setGroupingUsed(true);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        java.math.RoundingMode roundingMode40 = numberFormat32.getRoundingMode();
        numberFormat24.setRoundingMode(roundingMode40);
        numberFormat19.setRoundingMode(roundingMode40);
        int int43 = numberFormat19.getMaximumFractionDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode40 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode40.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.lang.String str12 = numberFormat10.format(1.0d);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.lang.String str19 = locale13.getDisplayName(locale16);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayScript();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        java.lang.String str25 = locale13.getDisplayLanguage(locale22);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getNumberInstance(locale13);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat10.setCurrency(currency27);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayCountry(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance(locale30);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        numberFormat34.setMinimumFractionDigits(2147483647);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale38);
        boolean boolean40 = numberFormat34.equals((java.lang.Object) locale38);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        properFractionFormat44.setWholeFormat(numberFormat46);
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number53 = numberFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        parsePosition52.setIndex((int) ' ');
        java.lang.Number number56 = numberFormat34.parse("English (Canada)", parsePosition52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat34);
        numberFormat34.setMaximumFractionDigits((int) (short) 1);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100%" + "'", str12, "100%");
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japan" + "'", str32, "Japan");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertNull(number56);
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        numberFormat0.setMinimumIntegerDigits((int) (byte) -101);
        numberFormat0.setMinimumFractionDigits(600);
        boolean boolean7 = numberFormat0.isParseIntegerOnly();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale8.getDisplayCountry(locale10);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale8.getDisplayLanguage(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat22);
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str29 = fractionFormat27.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat30 = fractionFormat27.getNumeratorFormat();
        numberFormat30.setMaximumFractionDigits((int) (short) -1);
        int int33 = numberFormat30.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition(119);
        int int38 = parsePosition37.getIndex();
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat34.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition37);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.AttributedCharacterIterator attributedCharacterIterator44 = numberFormat41.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj45 = numberFormat41.clone();
        numberFormat41.setMaximumFractionDigits(2147483647);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj57 = numberFormat52.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition56);
        java.lang.String str58 = parsePosition56.toString();
        java.lang.Number number59 = numberFormat41.parse("\ud55c\uad6d\uc5b4", parsePosition56);
        int int60 = numberFormat41.getMinimumFractionDigits();
        boolean boolean61 = parsePosition37.equals((java.lang.Object) int60);
        java.lang.Number number62 = numberFormat22.parse("61.855670103092784%", parsePosition37);
        java.util.Locale locale66 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getCurrencyInstance(locale66);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) '#');
        parsePosition70.setErrorIndex(600);
        java.lang.String str73 = parsePosition70.toString();
        int int74 = parsePosition70.getErrorIndex();
        java.lang.Object obj75 = numberFormat67.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition70);
        java.lang.Number number76 = numberFormat22.parse("chinese", parsePosition70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str9, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "chinois" + "'", str20, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100 0 / 1" + "'", str29, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 119 + "'", int38 == 119);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(attributedCharacterIterator44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str58, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertEquals(locale66.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str73, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 600 + "'", int74 == 600);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(number76);
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale locale3 = builder0.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat4);
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.util.Locale.setDefault(locale2);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale2);
        java.lang.String str13 = locale2.getDisplayLanguage();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat14);
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("0");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale11.getScript();
        java.lang.String str14 = locale10.getDisplayCountry(locale11);
        java.lang.String str15 = locale10.getDisplayName();
        java.util.Locale locale19 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", "100%");
        java.lang.String str20 = locale10.getDisplayCountry(locale19);
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        int int24 = fieldPosition23.getEndIndex();
        java.lang.String str25 = fieldPosition23.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = numberFormat4.format((java.lang.Object) locale19, stringBuffer21, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "\u4e2d\u6587\u4e2d\u56fd)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]_100%");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str25, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) '#');
        java.text.Format.Field field11 = fieldPosition10.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction14.add(fraction21);
        boolean boolean24 = field11.equals((java.lang.Object) fraction14);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field11);
        java.text.Format.Field field26 = fieldPosition25.getFieldAttribute();
        int int27 = fieldPosition25.getEndIndex();
        java.util.Locale locale30 = new java.util.Locale("eng", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        boolean boolean31 = fieldPosition25.equals((java.lang.Object) locale30);
        java.lang.String str32 = locale4.getDisplayCountry(locale30);
        java.util.Locale.setDefault(locale4);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.lang.String str36 = locale34.toLanguageTag();
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayScript();
        java.lang.String str41 = locale34.getDisplayName(locale37);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale37);
        boolean boolean43 = locale4.equals((java.lang.Object) locale37);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "eng_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str35, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zh-TW" + "'", str36, "zh-TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "chinois (Taiwan)" + "'", str41, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) locale5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayVariant(locale8);
        java.lang.String str13 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(locale5);
        java.lang.String str16 = locale5.getExtension('u');
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.lang.String str18 = locale5.getDisplayVariant(locale17);
        java.lang.String str19 = locale0.getDisplayCountry(locale5);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayScript();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        java.lang.String str25 = locale20.toLanguageTag();
        java.util.Set<java.lang.String> strSet26 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale20.getDisplayVariant(locale27);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        numberFormat35.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.lang.String str42 = fieldPosition41.toString();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale43.getDisplayName(locale44);
        boolean boolean47 = fieldPosition41.equals((java.lang.Object) locale44);
        fieldPosition41.setEndIndex((int) '#');
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        boolean boolean57 = fieldPosition41.equals((java.lang.Object) parsePosition55);
        java.lang.Number number58 = numberFormat35.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition55);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction62.abs();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getInstance(locale65);
        java.util.Locale locale67 = java.util.Locale.getDefault();
        boolean boolean68 = numberFormat66.equals((java.lang.Object) locale67);
        boolean boolean69 = fraction64.equals((java.lang.Object) locale67);
        boolean boolean70 = parsePosition55.equals((java.lang.Object) locale67);
        java.lang.String str71 = locale20.getDisplayScript(locale67);
        java.util.Locale.setDefault(locale67);
        java.lang.String str73 = locale5.getDisplayVariant(locale67);
        java.util.Locale locale77 = new java.util.Locale("000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100", "english", "Franz\366sisch (Frankreich)");
        java.lang.String str78 = locale67.getDisplayCountry(locale77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = locale77.getUnicodeLocaleType("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=35,endIndex=35]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=35,endIndex=35]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (Taiwan)" + "'", str46, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals(locale77.toString(), "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100_ENGLISH_Franz\366sisch (Frankreich)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str11 = locale2.getDisplayLanguage(locale6);
        java.lang.String str12 = locale2.getDisplayCountry();
        java.lang.String str13 = locale2.getISO3Language();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d" + "'", str12, "\uc911\uad6d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        java.util.Locale locale3 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        java.lang.String str15 = parsePosition13.toString();
        boolean boolean17 = parsePosition13.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj18 = numberFormat4.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition13);
        int int19 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat25);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.lang.String str34 = numberFormat30.format(0.008333333333333333d);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        properFractionFormat38.setWholeFormat(numberFormat40);
        java.text.NumberFormat numberFormat43 = properFractionFormat38.getWholeFormat();
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number47 = numberFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        int int48 = parsePosition46.getIndex();
        java.lang.String str49 = parsePosition46.toString();
        java.lang.Number number50 = numberFormat30.parse("-100%", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction51 = fractionFormat27.parse("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition46);
        int int52 = parsePosition46.getErrorIndex();
        org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str15, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1%" + "'", str34, "1%");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNull(number47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + number50 + "' != '" + 1L + "'", number50, 1L);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale10);
        java.lang.String str15 = locale9.getDisplayCountry(locale10);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale9);
        java.lang.String str17 = locale9.getISO3Country();
        java.util.Locale.Builder builder18 = builder0.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.addUnicodeLocaleAttribute("1,100%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1,100% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat9.setNumeratorFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getWholeFormat();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        numberFormat21.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale27.getDisplayVariant(locale30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat39.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        java.lang.String str45 = parsePosition43.toString();
        boolean boolean47 = parsePosition43.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat34.parse("java.text.ParseException: zh_TW", parsePosition43);
        java.lang.Object obj49 = fractionFormat25.parseObject("Italian", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat9.parse("overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS", parsePosition43);
        java.lang.String str51 = parsePosition43.toString();
        int int52 = parsePosition43.getErrorIndex();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str45, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str51, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.util.Locale locale34 = locale32.stripExtensions();
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str36 = locale27.getDisplayName(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.util.Locale locale39 = new java.util.Locale("");
        java.util.Locale locale40 = locale39.stripExtensions();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale39);
        fractionFormat37.setNumeratorFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale43.toLanguageTag();
        java.util.Set<java.lang.String> strSet49 = locale43.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale43);
        java.text.NumberFormat numberFormat51 = fractionFormat50.getDenominatorFormat();
        java.lang.Object obj52 = numberFormat51.clone();
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.NumberFormat.Field field54 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition((java.text.Format.Field) field54);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        boolean boolean58 = field54.equals((java.lang.Object) locale56);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field54, (int) '#');
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer62 = numberFormat41.format((java.lang.Object) numberFormat51, stringBuffer53, fieldPosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.lang.String str46 = numberFormat44.format((long) 600);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "60,000%" + "'", str46, "60,000%");
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = field0.toString();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getISO3Language();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        java.lang.String str6 = locale3.getISO3Country();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Locale locale11 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        int int13 = numberFormat12.getMaximumIntegerDigits();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        java.util.Currency currency17 = numberFormat15.getCurrency();
        numberFormat12.setCurrency(currency17);
        java.util.Currency currency19 = numberFormat12.getCurrency();
        int int20 = numberFormat12.getMaximumFractionDigits();
        java.lang.Object obj21 = numberFormat12.clone();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        numberFormat23.setMaximumFractionDigits(100);
        numberFormat23.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str30 = numberFormat23.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat12, numberFormat23);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.lang.String str38 = numberFormat34.format(0.008333333333333333d);
        boolean boolean39 = numberFormat34.isParseIntegerOnly();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj43 = numberFormat34.parseObject("\u65e5\u6587", parsePosition42);
        int int44 = parsePosition42.getIndex();
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat31.parse("0 / 1", parsePosition42);
        java.util.Locale locale49 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str50 = locale49.getDisplayCountry();
        boolean boolean51 = parsePosition42.equals((java.lang.Object) locale49);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleKeys();
        boolean boolean53 = field0.equals((java.lang.Object) strSet52);
        java.lang.String str54 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str2, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100%" + "'", str30, "100%");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1%" + "'", str38, "1%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertEquals(locale49.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str54, "java.text.NumberFormat$Field(grouping separator)");
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.divide(fraction7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        boolean boolean11 = numberFormat10.isGroupingUsed();
        java.util.Currency currency12 = numberFormat10.getCurrency();
        int int13 = numberFormat10.getMinimumFractionDigits();
        int int14 = numberFormat10.getMinimumIntegerDigits();
        java.lang.Object obj15 = numberFormat10.clone();
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat16);
        boolean boolean18 = fraction7.equals((java.lang.Object) numberFormat10);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction24.add(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction19.multiply(fraction30);
        float float35 = fraction30.floatValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction7.subtract(fraction30);
        int int37 = fraction7.intValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 / 1" + "'", str20, "1 / 1");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.008333334f + "'", float35 == 0.008333334f);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale1.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.abs();
        long long12 = fraction10.longValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction6.multiply(fraction10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction10.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction1.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction40.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction40.reciprocal();
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction1.subtract(fraction53);
        int int56 = fraction53.getNumerator();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "60 / 1" + "'", str54, "60 / 1");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 60 + "'", int56 == 60);
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        long long26 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction27.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction27.negate();
        long long44 = fraction43.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.add(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction43.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.divide(fraction70);
        int int73 = fraction67.intValue();
        float float74 = fraction67.floatValue();
        int int75 = fraction67.intValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction67.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction46.divide(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction77.add(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction12.subtract(fraction77);
        int int83 = fraction12.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1 / 1" + "'", str28, "1 / 1");
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.016666668f + "'", float74 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        numberFormat13.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        java.lang.String str20 = fieldPosition19.toString();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayName(locale22);
        boolean boolean25 = fieldPosition19.equals((java.lang.Object) locale22);
        fieldPosition19.setEndIndex((int) '#');
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        boolean boolean35 = fieldPosition19.equals((java.lang.Object) parsePosition33);
        java.lang.Number number36 = numberFormat13.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        boolean boolean46 = numberFormat44.equals((java.lang.Object) locale45);
        boolean boolean47 = fraction42.equals((java.lang.Object) locale45);
        boolean boolean48 = parsePosition33.equals((java.lang.Object) locale45);
        java.lang.String str49 = locale45.getDisplayVariant();
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale50);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale53);
        java.util.Currency currency56 = numberFormat55.getCurrency();
        numberFormat55.setMinimumIntegerDigits(1);
        numberFormat55.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj64 = numberFormat55.parseObject("Japan", parsePosition63);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException68 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str69 = fractionConversionException68.getPattern();
        java.lang.Throwable[] throwableArray70 = fractionConversionException68.getSuppressed();
        java.lang.Object[] objArray71 = fractionConversionException68.getArguments();
        boolean boolean72 = parsePosition63.equals((java.lang.Object) objArray71);
        int int73 = parsePosition63.getIndex();
        int int74 = parsePosition63.getIndex();
        java.lang.Object obj75 = fractionFormat51.parseObject("\ud55c\uad6d\uc5b4", parsePosition63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat77 = properFractionFormat76.getWholeFormat();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        numberFormat79.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = new org.apache.commons.math.fraction.FractionFormat(numberFormat77, numberFormat79);
        java.text.NumberFormat numberFormat84 = fractionFormat83.getNumeratorFormat();
        boolean boolean85 = parsePosition63.equals((java.lang.Object) fractionFormat83);
        java.util.Locale locale86 = java.util.Locale.TAIWAN;
        java.lang.String str87 = locale86.toLanguageTag();
        java.lang.String str88 = locale86.getISO3Country();
        java.lang.String str89 = locale86.toLanguageTag();
        java.lang.String str90 = locale86.getDisplayVariant();
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getInstance(locale86);
        boolean boolean92 = parsePosition63.equals((java.lang.Object) locale86);
        java.lang.String str93 = locale45.getDisplayName(locale86);
        java.lang.String str94 = locale9.getDisplayLanguage(locale45);
        java.lang.String str95 = locale45.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat96 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "anglais_KOR");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "TWD");
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str69, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "zh-TW" + "'", str87, "zh-TW");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "TWN" + "'", str88, "TWN");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "zh-TW" + "'", str89, "zh-TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "anglais (KOR)" + "'", str93, "anglais (KOR)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "anglais (KOR)" + "'", str95, "anglais (KOR)");
        org.junit.Assert.assertNotNull(fractionFormat96);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.multiply(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction20.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction11.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction37.abs();
        java.lang.String str41 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction40);
        int int42 = fraction40.intValue();
        long long43 = fraction40.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "14,400 / 1" + "'", str41, "14,400 / 1");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14400 + "'", int42 == 14400);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 14400L + "'", long43 == 14400L);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.lang.String str6 = locale1.getDisplayScript();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale1);
        java.lang.Class<?> wildcardClass8 = locale1.getClass();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        int int1 = numberFormat0.getMaximumFractionDigits();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((-2));
        int int6 = parsePosition5.getErrorIndex();
        java.lang.Number number7 = numberFormat0.parse("5 / 1", parsePosition5);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.util.Set<java.lang.Character> charSet10 = locale8.getExtensionKeys();
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale8.getDisplayVariant(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        boolean boolean28 = parsePosition24.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat15.parse("java.text.ParseException: zh_TW", parsePosition24);
        java.text.NumberFormat numberFormat30 = properFractionFormat15.getWholeFormat();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(119);
        int int34 = parsePosition33.getIndex();
        java.lang.Object obj35 = null;
        boolean boolean36 = parsePosition33.equals(obj35);
        java.lang.Object obj37 = numberFormat30.parseObject("zh_tw", parsePosition33);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        java.math.RoundingMode roundingMode50 = numberFormat42.getRoundingMode();
        numberFormat30.setRoundingMode(roundingMode50);
        numberFormat0.setRoundingMode(roundingMode50);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(number7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 119 + "'", int34 == 119);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean64 = numberFormat63.isGroupingUsed();
        properFractionFormat61.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat66 = properFractionFormat61.getWholeFormat();
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number70 = numberFormat66.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition69);
        parsePosition69.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat57.parse("\u65e5\u6587\u65e5\u672c)", parsePosition69);
        java.text.NumberFormat numberFormat74 = properFractionFormat57.getWholeFormat();
        java.util.Locale.Category category75 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale76 = java.util.Locale.getDefault(category75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale77);
        java.util.Locale.setDefault(category75, locale77);
        java.util.Locale locale80 = java.util.Locale.getDefault(category75);
        java.util.Locale.Category category81 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.lang.String str83 = locale82.getISO3Language();
        java.util.Locale.setDefault(category81, locale82);
        java.util.Locale.setDefault(category75, locale82);
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.lang.String str87 = locale86.getISO3Country();
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getIntegerInstance(locale86);
        java.util.Locale.setDefault(category75, locale86);
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getNumberInstance(locale86);
        properFractionFormat57.setDenominatorFormat(numberFormat90);
        java.text.ParsePosition parsePosition93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction94 = properFractionFormat57.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "anglais (KOR)" + "'", str29, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "anglais" + "'", str35, "anglais");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNull(number70);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.FORMAT + "'", category75.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category81 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category81.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "kor" + "'", str83, "kor");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(numberFormat90);
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.util.Locale.setDefault(locale2);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale2);
        java.lang.String str13 = locale2.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayName(locale19);
        java.lang.String str22 = locale14.getDisplayLanguage(locale18);
        java.lang.String str23 = locale18.getDisplayName();
        java.lang.String str24 = locale2.getDisplayVariant(locale18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "anglais_KOR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "KOR" + "'", str10, "KOR");
        org.junit.Assert.assertNotNull(numberFormat12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "anglais (KOR)" + "'", str13, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japan" + "'", str17, "Japan");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (Taiwan)" + "'", str21, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u6587" + "'", str22, "\u65e5\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (Taiwan)" + "'", str23, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getWholeFormat();
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition(119);
        int int26 = parsePosition25.getIndex();
        java.lang.Object obj27 = null;
        boolean boolean28 = parsePosition25.equals(obj27);
        java.lang.Object obj29 = numberFormat22.parseObject("zh_tw", parsePosition25);
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        numberFormat22.setRoundingMode(roundingMode42);
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition(10);
        int int47 = fieldPosition46.getEndIndex();
        fieldPosition46.setBeginIndex((int) '#');
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getScript();
        java.util.Locale locale55 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str56 = locale50.getDisplayScript(locale55);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale55);
        int int58 = numberFormat57.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        boolean boolean61 = fieldPosition46.equals((java.lang.Object) numberFormat57);
        numberFormat57.setGroupingUsed(false);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        java.lang.String str70 = numberFormat66.format(0.008333333333333333d);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        boolean boolean77 = numberFormat76.isGroupingUsed();
        properFractionFormat74.setWholeFormat(numberFormat76);
        java.text.NumberFormat numberFormat79 = properFractionFormat74.getWholeFormat();
        java.text.ParsePosition parsePosition82 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number83 = numberFormat79.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition82);
        int int84 = parsePosition82.getIndex();
        java.lang.String str85 = parsePosition82.toString();
        java.lang.Number number86 = numberFormat66.parse("-100%", parsePosition82);
        java.lang.Object obj87 = numberFormat57.parseObject("1,000%", parsePosition82);
        java.lang.Number number88 = numberFormat22.parse("1,000%", parsePosition82);
        int int89 = parsePosition82.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 119 + "'", int26 == 119);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale55.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1%" + "'", str70, "1%");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNull(number83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str85, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + number86 + "' != '" + 1L + "'", number86, 1L);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNull(number88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
    }
}

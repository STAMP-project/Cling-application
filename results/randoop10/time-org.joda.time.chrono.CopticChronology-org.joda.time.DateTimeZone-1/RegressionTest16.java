import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = copticChronology0.getZone();
        int int6 = dateTimeZone4.getStandardOffset((long) 946);
        int int8 = dateTimeZone4.getOffset(1644572751451L);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str16 = locale11.getDisplayName(locale15);
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale18 = java.util.Locale.getDefault(category10);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale.setDefault(category10, locale20);
        java.lang.String str22 = dateTimeZone4.getName(1644536856256L, locale20);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str13, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese (China)" + "'", str16, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str9 = dateTimeZone1.getNameKey((long) 113);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str11 = dateTimeZone1.getID();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField14 = copticChronology13.hours();
        int int15 = copticChronology13.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 2, (org.joda.time.Chronology) copticChronology13);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology13.millisOfDay();
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) copticChronology13);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withHourOfDay(22);
        int int38 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.era();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(44);
        int int43 = dateTimeZone41.getOffsetFromLocal(1644572632040L);
        boolean boolean44 = localDateTime22.equals((java.lang.Object) dateTimeZone41);
        long long46 = copticChronology13.set((org.joda.time.ReadablePartial) localDateTime22, (long) 59);
        org.joda.time.DateTimeField dateTimeField47 = copticChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology13.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = copticChronology13.get(readablePeriod49, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 158400000 + "'", int43 == 158400000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572965641L + "'", long46 == 1644572965641L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = copticChronology0.add(readablePeriod13, (long) 728, 35040197);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572965657L + "'", long9 == 1644572965657L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 728L + "'", long16 == 728L);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology1.add(readablePeriod9, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.weekyearOfCentury();
        int int14 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology1.millisOfSecond();
        java.lang.String str18 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(1644572950028L, (org.joda.time.Chronology) copticChronology1);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CopticChronology[UTC]" + "'", str18, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology0.add(readablePeriod12, 1644572624742L, 467);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = copticChronology0.getZone();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey(1644572579020L);
        long long26 = dateTimeZone21.convertLocalToUTC(1644572801850L, true);
        long long28 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 735);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572624742L + "'", long15 == 1644572624742L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644536801850L + "'", long26 == 1644536801850L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-35999265L) + "'", long28 == (-35999265L));
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readableDuration3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        int int7 = localDateTime6.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(10);
        long long22 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime20, (long) 'a');
        boolean boolean24 = localDateTime20.equals((java.lang.Object) 1613000665015L);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.minus(readablePeriod25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.year();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644537600010L + "'", long22 == 1644537600010L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getLanguage();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.lang.String str11 = locale8.getDisplayScript();
        java.lang.String str12 = locale5.getDisplayVariant(locale8);
        java.util.Locale locale14 = new java.util.Locale("1737-06-04T09:44:05.259+10:00");
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('x', "811");
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getDisplayScript();
        java.lang.String str24 = locale20.getDisplayVariant();
        java.lang.String str25 = locale20.getDisplayScript();
        java.util.Locale.Builder builder26 = builder18.setLocale(locale20);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale27.getISO3Country();
        boolean boolean30 = locale27.hasExtensions();
        java.util.Locale.Builder builder31 = builder18.setLocale(locale27);
        java.lang.String str32 = locale14.getDisplayVariant(locale27);
        java.lang.String str33 = locale5.getDisplayVariant(locale27);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = locale5.getDisplayLanguage(locale34);
        java.lang.String str37 = dateTimeZone2.getName(1644414241156L, locale5);
        java.util.Set<java.lang.Character> charSet38 = locale5.getExtensionKeys();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English (Canada)" + "'", str9, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "KOR" + "'", str29, "KOR");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str35, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Englisch" + "'", str36, "Englisch");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(charSet38);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.secondOfDay();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        int[] intArray21 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime19, (long) 38);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField23 = copticChronology0.minutes();
        org.joda.time.DurationField durationField24 = copticChronology0.years();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572966026L + "'", long9 == 1644572966026L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1686, 4, 23, 38]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(700);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear((int) (short) 10);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property21.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusHours(22);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusHours(375);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusSeconds(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = localDateTime35.toString(dateTimeFormatter38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusYears(100);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = property47.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = property47.roundHalfEvenCopy();
        org.joda.time.DurationField durationField52 = property47.getRangeDurationField();
        org.joda.time.Interval interval53 = property47.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property47.getFieldType();
        int int55 = localDateTime41.get(dateTimeFieldType54);
        int int56 = localDateTime32.get(dateTimeFieldType54);
        int int57 = localDateTime15.indexOf(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1738-06-04T09:49:26.040" + "'", str39, "1738-06-04T09:49:26.040");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 40 + "'", int55 == 40);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays(999);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withPeriodAdded(readablePeriod13, 3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime15.getFieldType(830);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 830");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "67" + "'", str7, "67");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("eng", strMap8);
        java.util.Set<java.lang.String> strSet10 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        boolean boolean14 = strSet10.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList16, filteringMode17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("eng", strMap22);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        boolean boolean28 = strSet24.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26);
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList30, filteringMode31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.parse("eng", strMap36);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfSecond();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = property45.getAsText(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = locale55.getISO3Language();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.millisOfSecond();
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str65 = property63.getAsText(locale64);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale38, locale39, locale46, locale48, locale49, locale50, locale52, locale55, locale57, locale64, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream74 = languageRangeList9.parallelStream();
        boolean boolean75 = strSet6.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap76);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "95" + "'", str47, "95");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eng" + "'", str56, "eng");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "95" + "'", str65, "95");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(languageRangeStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(languageRangeList77);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime22.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property38 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.minuteOfHour();
        int int40 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime22.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withSecondOfMinute(43);
        int[] intArray54 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime52, (long) 43);
        copticChronology18.validate((org.joda.time.ReadablePartial) localDateTime22, intArray54);
        org.joda.time.DurationField durationField56 = copticChronology18.centuries();
        org.joda.time.DurationField durationField57 = copticChronology18.hours();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.TimeZone timeZone64 = dateTimeZone61.toTimeZone();
        long long66 = dateTimeZone61.nextTransition((-1L));
        long long68 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone61);
        int[] intArray72 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime70, 1644572736021L);
        java.util.Date date73 = localDateTime70.toDate();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusMillis(697);
        int int83 = localDateTime82.getMillisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999031L) + "'", long68 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1738, 6, 9, 35136021]");
        org.junit.Assert.assertNotNull(date73);
// flaky:         org.junit.Assert.assertEquals(date73.toString(), "Fri Feb 11 19:44:44 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 191 + "'", int83 == 191);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str24 = copticChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology23.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond(5);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider30);
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.util.Locale.setDefault(locale32);
        java.lang.String str38 = nameProvider30.getName(locale32, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.millisOfSecond();
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str48 = locale46.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str51 = locale46.getDisplayName(locale50);
        java.util.Locale.setDefault(category45, locale46);
        java.lang.String str53 = property44.getAsShortText(locale46);
        java.lang.String str54 = locale32.getDisplayLanguage(locale46);
        java.lang.String str56 = locale32.getExtension('a');
        java.lang.String str57 = locale32.getCountry();
        int int58 = property29.getMaximumTextLength(locale32);
        java.util.Set<java.lang.String> strSet59 = locale32.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet60 = locale32.getExtensionKeys();
        java.lang.String str61 = property20.getAsText(locale32);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572966185L + "'", long9 == 1644572966185L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CopticChronology[UTC]" + "'", str24, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English (Canada)" + "'", str34, "English (Canada)");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (China)" + "'", str48, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (China)" + "'", str51, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "185" + "'", str53, "185");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u82f1\u6587" + "'", str54, "\u82f1\u6587");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "CA" + "'", str57, "CA");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "9" + "'", str61, "9");
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(1644572797365L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy("4");
        org.joda.time.LocalDateTime localDateTime23 = property20.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField24 = property20.getField();
        org.joda.time.LocalDateTime localDateTime25 = property20.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMonthOfYear(204);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 204 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 245 + "'", int18 == 245);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        int int8 = localDateTime6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(35139948);
        int int15 = localDateTime12.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withDayOfWeek(35121391);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35121391 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("229");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguageTag("1737-06-04T09:44:52.347+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1737 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str5 = timeZone1.getID();
        java.lang.Object obj6 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('x', "709");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder20 = builder17.setLocale(locale19);
        java.util.Locale.Builder builder23 = builder17.setExtension('u', "35026152");
        java.util.Locale.Builder builder26 = builder23.setExtension('a', "196");
        boolean boolean27 = localDateTime11.equals((java.lang.Object) builder26);
        java.util.Locale.Builder builder28 = builder26.clear();
        java.util.Locale.Builder builder29 = builder26.clear();
        java.util.Locale.Builder builder31 = builder29.setVariant("");
        java.util.Locale.Builder builder33 = builder29.removeUnicodeLocaleAttribute("286");
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder33.addUnicodeLocaleAttribute("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = localDateTime2.getMonthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        boolean boolean41 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime.Property property43 = localDateTime38.year();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.withWeekyear(697);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.plusSeconds(710);
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withMillisOfSecond(959);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1738 + "'", int48 == 1738);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusHours(102);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes(607);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readableDuration23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.monthOfYear();
        java.util.Locale locale29 = new java.util.Locale("55", "1737-06-04T09:43:55.809+10:00", "889");
        java.lang.String str30 = locale29.toLanguageTag();
        java.util.Locale locale31 = locale29.stripExtensions();
        java.lang.String str32 = property25.getAsShortText(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property25.withMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals(locale29.toString(), "55_1737-06-04T09:43:55.809+10:00_889");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "x-lvariant-889" + "'", str30, "x-lvariant-889");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "55_1737-06-04T09:43:55.809+10:00_889");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "6" + "'", str32, "6");
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) 100);
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsText(locale16);
        java.lang.String str18 = property15.getAsText();
        java.lang.String str19 = property15.toString();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str22 = locale21.getDisplayScript();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy(580);
        org.joda.time.DurationField durationField26 = property15.getRangeDurationField();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.util.Locale.setDefault(locale28);
        java.util.Set<java.lang.Character> charSet32 = locale28.getExtensionKeys();
        java.util.Locale.setDefault(locale28);
        org.joda.time.LocalDateTime localDateTime34 = property15.setCopy("525", locale28);
        java.lang.String str35 = property5.getAsText(locale28);
        java.lang.String str36 = locale28.getDisplayVariant();
        java.util.Locale locale37 = locale28.stripExtensions();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 999 + "'", int8 == 999);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "340" + "'", str17, "340");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "340" + "'", str18, "340");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[millisOfSecond]" + "'", str19, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (Canada)" + "'", str30, "English (Canada)");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "340" + "'", str35, "340");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder3.setRegion("293");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale locale8 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setLanguageTag("1737-06-04T09:49:13.056Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1737 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_293_#x-709");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        java.util.Locale locale2 = new java.util.Locale("950", "Property[dayOfWeek]");
        org.junit.Assert.assertEquals(locale2.toString(), "950_PROPERTY[DAYOFWEEK]");
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology0.add(readablePeriod12, 1644572624742L, 467);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = copticChronology0.getDateTimeMillis(427, 0, 984, 877);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572624742L + "'", long15 == 1644572624742L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long10 = copticChronology0.add(1644572616856L, 1644572617993L, 700);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        org.joda.time.DurationField durationField13 = copticChronology11.millis();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime40.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime40.plus(readablePeriod56);
        int int58 = localDateTime57.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.yearOfEra();
        boolean boolean60 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        int[] intArray61 = localDateTime57.getValues();
        copticChronology11.validate((org.joda.time.ReadablePartial) localDateTime21, intArray61);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime65.withFields((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withMillisOfDay(10);
        int[] intArray79 = localDateTime76.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray79);
        org.joda.time.DurationField durationField81 = copticChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone82 = copticChronology0.getZone();
        org.joda.time.DurationField durationField83 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField84 = copticChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1152845405211956L + "'", long10 == 1152845405211956L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 427 + "'", int58 == 427);
        org.junit.Assert.assertNotNull(property59);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1738, 6, 4, 35366427]");
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1738, 6, 4, 35366427]");
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        java.lang.String[] strArray18 = new java.lang.String[] { "93", "171", "93", "93", "en", "160", "hi!", "Greenwich Mean Time", "449", "eng", "449", "527", "Chinese (China)", "en", "Chinese (China)", "en_CA", "+10:00", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "+10:00", "en" };
        java.lang.CharSequence[] charSequenceArray24 = strSet19.toArray(charSequenceArray23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField26 = copticChronology25.hours();
        int int27 = copticChronology25.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology25.era();
        org.joda.time.DurationField durationField29 = copticChronology25.days();
        boolean boolean30 = strSet19.remove((java.lang.Object) copticChronology25);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology25.millisOfDay();
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572966479L + "'", long9 == 1644572966479L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setRegion("892");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguage("386");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 386 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime7.minusMinutes(1970);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime7.withWeekyear(957);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField3 = copticChronology1.minutes();
        org.joda.time.Chronology chronology4 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 748, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.minuteOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        long long21 = dateTime19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        boolean boolean28 = dateTimeZone25.isStandardOffset(10L);
        java.lang.String str30 = dateTimeZone25.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy((long) 100);
        java.util.Locale locale41 = java.util.Locale.CANADA;
        int int42 = property38.getMaximumShortTextLength(locale41);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property61 = localDateTime45.millisOfDay();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = property61.getAsShortText(locale62);
        java.lang.String str66 = locale62.getDisplayVariant();
        java.lang.String str67 = property38.getAsShortText(locale62);
        java.lang.String str68 = property32.getAsText(locale62);
        java.lang.String str69 = locale23.getDisplayName(locale62);
        java.util.Locale.setDefault(locale23);
        java.lang.Object obj71 = locale23.clone();
        boolean boolean72 = dateTime19.equals((java.lang.Object) locale23);
        org.joda.time.chrono.CopticChronology copticChronology73 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.hourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime75.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime(readableInstant81);
        org.joda.time.chrono.CopticChronology copticChronology83 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField84 = copticChronology83.dayOfYear();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.hourOfDay();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime85.plusYears((int) (short) -1);
        int[] intArray91 = localDateTime90.getValues();
        org.joda.time.LocalDateTime.Property property92 = localDateTime90.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray93 = localDateTime90.getFieldTypes();
        int int94 = localDateTime90.getMonthOfYear();
        org.joda.time.DateTime dateTime95 = localDateTime90.toDateTime();
        int int96 = dateTime82.compareTo((org.joda.time.ReadableInstant) dateTime95);
        boolean boolean97 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-7339421433371L) + "'", long21 == (-7339421433371L));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English (Canada)" + "'", str64, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "35366629" + "'", str65, "35366629");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "629" + "'", str67, "629");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "February" + "'", str68, "February");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "French" + "'", str69, "French");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "fr");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(copticChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(copticChronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(intArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1737, 6, 4, 35366629]");
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 6 + "'", int94 == 6);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long10 = copticChronology0.add(1644572616856L, 1644572617993L, 700);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.era();
        long long15 = copticChronology0.add((long) 30, (long) 153, 0);
        org.joda.time.DurationField durationField16 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1152845405211956L + "'", long10 == 1152845405211956L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 30L + "'", long15 == 30L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsText(locale17);
        long long19 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfFloorCopy();
        java.lang.String str21 = property16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property16.getFieldType();
        boolean boolean23 = dateTime9.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = dateTime9.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.millis();
        org.joda.time.DurationField durationField26 = chronology24.eras();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "749" + "'", str18, "749");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[millisOfSecond]" + "'", str21, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay((int) '#');
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone2);
        long long16 = dateTimeZone2.previousTransition(1644572610881L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1644572637142L, dateTimeZone2);
        int int18 = localDateTime17.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plus(readablePeriod19);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572610881L + "'", long16 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        boolean boolean27 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        boolean boolean48 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.millisOfSecond();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = property55.getAsText(locale56);
        long long58 = property55.remainder();
        org.joda.time.LocalDateTime localDateTime59 = property55.roundHalfFloorCopy();
        java.lang.String str60 = property55.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property55.getFieldType();
        boolean boolean62 = dateTime37.isSupported(dateTimeFieldType61);
        int int63 = property6.getDifference((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime37.getZone();
        long long68 = dateTimeZone64.convertLocalToUTC((long) 17, true, 5431484653269L);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str71 = dateTimeZone70.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        java.util.TimeZone timeZone73 = dateTimeZone70.toTimeZone();
        java.util.TimeZone timeZone74 = dateTimeZone70.toTimeZone();
        int int76 = dateTimeZone70.getOffset((-6108584L));
        int int78 = dateTimeZone70.getOffsetFromLocal((long) 250);
        long long80 = dateTimeZone64.getMillisKeepLocal(dateTimeZone70, 5431484752986L);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        int[] intArray82 = localDateTime81.getValues();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.minusMinutes(567);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "778" + "'", str57, "778");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[millisOfSecond]" + "'", str60, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 149733239 + "'", int63 == 149733239);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999983L) + "'", long68 == (-35999983L));
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 36000000 + "'", int76 == 36000000);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 5431484752986L + "'", long80 == 5431484752986L);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[2022, 2, 11, 71366778]");
        org.junit.Assert.assertNotNull(localDateTime84);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Set<java.lang.String> strSet1 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        boolean boolean5 = strSet1.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale9, locale10, locale11, locale15, locale17, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap27);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        boolean boolean30 = locale29.hasExtensions();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList28, (java.util.Collection<java.lang.String>) strSet31, filteringMode32);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream34 = languageRangeList28.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.parse("eng", strMap36);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfSecond();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = property45.getAsText(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = locale55.getISO3Language();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.millisOfSecond();
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str65 = property63.getAsText(locale64);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale38, locale39, locale46, locale48, locale49, locale50, locale52, locale55, locale57, locale64, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale locale72 = java.util.Locale.lookup(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale73 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (Canada)" + "'", str13, "English (Canada)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeStream34);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "832" + "'", str47, "832");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eng" + "'", str56, "eng");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "832" + "'", str65, "832");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNull(locale72);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        java.lang.String str10 = copticChronology0.toString();
        org.joda.time.DurationField durationField11 = copticChronology0.days();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = copticChronology0.getDateTimeMillis(1613036758919L, 522, 766, 55, 113);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 522 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.withMaximumValue();
        org.joda.time.DurationField durationField12 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "878" + "'", str7, "878");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfDay(10);
        int int67 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        int int69 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime70 = property5.roundHalfEvenCopy();
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str73 = locale71.getISO3Country();
        java.lang.String str74 = property5.getAsText(locale71);
        org.joda.time.LocalDateTime localDateTime75 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime76 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "890" + "'", str74, "890");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology7.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        int[] intArray30 = localDateTime29.getValues();
        copticChronology7.validate((org.joda.time.ReadablePartial) localDateTime21, intArray30);
        long long35 = copticChronology7.add(1644572624873L, 1644572641834L, 42);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology7.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(119, 364, 103981, 900, 965, 357, 177, (org.joda.time.Chronology) copticChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 900 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1737, 6, 4, 35366927]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1737, 6, 4, 35366927]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 70716623581901L + "'", long35 == 70716623581901L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = property10.setCopy("35124285");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"35124285\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getNameKey(1067327643043060L);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getLanguage();
        java.lang.String str14 = locale9.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet15 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str16 = dateTimeZone1.getShortName(1644572767614L, locale11);
        java.lang.String str17 = locale11.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr" + "'", str12, "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfDay((int) (byte) 100);
        java.lang.String str27 = localDateTime26.toString();
        long long29 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime26, (long) 3);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField31 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1738-06-04T00:00:00.100" + "'", str27, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644537600100L + "'", long29 == 1644537600100L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField33 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572966992L + "'", long9 == 1644572966992L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431484966992L + "'", long31 == 5431484966992L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        java.util.Locale locale3 = new java.util.Locale("China", "817", "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str5 = copticChronology4.toString();
        org.joda.time.DurationField durationField6 = copticChronology4.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        long long13 = copticChronology4.set((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DurationField durationField14 = copticChronology4.hours();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology4.secondOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        boolean boolean18 = copticChronology4.equals((java.lang.Object) locale17);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsText(locale25);
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale25.getDisplayVariant(locale27);
        java.util.Locale locale32 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str33 = locale27.getDisplayName(locale32);
        java.lang.String str34 = locale17.getDisplayName(locale27);
        java.lang.String str35 = locale3.getDisplayLanguage(locale17);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = locale36.getLanguage();
        java.lang.String str39 = locale3.getDisplayLanguage(locale36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = locale3.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for china");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CopticChronology[UTC]" + "'", str5, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644572967005L + "'", long13 == 1644572967005L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "5" + "'", str26, "5");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale32.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "china" + "'", str35, "china");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fr" + "'", str37, "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fr" + "'", str38, "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "china" + "'", str39, "china");
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology0.add(readablePeriod9, 13254288501L, 385);
        org.joda.time.DurationField durationField13 = copticChronology0.eras();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 13254288501L + "'", long12 == 13254288501L);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekyear(700);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusMillis(593);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(564);
        int int12 = localDateTime9.getHourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getISO3Country();
        boolean boolean3 = locale0.hasExtensions();
        java.lang.String str4 = locale0.getISO3Language();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.lang.String str8 = locale5.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KOR" + "'", str2, "KOR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u671d\u9c9c\u6587" + "'", str7, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        boolean boolean30 = localDateTime15.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime15.minusDays(725);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsText(locale39);
        long long41 = property38.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property38.roundHalfFloorCopy();
        java.lang.String str43 = property38.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property38.getFieldType();
        org.joda.time.LocalDateTime.Property property45 = localDateTime32.property(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime46 = property45.getLocalDateTime();
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plus(readablePeriod54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.minusYears((int) (short) 0);
        int[] intArray59 = copticChronology47.get((org.joda.time.ReadablePartial) localDateTime57, 0L);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale62 = null;
        java.lang.String str65 = nameProvider61.getName(locale62, "fr", "572");
        java.util.Locale locale69 = new java.util.Locale("eng", "153", "English (Canada)");
        java.lang.String str72 = nameProvider61.getName(locale69, "1738", "35035387");
        org.joda.time.chrono.CopticChronology copticChronology73 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.millisOfSecond();
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str80 = property78.getAsText(locale79);
        java.util.Locale locale81 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale79.getDisplayVariant(locale81);
        java.util.Locale locale86 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str87 = locale81.getDisplayName(locale86);
        java.lang.String str88 = locale86.getCountry();
        java.lang.String str91 = nameProvider61.getShortName(locale86, "1737-06-04T09:45:17.021+10:00", "");
        java.lang.String str92 = locale86.getDisplayName();
        java.util.Set<java.lang.String> strSet93 = locale86.getUnicodeLocaleAttributes();
        java.lang.String str94 = property60.getAsShortText(locale86);
        org.joda.time.LocalDateTime localDateTime95 = property60.roundCeilingCopy();
        int int96 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime95);
        org.joda.time.LocalDateTime.Property property97 = localDateTime46.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572967099L + "'", long9 == 1644572967099L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "99" + "'", str40, "99");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[millisOfSecond]" + "'", str43, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals(locale69.toString(), "eng_153_English (Canada)");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(copticChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "99" + "'", str80, "99");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals(locale86.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Chinese (China)" + "'", str87, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "539" + "'", str88, "539");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str92, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "35267099" + "'", str94, "35267099");
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(855, 457, 522, 738, 897);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 738 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusHours(22);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusDays(154);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(789);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readableDuration18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withPeriodAdded(readablePeriod20, 478);
        int int23 = localDateTime17.getSecondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572967173L + "'", long9 == 1644572967173L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 27 + "'", int23 == 27);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        boolean boolean7 = timeZone1.observesDaylightTime();
        int int8 = timeZone1.getRawOffset();
        timeZone1.setID("1738-06-04T09:45:04.252");
        java.lang.String str11 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GMT+00:00" + "'", str11, "GMT+00:00");
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfCeilingCopy();
        int int10 = localDateTime9.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        long long13 = property11.remainder();
        org.joda.time.LocalDateTime localDateTime15 = property11.addWrapFieldToCopy(150);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(35160166);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 18 + "'", int10 == 18);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 294567238L + "'", long13 == 294567238L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = copticChronology0.withUTC();
        org.joda.time.Chronology chronology2 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField3 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.year();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        long long6 = copticChronology0.add((long) (byte) -1, (long) 43, 1737);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = copticChronology0.getDateTimeMillis(1644572862871L, 617, 341, 35348391, 637);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 617 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 74690L + "'", long6 == 74690L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        boolean boolean23 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((-35999031L));
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        boolean boolean28 = localDateTime17.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime17.plusSeconds(1743);
        org.joda.time.LocalDateTime.Property property31 = localDateTime17.weekOfWeekyear();
        int int32 = property31.get();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 14 + "'", int32 == 14);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField12 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572967285L + "'", long9 == 1644572967285L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfWeek();
        int int18 = localDateTime15.getSecondOfMinute();
        int int19 = localDateTime15.getMillisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1738-06-04T00:00:00.100" + "'", str16, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Japanese" + "'", str2, "Japanese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        java.lang.String str10 = dateTimeZone4.getShortName(35077641L);
        long long12 = dateTimeZone4.nextTransition(1644572864693L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644572864693L + "'", long12 == 1644572864693L);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.hours();
        org.joda.time.DurationField durationField10 = copticChronology0.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(102);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = property19.getAsText(locale20);
        long long22 = property19.remainder();
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfFloorCopy();
        int int24 = property19.getLeapAmount();
        org.joda.time.DurationField durationField25 = property19.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime27 = property19.addToCopy(0);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        boolean boolean29 = localDateTime27.isSupported(durationFieldType28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusWeeks(873);
        int int32 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime11.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1636 + "'", int12 == 1636);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "329" + "'", str21, "329");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) "1738-06-04T09:43:41.692", (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(485);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusHours(365);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        java.util.Locale locale3 = new java.util.Locale("1738-06-04t09:43:28.618 (539)", "306", "35026152");
        java.lang.String str4 = locale3.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale6.getDisplayVariant();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.lang.String str12 = locale6.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.lang.String str15 = locale3.getDisplayScript(locale11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        long long22 = dateTimeZone17.nextTransition((-1L));
        long long25 = dateTimeZone17.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfMonth();
        int[] intArray28 = localDateTime26.getValues();
        int int29 = localDateTime26.getDayOfMonth();
        boolean boolean30 = locale3.equals((java.lang.Object) int29);
        org.junit.Assert.assertEquals(locale3.toString(), "1738-06-04t09:43:28.618 (539)_306_35026152");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und-306-35026152" + "'", str4, "und-306-35026152");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-35999999L) + "'", long25 == (-35999999L));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 11, 71367417]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology0.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField13 = copticChronology0.seconds();
        org.joda.time.DurationField durationField14 = copticChronology0.centuries();
        org.joda.time.DurationField durationField15 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField3 = copticChronology1.minutes();
        org.joda.time.Chronology chronology4 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 748, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.hourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "709");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder15 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder18 = builder12.setExtension('u', "35026152");
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = builder18.build();
        java.util.Locale.Builder builder21 = builder7.setLocale(locale20);
        java.util.Locale.Builder builder23 = builder7.setRegion("878");
        java.util.Locale.Builder builder24 = builder23.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 0, 1);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str5 = copticChronology4.toString();
        long long9 = copticChronology4.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone10 = copticChronology4.getZone();
        long long13 = dateTimeZone10.convertLocalToUTC(0L, false);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        long long18 = dateTimeZone10.convertLocalToUTC(1644572711941L, true, (long) 661);
        long long20 = dateTimeZone2.getMillisKeepLocal(dateTimeZone10, 1838L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CopticChronology[UTC]" + "'", str5, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1136091124375922418L + "'", long9 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572711941L + "'", long18 == 1644572711941L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 61838L + "'", long20 == 61838L);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        int int25 = localDateTime14.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minus(readablePeriod26);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDateTime14.getValue(997);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 997");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35367530]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35367530]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField10 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.Chronology chronology68 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime63.withMillisOfDay(605);
        int int71 = localDateTime70.getMillisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 552 + "'", int8 == 552);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 605 + "'", int71 == 605);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField7 = copticChronology0.days();
        org.joda.time.DurationField durationField8 = copticChronology0.months();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology18.era();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology18.era();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology18.centuryOfEra();
        org.joda.time.DurationField durationField33 = copticChronology18.hours();
        org.joda.time.DurationField durationField34 = copticChronology18.seconds();
        org.joda.time.DurationField durationField35 = copticChronology18.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setRegion("");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder11 = builder7.setExtension('a', "44");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setRegion("United States");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: United States [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale5.getDisplayScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setScript("1737-06-03T23:46:59.945Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1737-06-03T23:46:59.945Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        boolean boolean21 = dateTimeZone18.isStandardOffset(10L);
        java.util.TimeZone timeZone22 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime15.toDateTime(dateTimeZone18);
        int int25 = dateTimeZone18.getStandardOffset((long) 11);
        long long28 = dateTimeZone18.convertLocalToUTC(1644572702186L, true);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1644536702186L + "'", long28 == 1644536702186L);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        java.lang.String str18 = copticChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = copticChronology0.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19, 35109541);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 35109541");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CopticChronology[UTC]" + "'", str18, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str7 = copticChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology6.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withSecondOfMinute(43);
        int[] intArray17 = copticChronology6.get((org.joda.time.ReadablePartial) localDateTime15, (long) 43);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime5, intArray17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone20);
        org.joda.time.Chronology chronology24 = copticChronology1.withZone(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((-7339421643026L), dateTimeZone20);
        int int26 = localDateTime25.getYearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[UTC]" + "'", str7, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 37 + "'", int26 == 37);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime2.getFieldTypes();
        int int17 = localDateTime2.getDayOfMonth();
        org.joda.time.Chronology chronology18 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime2.getFieldTypes();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime19.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime35.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime35.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime35.plus(readablePeriod51);
        int int53 = localDateTime52.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.yearOfEra();
        boolean boolean55 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.Chronology chronology56 = localDateTime19.getChronology();
        boolean boolean57 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str59 = copticChronology58.toString();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = copticChronology58.add(readablePeriod60, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField64 = copticChronology58.halfdays();
        org.joda.time.DurationField durationField65 = copticChronology58.millis();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology58.millisOfDay();
        org.joda.time.DurationField durationField67 = copticChronology58.centuries();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = copticChronology58.add(readablePeriod68, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = copticChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology58.year();
        org.joda.time.DurationField durationField74 = copticChronology58.months();
        org.joda.time.DateTimeZone dateTimeZone75 = copticChronology58.getZone();
        boolean boolean76 = localDateTime2.equals((java.lang.Object) copticChronology58);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.DateTimeField dateTimeField78 = copticChronology58.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusHours(760);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.millisOfDay();
        org.joda.time.LocalDateTime localDateTime83 = property82.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = localDateTime83.getFields();
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.withDurationAdded(readableDuration85, 366);
        long long89 = copticChronology58.set((org.joda.time.ReadablePartial) localDateTime83, 1644536915681L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 719 + "'", int53 == 719);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CopticChronology[UTC]" + "'", str59, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 35L + "'", long71 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertNotNull(localDateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10597204167719L + "'", long89 == 10597204167719L);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayScript();
        java.lang.String str8 = locale1.getDisplayVariant(locale4);
        java.lang.String str9 = locale0.getDisplayVariant(locale4);
        java.lang.String str10 = locale4.getISO3Language();
        java.lang.String str11 = locale4.getDisplayCountry();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        long long19 = dateTimeZone14.nextTransition((-1L));
        long long21 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.weekyearOfCentury();
        boolean boolean24 = locale4.equals((java.lang.Object) copticChronology22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35999031L) + "'", long21 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology0.add(readablePeriod7, 1136091124375922418L, 100);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField12 = copticChronology0.months();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(700);
        int int14 = localDateTime13.size();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.hourOfDay();
        boolean boolean25 = property24.isLeap();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.getLocalDateTime();
        boolean boolean34 = property24.equals((java.lang.Object) property32);
        org.joda.time.DurationField durationField35 = property32.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property32.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        boolean boolean38 = localDateTime13.isSupported(dateTimeFieldType37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str40 = copticChronology39.toString();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str45 = copticChronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology44.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withSecondOfMinute(43);
        int[] intArray55 = copticChronology44.get((org.joda.time.ReadablePartial) localDateTime53, (long) 43);
        copticChronology39.validate((org.joda.time.ReadablePartial) localDateTime43, intArray55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        boolean boolean60 = dateTimeZone58.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone58);
        org.joda.time.Chronology chronology62 = copticChronology39.withZone(dateTimeZone58);
        java.lang.String str63 = dateTimeZone58.getID();
        org.joda.time.DateTime dateTime64 = localDateTime13.toDateTime(dateTimeZone58);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime13.withDurationAdded(readableDuration65, 681);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35367866]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CopticChronology[UTC]" + "'", str40, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CopticChronology[UTC]" + "'", str45, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        boolean boolean24 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        boolean boolean45 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology47 = dateTime13.getChronology();
        int int48 = property2.getDifference((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime49 = property2.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property2.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2038738 + "'", int48 == 2038738);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime12.getYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(154);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withMillisOfSecond((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekOfWeekyear(962);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 962 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1738 + "'", int14 == 1738);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getLeapAmount();
        org.joda.time.DurationField durationField11 = property5.getLeapDurationField();
        int int12 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property5.withMinimumValue();
        org.joda.time.Interval interval15 = property5.toInterval();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getDisplayScript();
        java.lang.String str24 = locale17.getDisplayVariant(locale20);
        java.lang.String str25 = locale16.getDisplayVariant(locale20);
        java.lang.String str26 = locale20.toLanguageTag();
        java.util.Set<java.lang.String> strSet27 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str28 = property5.getAsShortText(locale20);
        int int29 = property5.getMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "952" + "'", str7, "952");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en-CA" + "'", str26, "en-CA");
        org.junit.Assert.assertNotNull(strSet27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "952" + "'", str28, "952");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1737-06-03T23:45:54.747Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1737-06-03T23:45:54.747Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.days();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 71170266);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.era();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 2, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        boolean boolean1 = locale0.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getUnicodeLocaleType("China");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: China");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(35320495);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35320495 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "75" + "'", str7, "75");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "811");
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale.Builder builder11 = builder6.clearExtensions();
        java.util.Locale.Builder builder12 = builder6.clear();
        java.util.Locale.Builder builder13 = builder6.clear();
        boolean boolean14 = languageRange1.equals((java.lang.Object) builder13);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsText(locale17);
        long long19 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfFloorCopy();
        java.lang.String str21 = property16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property16.getFieldType();
        boolean boolean23 = dateTime9.isSupported(dateTimeFieldType22);
        org.joda.time.Instant instant24 = dateTime9.toInstant();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime43.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime43.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime43.plus(readablePeriod59);
        int int61 = localDateTime60.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.yearOfEra();
        boolean boolean63 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.Chronology chronology64 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime65 = localDateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime65.getZone();
        long long67 = dateTime65.getMillis();
        boolean boolean68 = instant24.equals((java.lang.Object) long67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int70 = instant24.get(dateTimeFieldType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "127" + "'", str18, "127");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[millisOfSecond]" + "'", str21, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 127 + "'", int61 == 127);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1644536968127L + "'", long67 == 1644536968127L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        int int25 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minusDays(782);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(49);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfDay(4);
        int int32 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusHours(34927720);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35368146]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35368146]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone1);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale8 = locale6.stripExtensions();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = dateTimeZone1.getShortName(1644572654500L, locale6);
        long long14 = dateTimeZone1.convertLocalToUTC(1644572641313L, true, (long) 971);
        long long16 = dateTimeZone1.convertUTCToLocal(1644572919622L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572641313L + "'", long14 == 1644572641313L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572919622L + "'", long16 == 1644572919622L);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.year();
        java.lang.String str4 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CopticChronology[UTC]" + "'", str4, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        int int11 = localDateTime7.getCenturyOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35368195]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 18 + "'", int11 == 18);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = strSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.FilteringMode filteringMode10 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList9, filteringMode10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap12);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream14 = languageRangeList2.parallelStream();
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.TimeZone.setDefault(timeZone17);
        java.time.ZoneId zoneId22 = timeZone17.toZoneId();
        boolean boolean23 = strSet15.equals((java.lang.Object) timeZone17);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap25);
        java.util.Set<java.lang.String> strSet27 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.TimeZone.setDefault(timeZone29);
        java.time.ZoneId zoneId34 = timeZone29.toZoneId();
        boolean boolean35 = strSet27.equals((java.lang.Object) timeZone29);
        int int36 = strSet27.size();
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet27, filteringMode37);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + filteringMode10 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode10.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeStream14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 575 + "'", int36 == 575);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode37.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime24.getFieldTypes();
        int int39 = localDateTime24.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getISO3Country();
        int int47 = property43.getMaximumTextLength(locale44);
        java.lang.String str48 = localDateTime24.toString("293", locale44);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        java.util.Set<java.lang.String> strSet51 = locale44.getUnicodeLocaleKeys();
        java.lang.String str52 = localDateTime2.toString("572", locale44);
        int int53 = localDateTime2.size();
        org.joda.time.LocalDateTime.Property property54 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy(586);
        int[] intArray57 = localDateTime56.getValues();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "293" + "'", str48, "293");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "572" + "'", str52, "572");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2324, 5, 29, 35368230]");
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekyear(628);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology0.getZone();
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1644572627999L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfSecond();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsText(locale11);
        org.joda.time.Interval interval13 = property10.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        int int16 = localDateTime4.indexOf(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime4.withSecondOfMinute(256);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "273" + "'", str12, "273");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("503");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=503");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        java.lang.String str8 = localDateTime2.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u82f1\u8a9e" + "'", str8, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 22);
        java.lang.String str17 = dateTimeZone13.getShortName(1644572624742L);
        long long19 = dateTimeZone13.convertUTCToLocal(1644572611311L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        boolean boolean21 = dateTime11.equals((java.lang.Object) localDateTime20);
        long long22 = dateTime11.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = property28.roundHalfEvenCopy();
        int int33 = localDateTime32.getDayOfWeek();
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) 22);
        java.lang.String str40 = dateTimeZone36.getShortName(1644572624742L);
        long long42 = dateTimeZone36.convertUTCToLocal(1644572611311L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        boolean boolean44 = dateTime34.equals((java.lang.Object) localDateTime43);
        long long45 = dateTime34.getMillis();
        int int46 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime34);
        java.lang.String str47 = dateTime11.toString();
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime67);
        int int69 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime50.minusMonths(1636);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.weekyear();
        java.lang.String str73 = property72.getAsString();
        boolean boolean74 = property72.isLeap();
        org.joda.time.LocalDateTime localDateTime76 = property72.setCopy("626");
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        boolean boolean78 = dateTime11.isSupported(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644608611311L + "'", long19 == 1644608611311L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644536968312L + "'", long22 == 1644536968312L);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644608611311L + "'", long42 == 1644608611311L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644536968312L + "'", long45 == 1644536968312L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1738-06-04T09:49:28.312+10:00" + "'", str47, "1738-06-04T09:49:28.312+10:00");
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1612" + "'", str73, "1612");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology1.add(readablePeriod9, (long) '#', 43);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(2101362L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-1L));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusHours(100);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getDisplayVariant();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Country();
        int int16 = property12.getMaximumTextLength(locale13);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale13.getDisplayVariant(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale13);
        java.util.Locale.Builder builder23 = builder20.setExtension('u', "35080628");
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str36 = locale31.getDisplayName(locale35);
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str38 = property29.getAsShortText(locale31);
        java.util.Locale.Builder builder39 = builder23.setLocale(locale31);
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("723");
        java.util.Locale locale42 = builder41.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder41.setLanguage("779");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 779 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "357" + "'", str38, "357");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        timeZone1.setRawOffset((-1));
        boolean boolean4 = timeZone1.observesDaylightTime();
        int int6 = timeZone1.getOffset(1644572718056L);
        java.lang.String str7 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Greenwich Mean Time" + "'", str7, "Greenwich Mean Time");
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property16.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(656);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMonths(213);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours(122);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusWeeks(683);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Country();
        int int6 = property2.getMaximumTextLength(locale3);
        org.joda.time.Interval interval7 = property2.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        boolean boolean28 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = dateTime17.getChronology();
        int int52 = property2.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale54.getDisplayName();
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str59 = locale54.getDisplayName(locale58);
        java.util.Locale.setDefault(category53, locale54);
        java.util.Set<java.lang.Character> charSet61 = locale54.getExtensionKeys();
        java.lang.String str62 = property2.getAsText(locale54);
        int int63 = property2.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime64 = property2.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2038738 + "'", int52 == 2038738);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (China)" + "'", str56, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (China)" + "'", str59, "Chinese (China)");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "10" + "'", str62, "10");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfYear();
        long long18 = copticChronology0.add(1644572683170L, (long) 545, 324);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField20 = copticChronology0.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) copticChronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.CopticChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572859750L + "'", long18 == 1644572859750L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withMillisOfDay((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology14.add(readablePeriod16, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField20 = copticChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology14.era();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime23.getFieldTypes();
        boolean boolean25 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        java.lang.String str31 = localDateTime5.toString("35201923", locale27);
        java.lang.String str32 = locale27.getISO3Language();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572968439L + "'", long9 == 1644572968439L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "35201923" + "'", str31, "35201923");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zho" + "'", str32, "zho");
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Locale locale5 = new java.util.Locale("Greenwich Mean Time");
        java.lang.String str6 = locale0.getDisplayVariant(locale5);
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.lang.String str9 = locale5.getExtension('a');
        java.lang.Object obj10 = locale5.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale5.toString(), "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "greenwich mean time");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "greenwich mean time");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "greenwich mean time");
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = copticChronology0.getDateTimeMillis(1644572933334L, 970, 35106786, 283, 207);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDateTime4.getFields();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withPeriodAdded(readablePeriod6, 384);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.centuryOfEra();
        int int10 = localDateTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 519 + "'", int10 == 519);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale5.getDisplayScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale5);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale18.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder23 = builder3.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder24.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.removeUnicodeLocaleAttribute("1737-06-04T09:44:57.972+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1737-06-04T09:44:57.972+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "530" + "'", str19, "530");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u8a9e" + "'", str22, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        int int16 = localDateTime15.getDayOfWeek();
        int int17 = localDateTime15.getEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMonths(623);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        int[] intArray36 = localDateTime35.getValues();
        boolean boolean37 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime13.plusSeconds(846);
        int int40 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = property10.addToCopy((long) 71189362);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223372007056169000 + 4271361720000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 49 + "'", int25 == 49);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1737, 6, 4, 35368555]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setRegion("947");
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Country();
        int int16 = property12.getMaximumTextLength(locale13);
        java.lang.String str17 = locale13.getDisplayVariant();
        java.lang.String str18 = locale13.getCountry();
        java.util.Locale.Builder builder19 = builder9.setLocale(locale13);
        java.util.Locale.Builder builder20 = builder19.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setLanguageTag("35312705");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 35312705 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        int int18 = property16.getMinimumValue();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Locale locale27 = new java.util.Locale("\uc911\uad6d\uc5b4\uc911\uad6d)", "946");
        java.util.Locale.setDefault(category19, locale27);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("709");
        java.lang.String str31 = locale27.getDisplayVariant(locale30);
        int int32 = property16.getMaximumShortTextLength(locale27);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.withWeekyear(700);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusMillis(593);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfSecond(564);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfCentury();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusMinutes(412);
        boolean boolean49 = locale27.equals((java.lang.Object) 412);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale27.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)_946");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str11 = copticChronology10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology10.add(readablePeriod12, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField16 = copticChronology10.eras();
        boolean boolean17 = localDateTime7.equals((java.lang.Object) copticChronology10);
        org.joda.time.DateTime dateTime18 = localDateTime7.toDateTime();
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.minusMinutes(627);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.yearOfEra();
        int int21 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.withYear(576);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str25 = copticChronology24.toString();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = copticChronology24.add(readablePeriod26, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField30 = copticChronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology24.secondOfDay();
        org.joda.time.DurationField durationField33 = copticChronology24.months();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = copticChronology24.add(readablePeriod34, 0L, 847);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.plus(readablePeriod56);
        long long59 = copticChronology24.set((org.joda.time.ReadablePartial) localDateTime57, (long) 856);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        int int61 = localDateTime60.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 782 + "'", int18 == 782);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35368782 + "'", int21 == 35368782);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[UTC]" + "'", str25, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1644572968782L + "'", long59 == 1644572968782L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 18 + "'", int61 == 18);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(35241205, 450, 665, 627, 93);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 627 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plusMonths(734);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        boolean boolean41 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime(readableInstant50);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.hourOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        boolean boolean62 = dateTime51.isEqual((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.chrono.CopticChronology copticChronology64 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.millisOfSecond();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = property69.getAsText(locale70);
        long long72 = property69.remainder();
        org.joda.time.LocalDateTime localDateTime73 = property69.roundHalfFloorCopy();
        java.lang.String str74 = property69.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property69.getFieldType();
        boolean boolean76 = dateTime51.isSupported(dateTimeFieldType75);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime51.getZone();
        long long78 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.chrono.CopticChronology copticChronology79 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField80 = copticChronology79.dayOfYear();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology79);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.hourOfDay();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = localDateTime86.toDateTime(readableInstant87);
        org.joda.time.Chronology chronology89 = dateTime88.getChronology();
        java.lang.String str90 = dateTime88.toString();
        org.joda.time.Instant instant91 = dateTime88.toInstant();
        int int92 = property20.getDifference((org.joda.time.ReadableInstant) instant91);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(copticChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "919" + "'", str71, "919");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Property[millisOfSecond]" + "'", str74, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 2990770L + "'", long78 == 2990770L);
        org.junit.Assert.assertNotNull(copticChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(chronology89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1737-06-04T09:49:28.919+10:00" + "'", str90, "1737-06-04T09:49:28.919+10:00");
        org.junit.Assert.assertNotNull(instant91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2990770 + "'", int92 == 2990770);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        long long10 = dateTimeZone6.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.plus(readablePeriod29);
        boolean boolean31 = dateTimeZone6.isLocalDateTimeGap(localDateTime23);
        long long33 = dateTimeZone6.previousTransition(0L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfCeilingCopy();
        java.lang.String str11 = property5.getName();
        long long12 = property5.remainder();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str14 = copticChronology13.toString();
        org.joda.time.DurationField durationField15 = copticChronology13.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        long long22 = copticChronology13.set((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minusMinutes(10);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withDayOfYear(100);
        boolean boolean41 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        int int42 = localDateTime27.getMinuteOfHour();
        int int43 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime44 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99" + "'", str7, "99");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfSecond" + "'", str11, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644572969099L + "'", long22 == 1644572969099L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 49 + "'", int42 == 49);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime2.getFieldTypes();
        int int17 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getISO3Country();
        int int25 = property21.getMaximumTextLength(locale22);
        java.lang.String str26 = localDateTime2.toString("293", locale22);
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale22.getDisplayScript(locale27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime31.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime31.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property47 = localDateTime31.millisOfDay();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = property47.getAsShortText(locale48);
        java.lang.String str52 = locale48.getDisplayVariant();
        java.lang.String str53 = locale48.getDisplayName();
        java.lang.String str54 = locale22.getDisplayLanguage(locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = locale48.getUnicodeLocaleType("Property[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Property[weekyear]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "293" + "'", str26, "293");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English (Canada)" + "'", str50, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "35369115" + "'", str51, "35369115");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japanese" + "'", str54, "Japanese");
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str22 = locale17.getDisplayName(locale21);
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale locale24 = java.util.Locale.getDefault(category16);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale.setDefault(category16, locale26);
        java.util.Locale locale28 = java.util.Locale.getDefault(category16);
        int int29 = property14.getMaximumShortTextLength(locale28);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (China)" + "'", str22, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.secondOfDay();
        org.joda.time.DurationField durationField10 = copticChronology8.weeks();
        long long14 = copticChronology8.add((long) (byte) -1, (long) 43, 1737);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology8.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withTime(23, 4, 9, 0);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str30 = copticChronology29.toString();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = copticChronology29.add(readablePeriod31, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField35 = copticChronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology29.centuryOfEra();
        long long41 = copticChronology29.add(1644572579020L, 1644572639605L, 648);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int44 = localDateTime43.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusDays(687);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.monthOfYear();
        int int48 = localDateTime43.getYearOfCentury();
        int[] intArray50 = copticChronology29.get((org.joda.time.ReadablePartial) localDateTime43, 1644572701420L);
        copticChronology8.validate((org.joda.time.ReadablePartial) localDateTime18, intArray50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime18.weekyear();
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("709");
        java.lang.String str55 = locale54.getISO3Country();
        java.util.Locale locale58 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        boolean boolean59 = locale58.hasExtensions();
        java.lang.String str60 = locale54.getDisplayCountry(locale58);
        java.util.Locale locale61 = locale58.stripExtensions();
        java.lang.String str62 = property52.getAsText(locale61);
        java.lang.String str63 = timeZone5.getDisplayName(false, 0, locale61);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 74690L + "'", long14 == 74690L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CopticChronology[UTC]" + "'", str30, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1067327643043060L + "'", long41 == 1067327643043060L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 70 + "'", int48 == 70);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1738, 6, 4, 35101420]");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(locale58.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1738" + "'", str62, "1738");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GMT" + "'", str63, "GMT");
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        boolean boolean6 = timeZone5.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(43);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMonths((int) (byte) 100);
        java.lang.String str27 = localDateTime26.toString();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        boolean boolean30 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        int int31 = localDateTime29.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1732-09-03T09:49:29.228" + "'", str27, "1732-09-03T09:49:29.228");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray7 = copticChronology0.get(readablePeriod5, (long) 151);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField16 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        int int1 = strSet0.size();
        java.util.Locale locale5 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        boolean boolean7 = strSet0.equals((java.lang.Object) locale5);
        java.lang.String str8 = locale5.getScript();
        java.lang.String str9 = locale5.getVariant();
        org.junit.Assert.assertNotNull(strSet0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals(locale5.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str9, "1738-06-04t09:43:28.618 (539)");
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = dateTimeZone1.getShortName((long) 14, locale6);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsText(locale14);
        org.joda.time.Interval interval16 = property13.toInterval();
        org.joda.time.LocalDateTime localDateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(10);
        int int20 = localDateTime19.getEra();
        boolean boolean21 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        int[] intArray30 = localDateTime29.getValues();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.hourOfDay();
        boolean boolean32 = property31.isLeap();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.getLocalDateTime();
        boolean boolean41 = property31.equals((java.lang.Object) property39);
        org.joda.time.DurationField durationField42 = property39.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property39.getFieldType();
        boolean boolean44 = localDateTime19.isSupported(dateTimeFieldType43);
        int int45 = localDateTime19.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "320" + "'", str15, "320");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1737, 6, 4, 35369321]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder3.setRegion("293");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.removeUnicodeLocaleAttribute("153");
        java.util.Locale.Builder builder11 = builder7.clear();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "35194224");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_293_#x-709");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withPeriodAdded(readablePeriod9, 723);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        boolean boolean35 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.year();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfCeilingCopy();
        boolean boolean39 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime4.minusMillis((int) 'u');
        org.joda.time.LocalDateTime.Property property42 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = property42.roundCeilingCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime2.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("1738-04-10T09:47:10.269", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        int int9 = property5.getMinimumValueOverall();
        org.joda.time.Interval interval10 = property5.toInterval();
        java.lang.String str11 = property5.getAsText();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "380" + "'", str11, "380");
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfHalfday();
        java.lang.String str14 = copticChronology0.toString();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField18 = copticChronology0.minutes();
        org.joda.time.DurationField durationField19 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572969417L + "'", long9 == 1644572969417L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        boolean boolean7 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 2020);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(60);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime11.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withWeekyear(733);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(541);
        int int8 = localDateTime3.getMillisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35369487 + "'", int8 == 35369487);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMaximumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale5.getDisplayScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale5);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale18.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder23 = builder3.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("528");
        java.util.Locale.Builder builder27 = builder24.clear();
        java.util.Locale.Builder builder28 = builder27.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder27.setRegion("1738-06-04T00:44:27.284");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1738-06-04T00:44:27.284 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "550" + "'", str19, "550");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u8a9e" + "'", str22, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = copticChronology0.get(readablePeriod13, (long) 123, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        boolean boolean11 = property10.isLeap();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale18.getDisplayVariant(locale20);
        java.util.Locale.setDefault(locale20);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = property29.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = property29.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = property29.roundHalfCeilingCopy();
        org.joda.time.Interval interval34 = property29.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = property40.getAsText(locale41);
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale48 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str49 = locale43.getDisplayName(locale48);
        java.lang.String str50 = locale48.getScript();
        java.lang.String str51 = locale48.getDisplayName();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = property29.getAsText(locale48);
        java.lang.String str54 = locale20.getDisplayVariant(locale48);
        java.lang.String str56 = locale20.getExtension('u');
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        int int58 = property10.getMaximumShortTextLength(locale20);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "781" + "'", str19, "781");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "781" + "'", str42, "781");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale48.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str51, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1738-06-04t09:43:28.618" + "'", str52, "1738-06-04t09:43:28.618");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "781" + "'", str53, "781");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int69 = property25.compareTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean70 = strSet18.remove((java.lang.Object) property25);
        org.joda.time.LocalDateTime localDateTime72 = property25.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime73 = property25.roundHalfCeilingCopy();
        int int74 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.plusHours(35028711);
        int int77 = localDateTime76.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDateTime76.getFieldType(886);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 886");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 49 + "'", int77 == 49);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.era();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.era();
        int int13 = property12.getMaximumValueOverall();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.Interval interval22 = property19.toInterval();
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        boolean boolean44 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        boolean boolean65 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime64);
        int int66 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean68 = dateTime54.equals((java.lang.Object) 0L);
        org.joda.time.DateTime dateTime69 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        java.lang.String str70 = dateTime54.toString();
        int int71 = property12.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DurationField durationField72 = property12.getRangeDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "822" + "'", str21, "822");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1737-06-04T09:49:29.822+10:00" + "'", str70, "1737-06-04T09:49:29.822+10:00");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(durationField72);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 22);
        java.lang.String str5 = dateTimeZone1.getShortName(1644572624742L);
        long long7 = dateTimeZone1.convertUTCToLocal(1644572611311L);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = localDateTime21.toString(dateTimeFormatter27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withDurationAdded(readableDuration29, 799);
        org.joda.time.LocalDateTime.Property property32 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfCentury();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.secondOfMinute();
        int int36 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644608611311L + "'", long7 == 1644608611311L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1738-06-04T09:49:29.876" + "'", str28, "1738-06-04T09:49:29.876");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(102);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusDays(375);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes(625);
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.millisOfSecond();
        int int26 = localDateTime19.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.year();
        org.joda.time.LocalDateTime localDateTime25 = property23.setCopy(444);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property23.getFieldType();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.property(dateTimeFieldType26);
        long long28 = property27.remainder();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 13254569918L + "'", long28 == 13254569918L);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int2 = localDateTime1.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.year();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField8 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale8, locale9, locale10, locale14, locale16, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap26);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet30, filteringMode31);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream33 = languageRangeList27.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.parse("eng", strMap35);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.millisOfSecond();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = locale54.getISO3Language();
        java.util.Locale locale56 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.millisOfSecond();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = property62.getAsText(locale63);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale37, locale38, locale45, locale47, locale48, locale49, locale51, locale54, locale56, locale63, locale65, locale66 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter(languageRangeList36, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale locale71 = java.util.Locale.lookup(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream72 = languageRangeList27.stream();
        org.joda.time.chrono.CopticChronology copticChronology73 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str74 = copticChronology73.toString();
        long long79 = copticChronology73.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField80 = copticChronology73.secondOfDay();
        org.joda.time.DateTimeField dateTimeField81 = copticChronology73.monthOfYear();
        org.joda.time.DurationField durationField82 = copticChronology73.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((java.lang.Object) languageRangeList27, (org.joda.time.Chronology) copticChronology73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeStream33);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "80" + "'", str46, "80");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English (Canada)" + "'", str52, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eng" + "'", str55, "eng");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "80" + "'", str64, "80");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNotNull(languageRangeStream72);
        org.junit.Assert.assertNotNull(copticChronology73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CopticChronology[UTC]" + "'", str74, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-50149497600000L) + "'", long79 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(697);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMonths(443);
        org.joda.time.DateTime dateTime15 = localDateTime9.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMinutes(989);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.plus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime48.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        boolean boolean58 = localDateTime35.isSupported(dateTimeFieldType57);
        boolean boolean59 = dateTime15.isSupported(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = copticChronology0.hours();
        org.joda.time.DurationField durationField16 = copticChronology0.hours();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMinutes(35048859);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths(42);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusSeconds(969);
        int[] intArray37 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime35, (long) 35181090);
        org.joda.time.DurationField durationField38 = copticChronology0.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572970136L + "'", long9 == 1644572970136L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1686, 4, 23, 35181090]");
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        int int25 = localDateTime14.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minus(readablePeriod26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime27.toString(dateTimeFormatter28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime32.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property48 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime.Property property49 = localDateTime32.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy(1838);
        org.joda.time.LocalDateTime localDateTime52 = property49.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = property49.addWrapFieldToCopy(114);
        boolean boolean55 = localDateTime27.isAfter((org.joda.time.ReadablePartial) localDateTime54);
        int int56 = localDateTime27.getYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime27.toString(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35370158]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35370158]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1737-05-30T09:49:30.158" + "'", str29, "1737-05-30T09:49:30.158");
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1737 + "'", int56 == 1737);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1737-05-30T09:49:30.158" + "'", str58, "1737-05-30T09:49:30.158");
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int2 = localDateTime1.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays(687);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMillis((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks(266);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMillis(82063728);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 322 + "'", int26 == 322);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) 'a');
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundFloorCopy();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int23 = localDateTime11.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime11.withDurationAdded(readableDuration24, 744);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(290);
        int int29 = localDateTime26.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "242" + "'", str7, "242");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 242 + "'", int23 == 242);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("eng", strMap2);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream4 = languageRangeList3.stream();
        boolean boolean5 = strSet0.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3);
        java.util.Iterator<java.lang.String> strItor6 = strSet0.iterator();
        boolean boolean8 = strSet0.add("358");
        java.util.Iterator<java.lang.String> strItor9 = strSet0.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("eng", strMap11);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfSecond();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsText(locale39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale13, locale14, locale21, locale23, locale24, locale25, locale27, locale30, locale32, locale39, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList44);
        boolean boolean47 = strSet0.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream48 = languageRangeList12.parallelStream();
        org.joda.time.tz.Provider provider49 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider49);
        org.joda.time.DateTimeZone.setProvider(provider49);
        java.util.Set<java.lang.String> strSet52 = provider49.getAvailableIDs();
        int int53 = strSet52.size();
        java.lang.String str54 = java.util.Locale.lookupTag(languageRangeList12, (java.util.Collection<java.lang.String>) strSet52);
        int int55 = strSet52.size();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeStream4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "274" + "'", str22, "274");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "274" + "'", str40, "274");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeStream48);
        org.junit.Assert.assertNotNull(provider49);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 575 + "'", int53 == 575);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 575 + "'", int55 == 575);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        long long11 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property10.addToCopy((-7339421563764L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -7339421563764");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "302" + "'", str7, "302");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 13254570302L + "'", long11 == 13254570302L);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(1738);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int69 = property25.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property25.getFieldType();
        boolean boolean71 = localDateTime17.isSupported(dateTimeFieldType70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = property72.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minus(readablePeriod75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.minus(readablePeriod77);
        int int79 = localDateTime74.getWeekOfWeekyear();
        int[] intArray81 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime74, 74690L);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime74.minusMinutes(153);
        java.lang.String str85 = localDateTime74.toString("531");
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 328 + "'", int19 == 328);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1686, 4, 23, 74690]");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "531" + "'", str85, "531");
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-2273576151952075L));
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        java.lang.String str11 = localDateTime4.toString("527");
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.minusMonths(94);
        int int16 = localDateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "527" + "'", str11, "527");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int2 = localDateTime1.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withWeekyear((int) 'u');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusSeconds(661);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withSecondOfMinute(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(723);
        org.joda.time.LocalDateTime localDateTime16 = property12.addToCopy(158400000);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths((int) (byte) -1);
        int int19 = localDateTime18.getEra();
        int int20 = localDateTime18.getYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "461" + "'", str7, "461");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3037465 + "'", int20 == 3037465);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.millisOfDay();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.DurationField durationField16 = copticChronology14.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        long long23 = copticChronology14.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DurationField durationField24 = copticChronology14.hours();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology14.year();
        boolean boolean27 = localDateTime13.equals((java.lang.Object) copticChronology14);
        long long33 = copticChronology14.getDateTimeMillis((long) '4', 22, 44, 4, 710);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime36.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime36.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime36.plus(readablePeriod52);
        int int54 = localDateTime53.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.minusMonths(3);
        int int57 = localDateTime53.getYear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime53.secondOfMinute();
        int int59 = property58.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime60 = property58.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        java.util.TimeZone timeZone65 = dateTimeZone62.toTimeZone();
        long long67 = dateTimeZone62.nextTransition((-1L));
        int int69 = dateTimeZone62.getStandardOffset((long) 'x');
        java.lang.String str70 = dateTimeZone62.getID();
        org.joda.time.DateTime dateTime71 = localDateTime60.toDateTime(dateTimeZone62);
        long long73 = copticChronology14.set((org.joda.time.ReadablePartial) localDateTime60, 1644572746937L);
        int[] intArray75 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime60, 1644572838688L);
        org.joda.time.DateTimeField dateTimeField76 = copticChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644572970475L + "'", long23 == 1644572970475L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 81844710L + "'", long33 == 81844710L);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 475 + "'", int54 == 475);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1738 + "'", int57 == 1738);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572971000L + "'", long73 == 1644572971000L);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1738, 6, 4, 35238688]");
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(10);
        long long22 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime20, (long) 'a');
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.centuryOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withCenturyOfEra(560);
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644537600010L + "'", long22 == 1644537600010L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withPeriodAdded(readablePeriod9, 723);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        boolean boolean35 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.year();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfCeilingCopy();
        boolean boolean39 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime4.minusMillis((int) 'u');
        org.joda.time.LocalDateTime.Property property42 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime4.minusSeconds(962);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusSeconds(0);
        int[] intArray47 = localDateTime46.getValues();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1738, 6, 4, 34308517]");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str7 = copticChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology6.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withSecondOfMinute(43);
        int[] intArray17 = copticChronology6.get((org.joda.time.ReadablePartial) localDateTime15, (long) 43);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime5, intArray17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone20);
        org.joda.time.Chronology chronology24 = copticChronology1.withZone(dateTimeZone20);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime27.getFieldTypes();
        long long43 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime27, (long) 0);
        long long45 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime27, (-35999999L));
        org.joda.time.DateTimeField dateTimeField46 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[UTC]" + "'", str7, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644572970551L + "'", long43 == 1644572970551L);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572970551L + "'", long45 == 1644572970551L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String str4 = nameProvider0.getName(locale1, "fr", "572");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        int[] intArray14 = localDateTime13.getValues();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime13.getFieldTypes();
        int int17 = localDateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime18 = localDateTime13.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = property24.roundHalfCeilingCopy();
        org.joda.time.Interval interval29 = property24.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = property35.getAsText(locale36);
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale43 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str44 = locale38.getDisplayName(locale43);
        java.lang.String str45 = locale43.getScript();
        java.lang.String str46 = locale43.getDisplayName();
        java.lang.String str47 = locale43.getDisplayLanguage();
        java.lang.String str48 = property24.getAsText(locale43);
        boolean boolean49 = locale43.hasExtensions();
        boolean boolean50 = dateTime18.equals((java.lang.Object) locale43);
        java.lang.String str51 = locale43.getCountry();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean55 = dateTimeZone53.isStandardOffset((long) 22);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = dateTimeZone53.getName(1644572630789L, locale57);
        boolean boolean60 = locale57.hasExtensions();
        java.util.Locale locale63 = new java.util.Locale("35150933", "369");
        java.lang.String str64 = locale57.getDisplayName(locale63);
        java.lang.String str65 = locale43.getDisplayCountry(locale57);
        java.lang.String str68 = nameProvider0.getShortName(locale57, "Property[secondOfMinute]", "1737-06-04T09:44:47.119+10:00");
        java.util.Locale locale69 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale69.getISO3Country();
        boolean boolean72 = locale69.hasExtensions();
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str74 = locale57.getDisplayLanguage(locale69);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1737, 6, 4, 35370579]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "579" + "'", str37, "579");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale43.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (China)" + "'", str44, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str46, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1738-06-04t09:43:28.618" + "'", str47, "1738-06-04t09:43:28.618");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "579" + "'", str48, "579");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "539" + "'", str51, "539");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "German (Germany)" + "'", str58, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals(locale63.toString(), "35150933_369");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "German (Germany)" + "'", str64, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "539" + "'", str65, "539");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str74, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        java.util.Locale locale3 = new java.util.Locale("1737-06-04T09:44:05.259+10:00", "507", "889");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "1737-06-04t09:44:05.259+10:00_507_889");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "507" + "'", str4, "507");
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(102);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        boolean boolean32 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        boolean boolean59 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField71 = copticChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.hourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        boolean boolean80 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime79);
        int int81 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime69);
        int int82 = property38.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property38.getFieldType();
        boolean boolean84 = dateTime31.isSupported(dateTimeFieldType83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime11.withField(dateTimeFieldType83, 271);
        org.joda.time.LocalDateTime.Property property87 = localDateTime11.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime11.withPeriodAdded(readablePeriod88, 323);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime90);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        org.joda.time.DurationField durationField10 = copticChronology8.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        long long17 = copticChronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.DurationField durationField18 = copticChronology8.hours();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology8.year();
        boolean boolean21 = localDateTime7.equals((java.lang.Object) copticChronology8);
        long long27 = copticChronology8.getDateTimeMillis((long) '4', 22, 44, 4, 710);
        org.joda.time.DateTimeZone dateTimeZone28 = copticChronology8.getZone();
        boolean boolean30 = dateTimeZone28.isStandardOffset(1644572683170L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572970654L + "'", long17 == 1644572970654L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 81844710L + "'", long27 == 81844710L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        boolean boolean10 = strSet9.isEmpty();
        java.util.Iterator<java.lang.String> strItor11 = strSet9.iterator();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField13 = copticChronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekyear(733);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMonths(541);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        boolean boolean22 = strSet9.equals((java.lang.Object) readableDuration20);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField4 = copticChronology3.hours();
        int int5 = copticChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.era();
        boolean boolean7 = strSet2.remove((java.lang.Object) copticChronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = copticChronology3.withZone(dateTimeZone8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        boolean boolean30 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        boolean boolean51 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean54 = dateTime40.equals((java.lang.Object) 0L);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime40.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str59 = dateTimeZone58.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        java.lang.String str62 = dateTimeZone58.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone58);
        boolean boolean64 = dateTimeZone58.isFixed();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(1644572629286L, dateTimeZone58);
        long long67 = dateTimeZone55.getMillisKeepLocal(dateTimeZone58, 5431484671424L);
        org.joda.time.Chronology chronology68 = chronology9.withZone(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology68);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 5431448671424L + "'", long67 == 5431448671424L);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField15 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572970759L + "'", long9 == 1644572970759L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffset(0L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        boolean boolean9 = timeZone8.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.minusMillis(734);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime63.withWeekyear(748);
        int int72 = localDateTime63.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime63.plusYears(0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusHours(808);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withMonthOfYear(708);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 708 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 781 + "'", int8 == 781);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.months();
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1643708669699L, (org.joda.time.Chronology) copticChronology1);
        java.lang.String str7 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.weekyear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[UTC]" + "'", str7, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        java.time.ZoneId zoneId7 = timeZone6.toZoneId();
        java.lang.String str8 = timeZone6.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Greenwich Mean Time" + "'", str8, "Greenwich Mean Time");
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        java.util.TimeZone timeZone9 = dateTimeZone4.toTimeZone();
        java.util.TimeZone.setDefault(timeZone9);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("1737-06-04T09:45:13.852+10:00");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = timeZone9.getDisplayName(false, 35084417, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35084417");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("1737-06-04T09:47:56.624+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '1737-06-04T09:47:56.624+10:00' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay(10);
        int int16 = localDateTime13.size();
        int int17 = localDateTime13.getMinuteOfHour();
        int int18 = localDateTime13.size();
        org.joda.time.DurationFieldType durationFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withFieldAdded(durationFieldType19, 36083869);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 49 + "'", int17 == 49);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.getID();
        boolean boolean27 = dateTimeZone24.isStandardOffset(10L);
        java.util.TimeZone timeZone28 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime21.toDateTime(dateTimeZone24);
        java.util.TimeZone timeZone30 = dateTimeZone24.toTimeZone();
        timeZone30.setRawOffset(42);
        boolean boolean33 = timeZone4.hasSameRules(timeZone30);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.TimeZone.setDefault(timeZone37);
        java.time.ZoneId zoneId42 = timeZone37.toZoneId();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone(zoneId42);
        timeZone43.setID("English (Canada)");
        boolean boolean46 = timeZone35.hasSameRules(timeZone43);
        boolean boolean47 = timeZone30.hasSameRules(timeZone35);
        java.util.Date date48 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = timeZone30.inDaylightTime(date48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology0.add(readablePeriod9, 1644572701073L, 876);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField14 = copticChronology0.months();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644572701073L + "'", long12 == 1644572701073L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        long long10 = dateTimeZone6.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.plus(readablePeriod29);
        boolean boolean31 = dateTimeZone6.isLocalDateTimeGap(localDateTime23);
        java.lang.String str33 = localDateTime23.toString("380");
        org.joda.time.DurationFieldType durationFieldType34 = null;
        boolean boolean35 = localDateTime23.isSupported(durationFieldType34);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "380" + "'", str33, "380");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField8 = copticChronology7.hours();
        int int9 = copticChronology7.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.clockhourOfDay();
        org.joda.time.DurationField durationField12 = copticChronology7.millis();
        org.joda.time.DurationField durationField13 = copticChronology7.weeks();
        org.joda.time.DurationField durationField14 = copticChronology7.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(392, 170, 693, 593, 884, 499, 691, (org.joda.time.Chronology) copticChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 593 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        int int8 = localDateTime4.getYearOfCentury();
        java.lang.String str10 = localDateTime4.toString("989");
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.era();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        java.lang.String[] strArray32 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        boolean boolean36 = strSet33.equals((java.lang.Object) locale35);
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.lang.String str38 = property22.getAsText(locale35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.toLanguageTag();
        java.lang.String str41 = property22.getAsShortText(locale39);
        int int42 = property22.getMinimumValue();
        org.joda.time.ReadableInstant readableInstant43 = null;
        long long44 = property22.getDifferenceAsLong(readableInstant43);
        org.joda.time.LocalDateTime localDateTime45 = property22.roundHalfFloorCopy();
        int int46 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int int47 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property11.getFieldType();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 38 + "'", int8 == 38);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "989" + "'", str10, "989");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "37" + "'", str38, "37");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fr" + "'", str40, "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "37" + "'", str41, "37");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        int int4 = localDateTime3.getYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minus(readableDuration5);
        int int7 = localDateTime6.getWeekyear();
        int int8 = localDateTime6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1738 + "'", int4 == 1738);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1738 + "'", int7 == 1738);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.lang.String str6 = timeZone5.getID();
        timeZone5.setID("1738-06-04T09:44:49.900");
        timeZone5.setRawOffset(480);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = timeZone5.getDisplayName(true, 67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 67");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT+10:00" + "'", str6, "GMT+10:00");
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        boolean boolean30 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        boolean boolean51 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean54 = dateTime40.equals((java.lang.Object) 0L);
        org.joda.time.DateTime dateTime55 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        long long56 = dateTime55.getMillis();
        long long57 = dateTime55.getMillis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "79" + "'", str7, "79");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-7307885428921L) + "'", long56 == (-7307885428921L));
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-7307885428921L) + "'", long57 == (-7307885428921L));
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Chronology chronology22 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withHourOfDay(15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond(35329682);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35329682 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        long long11 = instant10.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str13 = copticChronology12.toString();
        long long18 = copticChronology12.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = copticChronology12.getZone();
        java.lang.String str23 = dateTimeZone21.getShortName(1644572624307L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        java.util.Locale locale28 = new java.util.Locale("973", "1737-06-04T09:45:15.764+10:00");
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getDisplayScript();
        java.lang.String str31 = dateTimeZone21.getShortName(1644572883257L, locale28);
        boolean boolean32 = instant10.equals((java.lang.Object) locale28);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7339421428884L) + "'", long11 == (-7339421428884L));
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CopticChronology[UTC]" + "'", str13, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-50149497600000L) + "'", long18 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertEquals(locale28.toString(), "973_1737-06-04T09:45:15.764+10:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str17 = locale12.getDisplayName(locale16);
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale19 = java.util.Locale.getDefault(category11);
        java.lang.String str20 = locale19.getVariant();
        java.lang.String str21 = locale19.getVariant();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category23, locale24);
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getDisplayScript();
        java.lang.String str33 = locale29.getDisplayVariant();
        java.lang.String str34 = locale29.getDisplayScript();
        java.util.Locale.setDefault(category23, locale29);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayCountry();
        java.lang.String str38 = locale29.getDisplayScript(locale36);
        java.lang.String str39 = locale22.getDisplayCountry(locale36);
        java.lang.String str40 = locale19.getDisplayScript(locale22);
        java.lang.String str41 = property10.getAsShortText(locale22);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (China)" + "'", str17, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (Canada)" + "'", str30, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uae08" + "'", str41, "\uae08");
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale6.getDisplayVariant();
        java.lang.String str11 = locale6.getDisplayScript();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.lang.String str15 = locale6.getDisplayScript(locale13);
        java.lang.String str16 = locale6.getVariant();
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Locale.setDefault(locale19);
        java.lang.String str25 = nameProvider17.getName(locale19, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale29.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str34 = locale29.getDisplayName(locale33);
        java.util.Locale.setDefault(category28, locale29);
        java.util.Locale locale36 = java.util.Locale.getDefault(category28);
        java.lang.String str37 = locale26.getDisplayLanguage(locale36);
        java.lang.String str40 = nameProvider17.getShortName(locale26, "Greenwich Mean Time", "");
        java.lang.String str41 = locale6.getDisplayName(locale26);
        java.lang.String str42 = locale26.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Taiwan" + "'", str14, "Taiwan");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u6587" + "'", str37, "\u65e5\u6587");
        org.junit.Assert.assertNull(str40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u82f1\u8a9e\u30ab\u30ca\u30c0)" + "'", str41, "\u82f1\u8a9e\u30ab\u30ca\u30c0)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "jpn" + "'", str42, "jpn");
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology9.getDateTimeMillis(1644572914379L, 648, 124, 554, 215);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 648 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        int int8 = dateTimeZone2.getOffset(0L);
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1644572611311L, dateTimeZone2);
        java.lang.String str11 = dateTimeZone2.toString();
        java.lang.String str12 = dateTimeZone2.toString();
        java.lang.String str13 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1738-06-04T09:45:21.818+120:00");
        java.lang.String str2 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays((int) 'u');
        int int20 = localDateTime15.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.withYearOfEra(455);
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str25 = copticChronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology24.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology24.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfDay(10);
        long long46 = copticChronology24.set((org.joda.time.ReadablePartial) localDateTime44, (long) 'a');
        boolean boolean48 = localDateTime44.equals((java.lang.Object) 1613000665015L);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minus(readablePeriod49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime dateTime62 = localDateTime50.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = property23.getDifference((org.joda.time.ReadableInstant) dateTime60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 8979328800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[UTC]" + "'", str25, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644537600010L + "'", long46 == 1644537600010L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-7339421428755L) + "'", long61 == (-7339421428755L));
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.hours();
        org.joda.time.DurationField durationField3 = copticChronology0.hours();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) "297");
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology33.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        int[] intArray45 = localDateTime44.getValues();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        int[] intArray56 = localDateTime55.getValues();
        copticChronology33.validate((org.joda.time.ReadablePartial) localDateTime47, intArray56);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime32, intArray56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField60 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology0.year();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35371336]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35371336]");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1737, 6, 4, 35371336]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1737, 6, 4, 35371336]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getLanguage();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getDisplayScript();
        java.lang.String str20 = locale13.getDisplayVariant(locale16);
        java.lang.String str21 = locale12.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.lang.String str24 = locale23.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        timeZone1.setRawOffset((-1));
        timeZone1.setRawOffset(207);
        int int6 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(102);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusDays(375);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        int int24 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusSeconds(26);
        int int27 = localDateTime22.getMinuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 103 + "'", int24 == 103);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 49 + "'", int27 == 49);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale.setDefault(locale2);
        java.lang.String str8 = nameProvider0.getName(locale2, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str21 = locale16.getDisplayName(locale20);
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str23 = property14.getAsShortText(locale16);
        java.lang.String str24 = locale2.getDisplayLanguage(locale16);
        java.lang.String str26 = locale2.getExtension('a');
        java.lang.String str27 = locale2.getCountry();
        java.util.Set<java.lang.String> strSet28 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale2.getCountry();
        java.util.Locale locale31 = new java.util.Locale("811");
        java.lang.String str32 = locale2.getDisplayVariant(locale31);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "English (Canada)" + "'", str4, "English (Canada)");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (China)" + "'", str21, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "510" + "'", str23, "510");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u82f1\u6587" + "'", str24, "\u82f1\u6587");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CA" + "'", str27, "CA");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CA" + "'", str29, "CA");
        org.junit.Assert.assertEquals(locale31.toString(), "811");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusMinutes(884);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withWeekyear(179);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withDayOfMonth(644);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 644 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDurationAdded(readableDuration19, 103981);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay((int) '#');
        boolean boolean36 = dateTimeZone25.isLocalDateTimeGap(localDateTime35);
        int int37 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField40 = copticChronology39.hours();
        int int41 = copticChronology39.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.util.TimeZone timeZone46 = dateTimeZone43.toTimeZone();
        org.joda.time.Chronology chronology47 = copticChronology39.withZone(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone43.isLocalDateTimeGap(localDateTime48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(13254255130L, dateTimeZone43);
        boolean boolean51 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime52 = localDateTime35.toDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property53 = localDateTime35.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("274");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int) '#');
        boolean boolean28 = dateTimeZone17.isLocalDateTimeGap(localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone17);
        long long31 = dateTimeZone17.previousTransition(1644572610881L);
        long long34 = dateTimeZone17.convertLocalToUTC((long) (short) 1, true);
        org.joda.time.Chronology chronology35 = copticChronology0.withZone(dateTimeZone17);
        boolean boolean37 = dateTimeZone17.equals((java.lang.Object) "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withDayOfWeek(835);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 835 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572610881L + "'", long31 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-35999999L) + "'", long34 == (-35999999L));
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths((int) (byte) 100);
        int int18 = localDateTime15.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusSeconds(102);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusSeconds(955);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.monthOfYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusDays(500);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("119");
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getScript();
        java.lang.String str4 = locale2.getISO3Country();
        boolean boolean5 = locale2.hasExtensions();
        java.lang.String str6 = locale2.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getDisplayCountry();
        java.lang.String str9 = locale2.getDisplayLanguage(locale7);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsText(locale16);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale23 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str24 = locale18.getDisplayName(locale23);
        java.lang.String str25 = locale7.getDisplayVariant(locale23);
        java.lang.String str26 = locale1.getDisplayLanguage(locale7);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime29.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property45 = localDateTime29.millisOfDay();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = property45.getAsShortText(locale46);
        java.lang.String str50 = locale46.getDisplayVariant();
        java.lang.String str51 = locale46.getDisplayName();
        java.lang.String str52 = locale7.getDisplayLanguage(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = locale46.getUnicodeLocaleType("1738-06-04T09:46:29.139");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1738-06-04T09:46:29.139");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KOR" + "'", str4, "KOR");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u671d\u9c9c\u6587" + "'", str9, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "658" + "'", str17, "658");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale23.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (China)" + "'", str24, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (Canada)" + "'", str48, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "35371658" + "'", str49, "35371658");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (Canada)" + "'", str51, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese" + "'", str52, "Chinese");
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plus(readablePeriod18);
        int int20 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withYear(87);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1738 + "'", int20 == 1738);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1737-06-04T09:43:32.299+10:00");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("106");
        timeZone7.setRawOffset((-1));
        java.time.ZoneId zoneId10 = timeZone7.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId10);
        boolean boolean12 = timeZone5.hasSameRules(timeZone11);
        timeZone5.setRawOffset(769);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfCentury();
        int int26 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusYears(700);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusMillis(51);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.dayOfMonth();
        java.util.Date date34 = localDateTime28.toDate();
        boolean boolean35 = timeZone5.inDaylightTime(date34);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Thu Jun 04 09:49:31 GMT 2437");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.Chronology chronology5 = copticChronology0.withUTC();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str7 = copticChronology6.toString();
        org.joda.time.DurationField durationField8 = copticChronology6.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        long long15 = copticChronology6.set((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusMinutes(10);
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withPeriodAdded(readablePeriod19, 999);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks(28);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = property24.setCopy("973");
        long long28 = chronology5.set((org.joda.time.ReadablePartial) localDateTime26, (-35999265L));
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[UTC]" + "'", str7, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572971705L + "'", long15 == 1644572971705L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 38 + "'", int18 == 38);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-22480035628295L) + "'", long28 == (-22480035628295L));
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.lang.String str10 = dateTime9.toString();
        java.lang.String str11 = dateTime9.toString();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str13 = copticChronology12.toString();
        org.joda.time.DurationField durationField14 = copticChronology12.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        long long21 = copticChronology12.set((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusMinutes(10);
        int int24 = localDateTime23.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withPeriodAdded(readablePeriod25, 999);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        boolean boolean42 = localDateTime27.isSupported(dateTimeFieldType41);
        boolean boolean43 = dateTime9.isSupported(dateTimeFieldType41);
        long long44 = dateTime9.getMillis();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours(760);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = localDateTime47.toDateTime(dateTimeZone50);
        org.joda.time.Instant instant53 = dateTime52.toInstant();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime52.getZone();
        org.joda.time.Instant instant55 = dateTime52.toInstant();
        boolean boolean56 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        int[] intArray65 = localDateTime64.getValues();
        org.joda.time.LocalDateTime.Property property66 = localDateTime64.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDateTime64.getFieldTypes();
        int int68 = localDateTime64.getMonthOfYear();
        org.joda.time.DateTime dateTime69 = localDateTime64.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField71 = copticChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.hourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology78 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = copticChronology78.dayOfYear();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime72.withFields((org.joda.time.ReadablePartial) localDateTime82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime72.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology88 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField89 = copticChronology88.dayOfYear();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology88);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.minusDays((int) (byte) 0);
        boolean boolean93 = localDateTime87.isAfter((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.Chronology chronology94 = localDateTime90.getChronology();
        org.joda.time.LocalDateTime.Property property95 = localDateTime90.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = property95.getFieldType();
        int int97 = localDateTime64.indexOf(dateTimeFieldType96);
        int int98 = dateTime52.get(dateTimeFieldType96);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1737-06-04T09:49:31.719+10:00" + "'", str10, "1737-06-04T09:49:31.719+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1737-06-04T09:49:31.719+10:00" + "'", str11, "1737-06-04T09:49:31.719+10:00");
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CopticChronology[UTC]" + "'", str13, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572971719L + "'", long21 == 1644572971719L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 38 + "'", int24 == 38);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-7339421428281L) + "'", long44 == (-7339421428281L));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1737, 6, 4, 35371719]");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(copticChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(copticChronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2022 + "'", int98 == 2022);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("+00:00:00.955");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone3.setID("");
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        int int8 = timeZone1.getOffset(1644572631025L);
        boolean boolean9 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) 73, 477);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) 1644572959405L, (org.joda.time.Chronology) copticChronology1);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 73L + "'", long6 == 73L);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField4 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField7 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = copticChronology0.get(readablePeriod9, (-7339421476045L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime24.getFieldTypes();
        int int39 = localDateTime24.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getISO3Country();
        int int47 = property43.getMaximumTextLength(locale44);
        java.lang.String str48 = localDateTime24.toString("293", locale44);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        java.util.Set<java.lang.String> strSet51 = locale44.getUnicodeLocaleKeys();
        java.lang.String str52 = localDateTime2.toString("572", locale44);
        java.util.Locale.setDefault(locale44);
        java.lang.String str54 = locale44.getDisplayVariant();
        java.lang.String str55 = locale44.getISO3Country();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "293" + "'", str48, "293");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "572" + "'", str52, "572");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.weeks();
        boolean boolean7 = copticChronology0.equals((java.lang.Object) "1737-06-03T23:43:46.003Z");
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField4 = copticChronology3.hours();
        int int5 = copticChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.era();
        boolean boolean7 = strSet2.remove((java.lang.Object) copticChronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = copticChronology3.withZone(dateTimeZone8);
        java.lang.String str10 = dateTimeZone8.getID();
        java.lang.String str11 = dateTimeZone8.toString();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology12);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfEra(7);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay(154);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays(207);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = localDateTime26.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -846 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfCeilingCopy();
        int int11 = localDateTime10.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths(250);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime13.getFields();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        long long23 = dateTimeZone18.nextTransition((-1L));
        int int25 = dateTimeZone18.getStandardOffset((long) 'x');
        java.lang.String str26 = dateTimeZone18.getID();
        java.lang.String str28 = dateTimeZone18.getShortName((long) 9);
        java.lang.String str30 = dateTimeZone18.getName((long) 4);
        org.joda.time.DateTime dateTime31 = localDateTime16.toDateTime(dateTimeZone18);
        int int32 = localDateTime16.getMinuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "851" + "'", str7, "851");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 49 + "'", int32 == 49);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setRegion("");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder9 = builder7.setLanguage("eng");
        java.util.Locale locale10 = builder7.build();
        java.util.Locale.Builder builder12 = builder7.setRegion("728");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder7.setLanguage("35355176");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 35355176 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "eng__#x-709");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) (short) 10);
        int int11 = localDateTime10.size();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Country();
        int int20 = property16.getMaximumTextLength(locale17);
        org.joda.time.Interval interval21 = property16.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        boolean boolean42 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.hourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        boolean boolean63 = dateTime52.isEqual((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology65 = dateTime31.getChronology();
        int int66 = property16.getDifference((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str75 = dateTimeZone74.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone74);
        java.lang.String str78 = dateTimeZone74.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(dateTimeZone74);
        int int80 = localDateTime79.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withDayOfWeek(6);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withPeriodAdded(readablePeriod83, (int) (byte) 100);
        java.util.TimeZone timeZone87 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        org.joda.time.chrono.CopticChronology copticChronology89 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone88);
        java.lang.String str91 = dateTimeZone88.getShortName(1136020407753600097L);
        org.joda.time.DateTime dateTime92 = localDateTime85.toDateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime93 = localDateTime69.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        int int94 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime93);
        int int95 = property12.getDifference((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(copticChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2038738 + "'", int66 == 2038738);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+10:00" + "'", str75, "+10:00");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 11 + "'", int80 == 11);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(timeZone87);
        org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(copticChronology89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 14800 + "'", int95 == 14800);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.hours();
        org.joda.time.DurationField durationField3 = copticChronology0.years();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Locale locale7 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsText(locale14);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale21 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str22 = locale16.getDisplayName(locale21);
        java.lang.String str23 = locale21.getCountry();
        java.lang.String str24 = locale7.getDisplayScript(locale21);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.lang.String str29 = locale26.getDisplayScript();
        java.lang.String str30 = locale26.getDisplayVariant();
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.lang.String str32 = locale26.getDisplayScript(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        java.util.Locale locale34 = locale31.stripExtensions();
        java.lang.String str35 = locale7.getDisplayLanguage(locale31);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime39.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime39.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property55 = localDateTime39.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = localDateTime39.getFieldTypes();
        org.joda.time.LocalDateTime.Property property57 = localDateTime39.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime61.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime61.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = localDateTime61.getFieldTypes();
        int int76 = localDateTime61.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.hourOfDay();
        java.util.Locale locale81 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale81.getISO3Country();
        int int84 = property80.getMaximumTextLength(locale81);
        java.lang.String str85 = localDateTime61.toString("293", locale81);
        java.util.Locale locale86 = java.util.Locale.ITALY;
        java.lang.String str87 = locale81.getDisplayScript(locale86);
        java.util.Set<java.lang.String> strSet88 = locale81.getUnicodeLocaleKeys();
        java.lang.String str89 = localDateTime39.toString("572", locale81);
        java.lang.String str90 = locale36.getDisplayScript(locale81);
        java.lang.String str91 = locale31.getDisplayName(locale36);
        java.lang.String str92 = locale2.getDisplayScript(locale31);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale7.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "957" + "'", str15, "957");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale21.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (China)" + "'", str22, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "539" + "'", str23, "539");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "354" + "'", str35, "354");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "293" + "'", str85, "293");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "572" + "'", str89, "572");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Chinesisch (China)" + "'", str91, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("877", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.year();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField8 = copticChronology7.hours();
        int int9 = copticChronology7.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology7.era();
        boolean boolean11 = strSet6.remove((java.lang.Object) copticChronology7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = copticChronology7.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        java.util.TimeZone timeZone18 = dateTimeZone15.toTimeZone();
        java.util.TimeZone timeZone19 = dateTimeZone15.toTimeZone();
        long long21 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 128);
        boolean boolean22 = dateTimeZone12.isFixed();
        boolean boolean24 = dateTimeZone12.isStandardOffset(1136020407753600097L);
        org.joda.time.Chronology chronology25 = copticChronology0.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 128L + "'", long21 == 128L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("287", (double) 1644572627999L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644572627999E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.months();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 0L, 847);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plus(readablePeriod32);
        long long35 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime33, (long) 856);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1644572972032L + "'", long35 == 1644572972032L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet9.spliterator();
        java.lang.Object[] objArray11 = strSet9.toArray();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.lang.String str17 = dateTimeZone13.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone13);
        int int19 = localDateTime18.getDayOfMonth();
        int int20 = localDateTime18.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusWeeks(102);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear(965);
        boolean boolean27 = strSet9.equals((java.lang.Object) localDateTime24);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str3, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSpliterator10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        java.util.Locale locale2 = new java.util.Locale("335", "20");
        java.lang.String str3 = locale2.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "335_20");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "335" + "'", str3, "335");
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("496");
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone1.getOffset(642, 585, 1686, 684, 1636, 984);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId3);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(700);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(44);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(276);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long5 = dateTimeZone1.convertLocalToUTC((long) (byte) 10, false, 1644572659598L);
        long long9 = dateTimeZone1.convertLocalToUTC(1644572643395L, true, 1136091124375922418L);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime12.plusSeconds((int) 'x');
        int int28 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property29 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property30 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = property30.setCopy("4");
        org.joda.time.LocalDateTime localDateTime33 = property30.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField34 = property30.getField();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = property30.getAsShortText(locale35);
        java.lang.String str38 = locale35.getVariant();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withSecondOfMinute(43);
        java.lang.String str47 = localDateTime41.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property48 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property48.setCopy(0);
        java.util.Locale.Category category51 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale52.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str57 = locale52.getDisplayName(locale56);
        java.util.Locale.setDefault(category51, locale52);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Locale locale61 = locale59.stripExtensions();
        java.util.Locale.setDefault(category51, locale59);
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str65 = locale64.getLanguage();
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleKeys();
        java.lang.String str70 = locale67.getDisplayScript();
        java.lang.String str71 = locale64.getDisplayVariant(locale67);
        java.lang.String str72 = locale63.getDisplayVariant(locale67);
        java.util.Locale.setDefault(category51, locale67);
        boolean boolean74 = property48.equals((java.lang.Object) category51);
        java.util.Locale locale75 = java.util.Locale.getDefault(category51);
        java.util.Locale locale76 = java.util.Locale.getDefault(category51);
        java.lang.String str77 = locale35.getDisplayLanguage(locale76);
        boolean boolean78 = dateTimeZone1.equals((java.lang.Object) locale35);
        java.util.Set<java.lang.Character> charSet79 = locale35.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-35999990L) + "'", long5 == (-35999990L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644536643395L + "'", long9 == 1644536643395L);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 109 + "'", int28 == 109);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1738" + "'", str37, "1738");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u82f1\u8a9e" + "'", str47, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.FORMAT + "'", category51.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (China)" + "'", str54, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese (China)" + "'", str57, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en" + "'", str65, "en");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "English (Canada)" + "'", str68, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charSet79);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        double double2 = languageRange1.getWeight();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        int[] intArray11 = localDateTime10.getValues();
        int int12 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusYears(478);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.minuteOfHour();
        org.joda.time.ReadableInstant readableInstant17 = null;
        long long18 = property16.getDifferenceAsLong(readableInstant17);
        org.joda.time.LocalDateTime localDateTime20 = property16.addWrapFieldToCopy(276);
        boolean boolean21 = languageRange1.equals((java.lang.Object) localDateTime20);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1737, 6, 4, 35372156]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1737 + "'", int12 == 1737);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-525600L) + "'", long18 == (-525600L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField4 = copticChronology3.hours();
        int int5 = copticChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.era();
        boolean boolean7 = strSet2.remove((java.lang.Object) copticChronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = copticChronology3.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        int int10 = localDateTime9.size();
        int int11 = localDateTime9.getWeekyear();
        int int12 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withWeekyear(35046049);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withTime(35235957, 700, 31, 75);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35235957 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1738 + "'", int11 == 1738);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 208);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.Chronology chronology14 = copticChronology0.withUTC();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572972194L + "'", long9 == 1644572972194L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long15 = dateTimeZone1.previousTransition(1644572610881L);
        long long18 = dateTimeZone1.convertLocalToUTC((long) (short) 1, true);
        boolean boolean20 = dateTimeZone1.isStandardOffset(1644572630044L);
        long long23 = dateTimeZone1.adjustOffset((long) 984, true);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone25);
        long long30 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, (-7339421692352L));
        java.lang.String[] strArray41 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        boolean boolean45 = strSet42.equals((java.lang.Object) locale44);
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet48 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str49 = dateTimeZone25.getName(13254326752L, locale44);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        boolean boolean52 = dateTimeZone50.isStandardOffset((long) 28);
        long long54 = dateTimeZone25.getMillisKeepLocal(dateTimeZone50, 1644572878244L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572610881L + "'", long15 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-35999999L) + "'", long18 == (-35999999L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 984L + "'", long23 == 984L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-7339385692352L) + "'", long30 == (-7339385692352L));
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "English" + "'", str47, "English");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644572878244L + "'", long54 == 1644572878244L);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusDays((-1));
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withYearOfEra(576);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime8.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.dayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0576-06-04T09:49:32.254" + "'", str10, "0576-06-04T09:49:32.254");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withWeekyear(310);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str22 = copticChronology21.toString();
        org.joda.time.DurationField durationField23 = copticChronology21.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        long long30 = copticChronology21.set((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.minusMinutes(10);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime35.withDayOfYear(100);
        boolean boolean49 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int int50 = localDateTime35.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime35.withDayOfYear(13);
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withSecondOfMinute(43);
        java.lang.String str61 = localDateTime55.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property62 = localDateTime55.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        int int64 = localDateTime35.get(dateTimeFieldType63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime19.withField(dateTimeFieldType63, 632);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 632 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CopticChronology[UTC]" + "'", str22, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572972272L + "'", long30 == 1644572972272L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 49 + "'", int50 == 49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(copticChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u82f1\u8a9e" + "'", str61, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setRegion("947");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setLanguageTag("986");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 986 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long3 = dateTimeZone1.previousTransition((-51877151999125L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-51877151999125L) + "'", long3 == (-51877151999125L));
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsText(locale13);
        long long15 = property12.remainder();
        org.joda.time.LocalDateTime localDateTime16 = property12.roundHalfFloorCopy();
        int int17 = property12.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = property12.withMaximumValue();
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(612, 783, 839, 465, 986, 363, 35251860, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 465 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "311" + "'", str14, "311");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology1.add(readablePeriod9, (long) '#', 43);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(2101362L, (org.joda.time.Chronology) copticChronology1);
        int int14 = localDateTime13.getEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(35179619, 345, 696, 17, 38, 722, 973);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 722 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        long long14 = copticChronology0.add(1644572615653L, 1644572612147L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.secondOfMinute();
        java.lang.String str17 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.millisOfSecond();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property23.getAsText(locale24);
        org.joda.time.Interval interval26 = property23.toInterval();
        org.joda.time.LocalDateTime localDateTime27 = property23.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str29 = copticChronology28.toString();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = copticChronology28.add(readablePeriod30, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField34 = copticChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology28.secondOfDay();
        boolean boolean37 = localDateTime27.equals((java.lang.Object) dateTimeField36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime27.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime40 = property38.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(513);
        int[] intArray44 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime40, (long) 30);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3289145227800L + "'", long14 == 3289145227800L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CopticChronology[UTC]" + "'", str17, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "350" + "'", str25, "350");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1686, 4, 23, 30]");
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("1737-06-04T09:44:08.166+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '1737-06-04T09:44:08.166+10:00' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        java.lang.String str10 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        java.lang.String str5 = property2.getAsText();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-292275054) + "'", int3 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "46" + "'", str5, "46");
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        boolean boolean38 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        boolean boolean59 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime27.getZone();
        int int62 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean63 = dateTimeZone13.isFixed();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 432000000 + "'", int62 == 432000000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap5);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("eng", strMap13);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream15 = languageRangeList14.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("eng", strMap17);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = property26.getAsText(locale27);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.millisOfSecond();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale19, locale20, locale27, locale29, locale30, locale31, locale33, locale36, locale38, locale45, locale47, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale locale53 = java.util.Locale.lookup(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale locale57 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strSet58, filteringMode59);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet11, filteringMode59);
        java.util.Iterator<java.lang.String> strItor62 = strSet11.iterator();
        strSet11.clear();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeStream15);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "552" + "'", str28, "552");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English (Canada)" + "'", str34, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "552" + "'", str46, "552");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertEquals(locale57.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strItor62);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Collection<java.util.Locale.LanguageRange> languageRangeCollection7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = strSet6.removeAll(languageRangeCollection7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond(283);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusDays(52);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.lang.String str27 = dateTimeZone24.toString();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str29 = copticChronology28.toString();
        long long33 = copticChronology28.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology28.weekOfWeekyear();
        boolean boolean35 = dateTimeZone24.equals((java.lang.Object) copticChronology28);
        boolean boolean37 = dateTimeZone24.isStandardOffset(1644572616432L);
        java.lang.String str39 = dateTimeZone24.getNameKey((long) 812);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime41 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone24);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1136091124375922418L + "'", long33 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(copticChronology42);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(999, 922, 35335191, 215, 714, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 215 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Country();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        boolean boolean9 = strSet5.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7);
        java.lang.String[] strArray19 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        boolean boolean23 = strSet20.equals((java.lang.Object) locale22);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("eng", strMap26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = property35.getAsText(locale36);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale45.getISO3Language();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.millisOfSecond();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = property53.getAsText(locale54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale28, locale29, locale36, locale38, locale39, locale40, locale42, locale45, locale47, locale54, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList59);
        boolean boolean62 = strSet20.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream63 = languageRangeList27.parallelStream();
        boolean boolean64 = strSet4.equals((java.lang.Object) languageRangeList27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.parse("eng", strMap66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList67, strMap68);
        java.lang.String[] strArray79 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        java.util.Locale locale82 = java.util.Locale.CANADA;
        boolean boolean83 = strSet80.equals((java.lang.Object) locale82);
        strSet80.clear();
        boolean boolean86 = strSet80.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator87 = strSet80.spliterator();
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags(languageRangeList69, (java.util.Collection<java.lang.String>) strSet80);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream89 = languageRangeList69.stream();
        boolean boolean90 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "715" + "'", str37, "715");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English (Canada)" + "'", str43, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "715" + "'", str55, "715");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(languageRangeStream63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSpliterator87);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNotNull(languageRangeStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime22.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property38 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.minuteOfHour();
        int int40 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime22.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withSecondOfMinute(43);
        int[] intArray54 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime52, (long) 43);
        copticChronology18.validate((org.joda.time.ReadablePartial) localDateTime22, intArray54);
        org.joda.time.DurationField durationField56 = copticChronology18.centuries();
        org.joda.time.DurationField durationField57 = copticChronology18.hours();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.TimeZone timeZone64 = dateTimeZone61.toTimeZone();
        long long66 = dateTimeZone61.nextTransition((-1L));
        long long68 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone61);
        int[] intArray72 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime70, 1644572736021L);
        java.util.Date date73 = localDateTime70.toDate();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withDayOfYear(318);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999031L) + "'", long68 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1738, 6, 9, 35136021]");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Fri Feb 11 19:44:44 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        int int14 = strSet10.size();
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        boolean boolean19 = strSet15.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.util.Locale.setDefault(locale25);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale23, locale24, locale25, locale29, locale31, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean41 = strSet10.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.parse("eng", strMap43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.millisOfSecond();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = property52.getAsText(locale53);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = locale58.getDisplayName(locale59);
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.lang.String str63 = locale62.getISO3Language();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.millisOfSecond();
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = property70.getAsText(locale71);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale45, locale46, locale53, locale55, locale56, locale57, locale59, locale62, locale64, locale71, locale73, locale74 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter(languageRangeList44, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale79 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList78);
        java.lang.String[] strArray89 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        java.util.Locale locale92 = java.util.Locale.CANADA;
        boolean boolean93 = strSet90.equals((java.lang.Object) locale92);
        strSet90.clear();
        boolean boolean96 = strSet90.contains((java.lang.Object) "293");
        java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet90);
        boolean boolean98 = strSet90.isEmpty();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "878" + "'", str54, "878");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English (Canada)" + "'", str60, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "eng" + "'", str63, "eng");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "878" + "'", str72, "878");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNull(locale79);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strList97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusHours(102);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes(607);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readableDuration23);
        java.lang.String str26 = localDateTime24.toString("319");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withHourOfDay(266);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 266 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "319" + "'", str26, "319");
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.minuteOfHour();
        int int20 = localDateTime2.getEra();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusDays(1738);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        int int29 = localDateTime27.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        boolean boolean77 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime76);
        int int78 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime66);
        int int79 = property35.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property35.getFieldType();
        boolean boolean81 = localDateTime27.isSupported(dateTimeFieldType80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime84 = property82.addToCopy((int) (byte) 0);
        int int85 = localDateTime84.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property86 = localDateTime84.hourOfDay();
        int int87 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime84.minusHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.plusDays(67);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.LocalDateTime localDateTime93 = localDateTime89.minus(readablePeriod92);
        org.joda.time.ReadableDuration readableDuration94 = null;
        org.joda.time.LocalDateTime localDateTime95 = localDateTime89.plus(readableDuration94);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray96 = localDateTime95.getFieldTypes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 930 + "'", int29 == 930);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray96);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        java.lang.String str10 = copticChronology0.toString();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField13 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology0.getZone();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str17 = copticChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology16.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology16.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfDay(10);
        long long38 = copticChronology16.set((org.joda.time.ReadablePartial) localDateTime36, (long) 'a');
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.centuryOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withCenturyOfEra(560);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = copticChronology43.add(readablePeriod45, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField49 = copticChronology43.halfdays();
        org.joda.time.DurationField durationField50 = copticChronology43.millis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        long long54 = copticChronology43.add(readablePeriod51, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology57 = copticChronology43.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfYear();
        org.joda.time.DurationField durationField59 = chronology57.seconds();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime36, chronology57);
        org.joda.time.LocalDateTime.Property property61 = localDateTime36.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField71 = copticChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime64.withFields((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime64.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime64.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property80 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime64.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime64.plus(readablePeriod83);
        int[] intArray85 = localDateTime64.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime36, intArray85);
        org.joda.time.DurationField durationField87 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField88 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField89 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CopticChronology[UTC]" + "'", str17, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644537600010L + "'", long38 == 1644537600010L);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 35L + "'", long54 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(intArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1738, 6, 4, 35373003]");
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream5 = languageRangeList2.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getDisplayScript();
        java.lang.String str13 = locale9.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = locale9.getDisplayScript(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleKeys();
        strSet17.clear();
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet17);
        org.joda.time.tz.Provider provider20 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider20);
        org.joda.time.DateTimeZone.setProvider(provider20);
        java.util.Set<java.lang.String> strSet23 = provider20.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor24 = strSet23.iterator();
        java.lang.Object[] objArray25 = strSet23.toArray();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet23);
        strSet23.clear();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeStream5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(provider20);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.era();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str20 = dateTimeZone19.getID();
        boolean boolean22 = dateTimeZone19.isStandardOffset(10L);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str24 = copticChronology23.toString();
        org.joda.time.DurationField durationField25 = copticChronology23.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        long long32 = copticChronology23.set((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology23.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readablePeriod39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.withPeriodAdded(readablePeriod43, 723);
        long long47 = copticChronology23.set((org.joda.time.ReadablePartial) localDateTime45, (long) 999);
        boolean boolean48 = dateTimeZone19.equals((java.lang.Object) copticChronology23);
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String[] strArray60 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        boolean boolean64 = strSet61.equals((java.lang.Object) locale63);
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleKeys();
        java.lang.String str66 = locale50.getDisplayVariant(locale63);
        java.lang.String str67 = dateTimeZone19.getName(10L, locale63);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.Chronology chronology69 = chronology14.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CopticChronology[UTC]" + "'", str24, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644572973095L + "'", long32 == 1644572973095L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1644572873095L + "'", long47 == 1644572873095L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        java.lang.String str12 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        int int22 = localDateTime20.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minus(readablePeriod23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = copticChronology0.withZone(dateTimeZone27);
        java.lang.String str30 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572973117L + "'", long9 == 1644572973117L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37 + "'", int22 == 37);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CopticChronology[UTC]" + "'", str30, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths((int) (byte) 100);
        int int18 = localDateTime15.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusSeconds(102);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusSeconds(955);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = localDateTime25.getField(35329682);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35329682");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        java.lang.String str10 = copticChronology0.toString();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField13 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology0.getZone();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str17 = copticChronology16.toString();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = copticChronology16.add(readablePeriod18, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField22 = copticChronology16.halfdays();
        org.joda.time.DurationField durationField23 = copticChronology16.millis();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = copticChronology16.add(readablePeriod24, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology30 = copticChronology16.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        java.util.Locale locale37 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = dateTimeZone32.getName((long) 610, locale37);
        int int41 = dateTimeZone32.getStandardOffset(1644572639204L);
        long long43 = dateTimeZone32.nextTransition((long) 24);
        long long45 = dateTimeZone15.getMillisKeepLocal(dateTimeZone32, (long) (-292275054));
        java.util.TimeZone timeZone46 = dateTimeZone15.toTimeZone();
        java.lang.String str47 = timeZone46.getDisplayName();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CopticChronology[UTC]" + "'", str17, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35L + "'", long27 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals(locale37.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+120:00" + "'", str39, "+120:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 432000000 + "'", int41 == 432000000);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 24L + "'", long43 == 24L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-724275054L) + "'", long45 == (-724275054L));
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Coordinated Universal Time" + "'", str47, "Coordinated Universal Time");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.plusSeconds(701);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime63.withDurationAdded(readableDuration70, 709);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 206 + "'", int8 == 206);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology5.weekyear();
        org.joda.time.DurationField durationField14 = copticChronology5.centuries();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology5.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = copticChronology5.getDateTimeMillis(206, 0, 44, 149733239);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 149733239 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = nameProvider0.getName(locale2, "38", "493");
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str9 = locale6.getExtension('a');
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale6.getDisplayName(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "239", "750");
        java.util.Set<java.lang.String> strSet16 = locale11.getUnicodeLocaleKeys();
        boolean boolean17 = strSet16.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator18 = strSet16.spliterator();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSpliterator18);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plusDays(49);
        int int68 = localDateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str71 = copticChronology70.toString();
        org.joda.time.DurationField durationField72 = copticChronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology70.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = copticChronology70.getZone();
        int int76 = dateTimeZone74.getStandardOffset((long) 946);
        long long78 = dateTimeZone74.nextTransition((long) 'x');
        org.joda.time.chrono.CopticChronology copticChronology79 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone74);
        org.joda.time.DateTime dateTime80 = localDateTime67.toDateTime(dateTimeZone74);
        java.lang.String str81 = dateTimeZone74.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 290 + "'", int8 == 290);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 18 + "'", int68 == 18);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "CopticChronology[UTC]" + "'", str71, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 120L + "'", long78 == 120L);
        org.junit.Assert.assertNotNull(copticChronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        boolean boolean19 = property9.equals((java.lang.Object) property17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        boolean boolean23 = property9.equals((java.lang.Object) property22);
        org.joda.time.LocalDateTime localDateTime24 = property22.getLocalDateTime();
        java.lang.String str25 = property22.getAsShortText();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35373318]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay((int) '#');
        boolean boolean15 = dateTimeZone4.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone4);
        long long18 = dateTimeZone4.previousTransition(1644572610881L);
        long long21 = dateTimeZone4.convertLocalToUTC((long) (short) 1, true);
        java.util.TimeZone timeZone22 = dateTimeZone4.toTimeZone();
        java.util.TimeZone.setDefault(timeZone22);
        boolean boolean24 = timeZone1.hasSameRules(timeZone22);
        java.time.ZoneId zoneId25 = timeZone1.toZoneId();
        int int26 = timeZone1.getRawOffset();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("1737-06-04T09:48:25.469+10:00");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = timeZone1.getDisplayName(false, 708, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 708");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572610881L + "'", long18 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35999999L) + "'", long21 == (-35999999L));
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = copticChronology0.getDateTimeMillis(0, 0, 738, 359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(10);
        long long22 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime20, (long) 'a');
        org.joda.time.DateTimeField dateTimeField23 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField24 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology0.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644537600010L + "'", long22 == 1644537600010L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        java.util.Locale locale3 = new java.util.Locale("55", "1737-06-04T09:43:55.809+10:00", "889");
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology4.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        int[] intArray16 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        int[] intArray27 = localDateTime26.getValues();
        copticChronology4.validate((org.joda.time.ReadablePartial) localDateTime18, intArray27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.DateTimeField dateTimeField40 = copticChronology37.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        int[] intArray49 = localDateTime48.getValues();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.hourOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusYears((int) (short) -1);
        int[] intArray60 = localDateTime59.getValues();
        copticChronology37.validate((org.joda.time.ReadablePartial) localDateTime51, intArray60);
        copticChronology4.validate((org.joda.time.ReadablePartial) localDateTime36, intArray60);
        boolean boolean63 = locale3.equals((java.lang.Object) copticChronology4);
        org.junit.Assert.assertEquals(locale3.toString(), "55_1737-06-04T09:43:55.809+10:00_889");
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1737, 6, 4, 35373374]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1737, 6, 4, 35373374]");
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1737, 6, 4, 35373374]");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1737, 6, 4, 35373374]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.adjustOffset(1L, false);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.lang.String str11 = locale8.getDisplayScript();
        java.lang.String str12 = locale8.getDisplayVariant();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale8.getDisplayScript(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = locale13.stripExtensions();
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getDisplayCountry();
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) locale16);
        java.util.Locale locale20 = locale16.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English (Canada)" + "'", str9, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "China" + "'", str18, "China");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        boolean boolean37 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        boolean boolean58 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime47);
        int int60 = property16.compareTo((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean61 = strSet9.remove((java.lang.Object) property16);
        int int62 = property16.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime64 = property16.setCopy("550");
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusDays(81);
        int int67 = localDateTime66.getYearOfEra();
        int int68 = localDateTime66.getMillisOfSecond();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1738 + "'", int67 == 1738);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 550 + "'", int68 == 550);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        java.lang.String str12 = property9.getAsShortText();
        long long13 = property9.remainder();
        java.lang.String str14 = property9.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35373467]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2973467L + "'", long13 == 2973467L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[hourOfDay]" + "'", str14, "Property[hourOfDay]");
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("eng", strMap2);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream4 = languageRangeList3.stream();
        boolean boolean5 = strSet0.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3);
        java.util.Iterator<java.lang.String> strItor6 = strSet0.iterator();
        boolean boolean8 = strSet0.add("358");
        java.util.Iterator<java.lang.String> strItor9 = strSet0.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("eng", strMap11);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfSecond();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsText(locale39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale13, locale14, locale21, locale23, locale24, locale25, locale27, locale30, locale32, locale39, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList44);
        boolean boolean47 = strSet0.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str49 = copticChronology48.toString();
        long long54 = copticChronology48.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone55 = copticChronology48.getZone();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = strSet0.remove((java.lang.Object) copticChronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "480" + "'", str22, "480");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "480" + "'", str40, "480");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "CopticChronology[UTC]" + "'", str49, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-50149497600000L) + "'", long54 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeZone55);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream5 = languageRangeList2.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap6);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream8 = languageRangeList2.parallelStream();
        java.util.Collection<java.lang.String> strCollection9 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("eng", strMap11);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream13 = languageRangeList12.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("eng", strMap15);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsText(locale25);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = locale34.getISO3Language();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.millisOfSecond();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = property42.getAsText(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale17, locale18, locale25, locale27, locale28, locale29, locale31, locale34, locale36, locale43, locale45, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale locale51 = java.util.Locale.lookup(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale locale55 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strSet56, filteringMode57);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strCollection9, filteringMode57);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeStream5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeStream8);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeStream13);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "508" + "'", str26, "508");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "508" + "'", str44, "508");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertEquals(locale55.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList59);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.eras();
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        int[] intArray20 = localDateTime19.getValues();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        copticChronology8.validate((org.joda.time.ReadablePartial) localDateTime22, intArray31);
        int int33 = localDateTime22.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.minus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        int[] intArray38 = chronology7.get((org.joda.time.ReadablePartial) localDateTime35, (long) (short) 0);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology39.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology39.hourOfDay();
        long long48 = copticChronology39.add(1644572624553L, (long) 443, 812);
        org.joda.time.Chronology chronology49 = copticChronology39.withUTC();
        boolean boolean50 = localDateTime35.equals((java.lang.Object) copticChronology39);
        org.joda.time.DateTimeField dateTimeField51 = copticChronology39.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1737, 6, 4, 35373562]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35373562]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644572984269L + "'", long48 == 1644572984269L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.plus(readablePeriod34);
        int int36 = localDateTime35.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        boolean boolean38 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.Chronology chronology39 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property40 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        java.lang.String str42 = property40.getAsShortText();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 581 + "'", int36 == 581);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "49" + "'", str42, "49");
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(207);
        java.lang.String str3 = dateTimeZone1.getShortName(1644572638561L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long8 = dateTimeZone1.convertLocalToUTC((long) 71719515, false, 1644572616432L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.207" + "'", str3, "+00:00:00.207");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 71719308L + "'", long8 == 71719308L);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        int int6 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField5 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.era();
        org.joda.time.DurationField durationField8 = copticChronology0.years();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField10 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.era();
        org.joda.time.Chronology chronology12 = copticChronology0.withUTC();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.secondOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        boolean boolean14 = copticChronology0.equals((java.lang.Object) locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale13.getISO3Country();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572973650L + "'", long9 == 1644572973650L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.centuryOfEra();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        int int20 = property18.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2922728 + "'", int20 == 2922728);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str18 = copticChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute(43);
        int[] intArray28 = copticChronology17.get((org.joda.time.ReadablePartial) localDateTime26, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime12, intArray28);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology0.year();
        org.joda.time.DurationField durationField32 = copticChronology0.years();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572973675L + "'", long9 == 1644572973675L);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CopticChronology[UTC]" + "'", str18, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long15 = dateTimeZone1.previousTransition(1644572610881L);
        long long18 = dateTimeZone1.convertLocalToUTC((long) (short) 1, true);
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale20.getExtension('u');
        java.lang.String str24 = dateTimeZone1.getName((long) 49, locale20);
        long long26 = dateTimeZone1.previousTransition(1644572848372L);
        long long29 = dateTimeZone1.convertLocalToUTC((long) 708, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572610881L + "'", long15 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-35999999L) + "'", long18 == (-35999999L));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572848372L + "'", long26 == 1644572848372L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-35999292L) + "'", long29 == (-35999292L));
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField10 = copticChronology1.centuries();
        org.joda.time.DurationField durationField11 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = copticChronology1.hours();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(36000004L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = copticChronology1.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = chronology16.months();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        long long21 = dateTime19.getMillis();
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-7339421426286L) + "'", long21 == (-7339421426286L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withWeekyear(733);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(541);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusWeeks(32);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        boolean boolean27 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        boolean boolean48 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.millisOfSecond();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = property55.getAsText(locale56);
        long long58 = property55.remainder();
        org.joda.time.LocalDateTime localDateTime59 = property55.roundHalfFloorCopy();
        java.lang.String str60 = property55.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property55.getFieldType();
        boolean boolean62 = dateTime37.isSupported(dateTimeFieldType61);
        int int63 = property6.getDifference((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime37.getZone();
        int int66 = dateTimeZone64.getOffset(1644572635634L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "761" + "'", str57, "761");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[millisOfSecond]" + "'", str60, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 149732639 + "'", int63 == 149732639);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.minusMillis(734);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withMillisOfSecond(359);
        int int72 = localDateTime69.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusMonths(250);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withMillisOfDay(35150906);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = localDateTime76.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 817 + "'", int8 == 817);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 83 + "'", int72 == 83);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        int[] intArray36 = localDateTime35.getValues();
        boolean boolean37 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime13.plusSeconds(846);
        int int40 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks(493);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.weekyear();
        int int44 = localDateTime39.size();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 49 + "'", int25 == 49);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1737, 6, 4, 35373885]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale10.getDisplayCountry(locale13);
        java.lang.String str15 = locale7.getDisplayName(locale10);
        java.lang.String str16 = locale7.getDisplayName();
        java.lang.String str17 = locale0.getDisplayName(locale7);
        java.lang.String str18 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "904" + "'", str8, "904");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, 5431484632041L);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        org.joda.time.DurationField durationField13 = copticChronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology11.getZone();
        int int17 = dateTimeZone15.getStandardOffset((long) 946);
        long long19 = dateTimeZone5.getMillisKeepLocal(dateTimeZone15, 1644572622671L);
        long long22 = dateTimeZone5.adjustOffset((long) (short) 0, false);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime36);
        int[] intArray39 = copticChronology23.get((org.joda.time.ReadablePartial) localDateTime37, (-1511187320843L));
        java.lang.String str40 = copticChronology23.toString();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology23.weekyearOfCentury();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5431448632041L + "'", long10 == 5431448632041L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644608622671L + "'", long19 == 1644608622671L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1638, 6, 4, 71079157]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CopticChronology[+10:00]" + "'", str40, "CopticChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(684);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond(494);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = property29.getAsText(locale30);
        long long32 = property29.remainder();
        org.joda.time.LocalDateTime localDateTime33 = property29.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.year();
        long long35 = property34.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        int int37 = localDateTime21.indexOf(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "942" + "'", str31, "942");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 13254573942L + "'", long35 == 13254573942L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone1.setID("");
        int int5 = timeZone1.getOffset(1644572672473L);
        int int6 = timeZone1.getRawOffset();
        int int7 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 126, dateTimeZone10);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        boolean boolean18 = timeZone1.hasSameRules(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        long long21 = dateTimeZone19.nextTransition(288L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 288L + "'", long21 == 288L);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.secondOfDay();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        int[] intArray21 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime19, (long) 38);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField23 = copticChronology0.minutes();
        org.joda.time.DurationField durationField24 = copticChronology0.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572973993L + "'", long9 == 1644572973993L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1686, 4, 23, 38]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        java.lang.String[] strArray18 = new java.lang.String[] { "93", "171", "93", "93", "en", "160", "hi!", "Greenwich Mean Time", "449", "eng", "449", "527", "Chinese (China)", "en", "Chinese (China)", "en_CA", "+10:00", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "+10:00", "en" };
        java.lang.CharSequence[] charSequenceArray24 = strSet19.toArray(charSequenceArray23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField26 = copticChronology25.hours();
        int int27 = copticChronology25.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology25.era();
        org.joda.time.DurationField durationField29 = copticChronology25.days();
        boolean boolean30 = strSet19.remove((java.lang.Object) copticChronology25);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        boolean boolean35 = strSet31.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap36);
        boolean boolean38 = strSet19.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        java.lang.Object[] objArray39 = strSet19.toArray();
        java.lang.Object obj40 = null;
        boolean boolean41 = strSet19.equals(obj40);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet19.spliterator();
        int int43 = strSet19.size();
        java.util.Locale locale46 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.hourOfDay();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getISO3Country();
        int int53 = property49.getMaximumTextLength(locale50);
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale50.getDisplayVariant(locale54);
        java.lang.String str57 = locale46.getDisplayLanguage(locale50);
        java.util.Set<java.lang.String> strSet58 = locale46.getUnicodeLocaleKeys();
        java.lang.Object[] objArray59 = strSet58.toArray();
        java.lang.CharSequence[] charSequenceArray62 = new java.lang.CharSequence[] { "612", "Property[secondOfMinute]" };
        java.lang.CharSequence[] charSequenceArray65 = new java.lang.CharSequence[] { "612", "Property[secondOfMinute]" };
        java.lang.CharSequence[] charSequenceArray68 = new java.lang.CharSequence[] { "612", "Property[secondOfMinute]" };
        java.lang.CharSequence[] charSequenceArray71 = new java.lang.CharSequence[] { "612", "Property[secondOfMinute]" };
        java.lang.CharSequence[] charSequenceArray74 = new java.lang.CharSequence[] { "612", "Property[secondOfMinute]" };
        java.lang.CharSequence[][] charSequenceArray75 = new java.lang.CharSequence[][] { charSequenceArray62, charSequenceArray65, charSequenceArray68, charSequenceArray71, charSequenceArray74 };
        java.lang.CharSequence[][] charSequenceArray76 = strSet58.toArray(charSequenceArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][] objArray77 = strSet19.toArray((java.lang.Object[][]) charSequenceArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[93, 171, en, 160, hi!, Greenwich Mean Time, 449, eng, 527, Chinese (China), en_CA, +10:00, 106]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[93, 171, en, 160, hi!, Greenwich Mean Time, 449, eng, 527, Chinese (China), en_CA, +10:00, 106]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 13 + "'", int43 == 13);
        org.junit.Assert.assertEquals(locale46.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1738-06-04t09:43:28.618" + "'", str57, "1738-06-04t09:43:28.618");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(charSequenceArray62);
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertNotNull(charSequenceArray68);
        org.junit.Assert.assertNotNull(charSequenceArray71);
        org.junit.Assert.assertNotNull(charSequenceArray74);
        org.junit.Assert.assertNotNull(charSequenceArray75);
        org.junit.Assert.assertNotNull(charSequenceArray76);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(814, 5, (int) (byte) 100, 281, 553, 865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 281 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getISO3Country();
        boolean boolean3 = locale0.hasExtensions();
        java.lang.String str4 = locale0.getISO3Language();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = locale7.getDisplayScript();
        java.lang.String str11 = locale7.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayScript(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = locale12.stripExtensions();
        java.lang.String str16 = locale5.getDisplayName(locale12);
        java.lang.String str17 = locale0.getDisplayVariant(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KOR" + "'", str2, "KOR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u6587" + "'", str16, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.DurationField durationField14 = copticChronology0.years();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone16 = copticChronology0.getZone();
        int int18 = dateTimeZone16.getStandardOffset(1644572970654L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology0.getZone();
        long long17 = dateTimeZone15.convertUTCToLocal(1644572883294L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572883294L + "'", long17 == 1644572883294L);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        java.util.Locale locale1 = new java.util.Locale("+120:00");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone4);
        int int7 = dateTimeZone4.getStandardOffset(0L);
        boolean boolean9 = dateTimeZone4.isStandardOffset((long) (short) 1);
        java.lang.String str10 = dateTimeZone4.toString();
        long long13 = dateTimeZone4.adjustOffset(36000004L, false);
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Locale.setDefault(locale17);
        java.lang.String str23 = nameProvider15.getName(locale17, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str36 = locale31.getDisplayName(locale35);
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str38 = property29.getAsShortText(locale31);
        java.lang.String str39 = locale17.getDisplayLanguage(locale31);
        java.lang.String str40 = dateTimeZone4.getShortName(1644572648487L, locale17);
        java.util.Set<java.lang.Character> charSet41 = locale17.getExtensionKeys();
        java.lang.String str42 = locale1.getDisplayName(locale17);
        java.lang.String str43 = locale17.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "+120:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 36000004L + "'", long13 == 36000004L);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "85" + "'", str38, "85");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u82f1\u6587" + "'", str39, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+120:00" + "'", str42, "+120:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en_CA" + "'", str43, "en_CA");
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        long long8 = dateTimeZone6.convertUTCToLocal(38L);
        long long11 = dateTimeZone6.convertLocalToUTC(1644572657090L, true);
        java.lang.String str13 = dateTimeZone6.getShortName((long) 81);
        boolean boolean14 = dateTimeZone6.isFixed();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 38L + "'", long8 == 38L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644572657090L + "'", long11 == 1644572657090L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField7 = copticChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology3.minuteOfHour();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        int int18 = localDateTime15.getWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology19.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        int[] intArray42 = localDateTime41.getValues();
        copticChronology19.validate((org.joda.time.ReadablePartial) localDateTime33, intArray42);
        int int44 = localDateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime33.minusDays(782);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(49);
        int int49 = localDateTime46.getYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minusMonths(204);
        int int53 = localDateTime52.getDayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1738 + "'", int18 == 1738);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35374162]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1737, 6, 4, 35374162]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1735 + "'", int49 == 1735);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 219 + "'", int53 == 219);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        boolean boolean37 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        boolean boolean58 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime47);
        int int60 = property16.compareTo((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean61 = strSet9.remove((java.lang.Object) property16);
        org.joda.time.LocalDateTime localDateTime63 = property16.addWrapFieldToCopy((int) (short) 10);
        boolean boolean65 = property16.equals((java.lang.Object) "Property[millisOfSecond]");
        java.lang.String str66 = property16.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime68 = property16.setCopy("35206135");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35206135 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "195" + "'", str66, "195");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology8 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField9 = copticChronology0.hours();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str11 = copticChronology10.toString();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str16 = copticChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withSecondOfMinute(43);
        int[] intArray26 = copticChronology15.get((org.joda.time.ReadablePartial) localDateTime24, (long) 43);
        copticChronology10.validate((org.joda.time.ReadablePartial) localDateTime14, intArray26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime14.withPeriodAdded(readablePeriod28, 662);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.millisOfSecond();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = property36.getAsText(locale37);
        org.joda.time.Interval interval39 = property36.toInterval();
        org.joda.time.LocalDateTime localDateTime40 = property36.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        org.joda.time.chrono.CopticChronology copticChronology72 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.hourOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime79.toDateTime(readableInstant80);
        boolean boolean82 = dateTime71.isEqual((org.joda.time.ReadableInstant) dateTime81);
        int int83 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean85 = dateTime71.equals((java.lang.Object) 0L);
        org.joda.time.DateTime dateTime86 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime87 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime30.minusMinutes(100);
        long long91 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime30, 1644572814335L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CopticChronology[UTC]" + "'", str16, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "214" + "'", str38, "214");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(copticChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1644572974214L + "'", long91 == 1644572974214L);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus(readablePeriod18);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        boolean boolean68 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int70 = property26.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property26.getFieldType();
        boolean boolean72 = localDateTime19.isSupported(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime19.withDayOfYear(297);
        int[] intArray76 = localDateTime19.getValues();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 298 + "'", int20 == 298);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1738, 6, 4, 35374298]");
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withHourOfDay(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(1686);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusDays(504);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(1636);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1636 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfMonth();
        org.joda.time.DurationField durationField3 = property2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(812L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(220);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 220 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology5.weekyear();
        org.joda.time.DurationField durationField14 = copticChronology5.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime17.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime17.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime17.plus(readablePeriod33);
        int int35 = localDateTime34.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMonths(3);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        boolean boolean61 = localDateTime55.isAfter((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.Chronology chronology62 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime58.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        boolean boolean65 = localDateTime37.isSupported(dateTimeFieldType64);
        int[] intArray67 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime37, (-7339421608892L));
        org.joda.time.LocalDateTime.Property property68 = localDateTime37.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 353 + "'", int35 == 353);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1453, 9, 28, 85591108]");
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(3);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.DurationField durationField26 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField29 = copticChronology0.years();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = copticChronology0.getDateTimeMillis(631, 65, 1743, 237);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35374381]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        timeZone5.setRawOffset(154);
        int int11 = timeZone5.getRawOffset();
        boolean boolean12 = timeZone5.observesDaylightTime();
        int int13 = timeZone5.getRawOffset();
        boolean boolean14 = timeZone1.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.hourOfDay();
        boolean boolean26 = property25.isLeap();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder27.setExtension('x', "709");
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder34 = builder31.setLocale(locale33);
        java.util.Locale.Builder builder37 = builder31.setExtension('u', "35026152");
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = property25.getAsText(locale38);
        java.lang.String str40 = locale38.getCountry();
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = locale38.getVariant();
        java.lang.String str43 = timeZone1.getDisplayName(locale38);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 154 + "'", int11 == 154);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 154 + "'", int13 == 154);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35374437]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und-u-35026152" + "'", str41, "und-u-35026152");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Greenwich Mean Time" + "'", str43, "Greenwich Mean Time");
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(862, 664, 234, 691, 552, 25, 425);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 691 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("1743-03-06T09:46:41.579", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withCenturyOfEra(777);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.DurationField durationField20 = copticChronology18.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        long long27 = copticChronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField28 = copticChronology18.hours();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology18.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusYears((int) 'x');
        long long49 = copticChronology18.set((org.joda.time.ReadablePartial) localDateTime47, (long) 1);
        org.joda.time.DateTimeField dateTimeField50 = copticChronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17, (org.joda.time.Chronology) copticChronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDateTime53.getFieldType(126);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 126");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572974469L + "'", long9 == 1644572974469L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572974469L + "'", long27 == 1644572974469L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5431484974469L + "'", long49 == 5431484974469L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        boolean boolean19 = property9.equals((java.lang.Object) property17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        boolean boolean23 = property9.equals((java.lang.Object) property22);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str25 = copticChronology24.toString();
        org.joda.time.DurationField durationField26 = copticChronology24.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology24.clockhourOfHalfday();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getISO3Language();
        boolean boolean30 = copticChronology24.equals((java.lang.Object) locale28);
        java.lang.String str31 = locale28.getCountry();
        java.lang.String str32 = locale28.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("709");
        java.lang.String str35 = locale34.getISO3Country();
        java.util.Locale locale38 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale34.getDisplayCountry(locale38);
        java.lang.String str41 = locale28.getDisplayScript(locale34);
        java.lang.String str42 = locale28.getLanguage();
        java.lang.String str43 = locale28.toLanguageTag();
        java.lang.String str44 = property22.getAsText(locale28);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35374500]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[UTC]" + "'", str25, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "jpn" + "'", str29, "jpn");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "jpn" + "'", str32, "jpn");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals(locale38.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ja" + "'", str42, "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        boolean boolean14 = dateTimeZone1.isStandardOffset(1644572616432L);
        int int16 = dateTimeZone1.getOffsetFromLocal((long) 6);
        long long20 = dateTimeZone1.convertLocalToUTC(1644572622671L, false, (-1L));
        java.util.TimeZone timeZone21 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644536622671L + "'", long20 == 1644536622671L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        boolean boolean11 = strSet7.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        java.lang.String[] strArray21 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        boolean boolean25 = strSet22.equals((java.lang.Object) locale24);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet22);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream27 = languageRangeList9.stream();
        java.lang.AutoCloseable[] autoCloseableArray28 = new java.lang.AutoCloseable[] { languageRangeStream27 };
        java.lang.AutoCloseable[] autoCloseableArray29 = strSet6.toArray(autoCloseableArray28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.parse("eng", strMap31);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = property40.getAsText(locale41);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getISO3Language();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.millisOfSecond();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.lang.String str60 = property58.getAsText(locale59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale33, locale34, locale41, locale43, locale44, locale45, locale47, locale50, locale52, locale59, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter(languageRangeList32, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        boolean boolean68 = locale67.hasExtensions();
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField71 = copticChronology70.hours();
        int int72 = copticChronology70.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology70.era();
        boolean boolean74 = strSet69.remove((java.lang.Object) copticChronology70);
        java.util.Locale.FilteringMode filteringMode75 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags(languageRangeList32, (java.util.Collection<java.lang.String>) strSet69, filteringMode75);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap77);
        boolean boolean79 = strSet6.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        int int80 = strSet6.size();
        java.lang.String str81 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet6);
        boolean boolean83 = strSet6.equals((java.lang.Object) 35329682);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = strSet6.add("239");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeStream27);
        org.junit.Assert.assertNotNull(autoCloseableArray28);
        org.junit.Assert.assertNotNull(autoCloseableArray29);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "586" + "'", str42, "586");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (Canada)" + "'", str48, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "586" + "'", str60, "586");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + filteringMode75 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode75.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(languageRangeList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 35028711, dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC(1644572588615L, true, 1613036774024L);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        int int8 = timeZone7.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644536588615L + "'", long6 == 1644536588615L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField9 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.Chronology chronology11 = copticChronology0.withUTC();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology3);
        org.joda.time.Chronology chronology5 = copticChronology3.withUTC();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = copticChronology3.add(readablePeriod6, (long) 455, 625);
        org.joda.time.DurationField durationField10 = copticChronology3.weekyears();
        java.lang.Class<?> wildcardClass11 = copticChronology3.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 455L + "'", long9 == 455L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        java.lang.String[] strArray1 = new java.lang.String[] { "35013166" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        boolean boolean13 = strSet2.contains((java.lang.Object) localDateTime12);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        boolean boolean18 = strSet14.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream19 = languageRangeList16.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap20);
        boolean boolean22 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream23 = languageRangeList21.parallelStream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream24 = languageRangeList21.stream();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(languageRangeStream19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeStream23);
        org.junit.Assert.assertNotNull(languageRangeStream24);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withEra(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withMonthOfYear(981);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 981 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        int int5 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(35050512);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-292275054) + "'", int3 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-292275054) + "'", int5 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale10.getDisplayCountry(locale13);
        java.lang.String str15 = locale7.getDisplayName(locale10);
        java.lang.String str16 = locale7.getDisplayName();
        java.lang.String str17 = locale0.getDisplayName(locale7);
        java.lang.String str18 = locale7.getDisplayVariant();
        java.lang.String str19 = locale7.getVariant();
        java.lang.String str21 = locale7.getExtension('u');
        java.lang.String str22 = locale7.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "695" + "'", str8, "695");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        org.joda.time.DurationField durationField10 = copticChronology8.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        long long17 = copticChronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.DurationField durationField18 = copticChronology8.hours();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology8.year();
        boolean boolean21 = localDateTime7.equals((java.lang.Object) copticChronology8);
        long long27 = copticChronology8.getDateTimeMillis((long) '4', 22, 44, 4, 710);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMonths(103981);
        int[] intArray47 = copticChronology8.get((org.joda.time.ReadablePartial) localDateTime43, 1644572630964L);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology8.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = copticChronology8.getDateTimeMillis(3, 35252575, 563, 177);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35252575 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572974721L + "'", long17 == 1644572974721L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 81844710L + "'", long27 == 81844710L);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1738, 6, 4, 35030964]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.years();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime5.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property21 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime5.minuteOfHour();
        int int23 = localDateTime5.getEra();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(1738);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        int int32 = localDateTime30.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        boolean boolean59 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField71 = copticChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.hourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        boolean boolean80 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime79);
        int int81 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime69);
        int int82 = property38.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property38.getFieldType();
        boolean boolean84 = localDateTime30.isSupported(dateTimeFieldType83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime87 = property85.addToCopy((int) (byte) 0);
        int int88 = localDateTime87.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property89 = localDateTime87.hourOfDay();
        int int90 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime87);
        boolean boolean91 = copticChronology0.equals((java.lang.Object) localDateTime87);
        org.joda.time.DateTimeField dateTimeField92 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField93 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField94 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField95 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 760 + "'", int32 == 760);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.halfdayOfDay();
        long long36 = copticChronology0.add(1644572635634L, (long) 467, 625);
        java.lang.String[] strArray46 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.util.Locale locale49 = java.util.Locale.CANADA;
        boolean boolean50 = strSet47.equals((java.lang.Object) locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        boolean boolean54 = copticChronology0.equals((java.lang.Object) strSet53);
        org.joda.time.DateTimeField dateTimeField55 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField56 = copticChronology0.days();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = copticChronology0.get(readablePeriod57, 1644572767624L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572974843L + "'", long9 == 1644572974843L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431484974843L + "'", long31 == 5431484974843L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1644572927509L + "'", long36 == 1644572927509L);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English" + "'", str52, "English");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str5 = dateTimeZone1.getID();
        java.lang.String str7 = dateTimeZone1.getName((long) 978);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = new java.util.Locale("889", "4", "580");
        java.lang.String str15 = locale8.getDisplayScript(locale14);
        boolean boolean16 = dateTimeZone1.equals((java.lang.Object) locale8);
        boolean boolean17 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale14.toString(), "889_4_580");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(688, 35249869, 0, 35058197, 313, 624);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35058197 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plusDays(49);
        int int68 = localDateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.minuteOfHour();
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.secondOfMinute();
        org.joda.time.LocalDateTime.Property property71 = localDateTime67.minuteOfHour();
        org.joda.time.LocalDateTime.Property property72 = localDateTime67.minuteOfHour();
        org.joda.time.DurationField durationField73 = property72.getLeapDurationField();
        org.joda.time.DurationField durationField74 = property72.getRangeDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 885 + "'", int8 == 885);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 18 + "'", int68 == 18);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusMonths(28);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plus(readablePeriod15);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = property22.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = property22.roundHalfEvenCopy();
        int int27 = localDateTime26.getDayOfWeek();
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfSecond();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = property34.getAsText(locale35);
        long long37 = property34.remainder();
        org.joda.time.LocalDateTime localDateTime38 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withDayOfYear((int) (short) 1);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.era();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMillis((-1));
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime61.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime71.plus(readablePeriod77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime71.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property79.getFieldType();
        boolean boolean81 = localDateTime56.isSupported(dateTimeFieldType80);
        int int82 = localDateTime40.get(dateTimeFieldType80);
        int int83 = dateTime28.get(dateTimeFieldType80);
        int int84 = localDateTime14.indexOf(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "936" + "'", str36, "936");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.centuryOfEra();
        int int39 = localDateTime37.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minus(readablePeriod40);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTime dateTime45 = localDateTime37.toDateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime45);
        long long48 = dateTime45.getMillis();
        long long49 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property18.getFieldType();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1737-06-04T09:49:34.970+10:00" + "'", str29, "1737-06-04T09:49:34.970+10:00");
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 37 + "'", int39 == 37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1737-06-04T09:49:34.970Z" + "'", str46, "1737-06-04T09:49:34.970Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1613036974970L + "'", long48 == 1613036974970L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 37L + "'", long49 == 37L);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = copticChronology0.add(readablePeriod5, 1644572907672L, 818);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572907672L + "'", long8 == 1644572907672L);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = nameProvider0.getName(locale2, "38", "493");
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str9 = locale6.getExtension('a');
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale6.getDisplayName(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "239", "750");
        java.lang.String str16 = locale11.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) str16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"fr\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfMinute();
        org.joda.time.Chronology chronology8 = copticChronology0.withUTC();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        int int18 = localDateTime15.getWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology19.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        int[] intArray42 = localDateTime41.getValues();
        copticChronology19.validate((org.joda.time.ReadablePartial) localDateTime33, intArray42);
        int int44 = localDateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime33.minusDays(782);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(49);
        int int49 = localDateTime46.getYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property51 = localDateTime15.hourOfDay();
        org.joda.time.DurationField durationField52 = property51.getDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1738 + "'", int18 == 1738);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35375049]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1737, 6, 4, 35375049]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1735 + "'", int49 == 1735);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.yearOfEra();
        int int21 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusSeconds(35048859);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears(276);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.years();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 112 + "'", int18 == 112);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35375112 + "'", int21 == 35375112);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        int int10 = localDateTime9.getDayOfWeek();
        int int11 = localDateTime9.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes(775);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withDate(753, 120, 34988312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        java.lang.String str11 = locale6.getDisplayVariant();
        java.lang.String str12 = locale6.getVariant();
        java.util.Locale locale13 = locale6.stripExtensions();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.plus(readablePeriod32);
        int int34 = localDateTime33.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusMonths(3);
        int int37 = localDateTime33.getYear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.secondOfMinute();
        int int39 = property38.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime40 = property38.roundCeilingCopy();
        org.joda.time.DurationField durationField41 = property38.getDurationField();
        org.joda.time.LocalDateTime localDateTime42 = property38.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime43 = property38.withMinimumValue();
        boolean boolean44 = locale13.equals((java.lang.Object) localDateTime43);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "137" + "'", str7, "137");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 137 + "'", int34 == 137);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1738 + "'", int37 == 1738);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.util.TimeZone timeZone6 = dateTimeZone3.toTimeZone();
        long long8 = dateTimeZone3.nextTransition((-1L));
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 969);
        int int12 = dateTimeZone3.getStandardOffset(1644572622671L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1644572707881L, dateTimeZone3);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusYears((int) (short) 0);
        int[] intArray31 = copticChronology19.get((org.joda.time.ReadablePartial) localDateTime29, 0L);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime43 = property41.roundHalfEvenCopy();
        boolean boolean44 = localDateTime29.isEqual((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusWeeks(728);
        boolean boolean47 = copticChronology14.equals((java.lang.Object) localDateTime46);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusYears(281);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999031L) + "'", long10 == (-35999031L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1737, 6, 4, 35375187]");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDateTime14.getValue(435);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 435");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay((int) '#');
        boolean boolean20 = dateTimeZone9.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone9);
        long long23 = dateTimeZone9.previousTransition(1644572610881L);
        long long26 = dateTimeZone9.convertLocalToUTC((long) (short) 1, true);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale28.getExtension('u');
        java.lang.String str32 = dateTimeZone9.getName((long) 49, locale28);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime35.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime35.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property51 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime35.plus(readablePeriod54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYear((int) 'u');
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withCenturyOfEra(756);
        boolean boolean60 = dateTimeZone9.isLocalDateTimeGap(localDateTime59);
        org.joda.time.Chronology chronology61 = copticChronology5.withZone(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            long long66 = chronology61.getDateTimeMillis(692, 147, 966, 523);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 147 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644572610881L + "'", long23 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-35999999L) + "'", long26 == (-35999999L));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 22);
        java.lang.String str17 = dateTimeZone13.getShortName(1644572624742L);
        long long19 = dateTimeZone13.convertUTCToLocal(1644572611311L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        boolean boolean21 = dateTime11.equals((java.lang.Object) localDateTime20);
        long long22 = dateTime11.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = property28.roundHalfEvenCopy();
        int int33 = localDateTime32.getDayOfWeek();
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) 22);
        java.lang.String str40 = dateTimeZone36.getShortName(1644572624742L);
        long long42 = dateTimeZone36.convertUTCToLocal(1644572611311L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        boolean boolean44 = dateTime34.equals((java.lang.Object) localDateTime43);
        long long45 = dateTime34.getMillis();
        int int46 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime34);
        java.lang.String str47 = dateTime11.toString();
        org.joda.time.Chronology chronology48 = dateTime11.getChronology();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644608611311L + "'", long19 == 1644608611311L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644536975239L + "'", long22 == 1644536975239L);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644608611311L + "'", long42 == 1644608611311L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644536975239L + "'", long45 == 1644536975239L);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1738-06-04T09:49:35.239+10:00" + "'", str47, "1738-06-04T09:49:35.239+10:00");
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay(10);
        int[] intArray16 = localDateTime15.getValues();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withEra(1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withPeriodAdded(readablePeriod27, 159);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime21.getFields();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1738, 6, 4, 10]");
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = locale12.getScript();
        java.util.Locale.setDefault(locale12);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        timeZone1.setID("35088037");
        boolean boolean7 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str10 = dateTimeZone9.getID();
        boolean boolean12 = dateTimeZone9.isStandardOffset(10L);
        java.util.TimeZone timeZone13 = dateTimeZone9.toTimeZone();
        boolean boolean14 = timeZone1.hasSameRules(timeZone13);
        timeZone1.setRawOffset(40);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getScript();
        java.util.Locale locale4 = new java.util.Locale("467");
        java.lang.String str5 = locale0.getDisplayScript(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "467");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        int int13 = localDateTime12.getDayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime51 = property5.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = property57.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = property57.addWrapFieldToCopy((int) (byte) 0);
        boolean boolean61 = localDateTime51.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date62 = localDateTime60.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -580 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffset(0L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        int int9 = timeZone8.getRawOffset();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.TimeZone.setDefault(timeZone11);
        java.time.ZoneId zoneId16 = timeZone11.toZoneId();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone(zoneId16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone(zoneId16);
        boolean boolean19 = timeZone8.hasSameRules(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        long long22 = dateTimeZone20.nextTransition(5431484696935L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5431484696935L + "'", long22 == 5431484696935L);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('x', "709");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder20 = builder17.setLocale(locale19);
        java.util.Locale.Builder builder23 = builder17.setExtension('u', "35026152");
        java.util.Locale.Builder builder26 = builder23.setExtension('a', "196");
        boolean boolean27 = localDateTime11.equals((java.lang.Object) builder26);
        java.util.Locale.Builder builder28 = builder26.clear();
        java.util.Locale.Builder builder29 = builder26.clear();
        java.util.Locale.Builder builder31 = builder29.setVariant("");
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder31.setUnicodeLocaleKeyword("49", "\u5fb7\u6587\u5fb7\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsText(locale17);
        long long19 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfFloorCopy();
        java.lang.String str21 = property16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property16.getFieldType();
        boolean boolean23 = dateTime9.isSupported(dateTimeFieldType22);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder24.setExtension('x', "811");
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getDisplayScript();
        java.lang.String str33 = locale29.getDisplayVariant();
        java.lang.String str34 = locale29.getDisplayScript();
        java.util.Locale.Builder builder35 = builder27.setLocale(locale29);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.millisOfSecond();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = property41.getAsText(locale42);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale42.getDisplayLanguage(locale44);
        java.util.Locale.Builder builder47 = builder27.setLocale(locale44);
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale.Builder builder50 = builder48.addUnicodeLocaleAttribute("528");
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean54 = dateTimeZone52.isStandardOffset((long) 22);
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.lang.String str57 = locale56.getDisplayName();
        java.lang.String str58 = dateTimeZone52.getName(1644572630789L, locale56);
        java.util.Locale.Builder builder59 = builder48.setLocale(locale56);
        boolean boolean60 = dateTime9.equals((java.lang.Object) locale56);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        int[] intArray69 = localDateTime68.getValues();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = property76.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = property76.addWrapFieldToCopy((int) (byte) 0);
        boolean boolean80 = property70.equals((java.lang.Object) localDateTime79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withYearOfEra(112);
        int int83 = localDateTime82.getWeekyear();
        boolean boolean84 = dateTime9.equals((java.lang.Object) localDateTime82);
        java.lang.String str85 = localDateTime82.toString();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime82.withCenturyOfEra((int) '#');
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "494" + "'", str18, "494");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[millisOfSecond]" + "'", str21, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (Canada)" + "'", str30, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "494" + "'", str43, "494");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u82f1\u8a9e" + "'", str46, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "German (Germany)" + "'", str57, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:00" + "'", str58, "+10:00");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1737, 6, 4, 35375494]");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 112 + "'", int83 == 112);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0112-06-04T09:49:35.494" + "'", str85, "0112-06-04T09:49:35.494");
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Country();
        int int9 = property5.getMaximumTextLength(locale6);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale6.getDisplayVariant(locale10);
        boolean boolean13 = copticChronology0.equals((java.lang.Object) str12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = copticChronology0.add(1644572864968L, 1794735862697L, 35348391);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1794735862697 * 35348391");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setVariant("21");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 21 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str9 = dateTimeZone1.getNameKey((long) 113);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str11 = dateTimeZone1.getID();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField14 = copticChronology13.hours();
        int int15 = copticChronology13.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 2, (org.joda.time.Chronology) copticChronology13);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology13.millisOfDay();
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) copticChronology13);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withHourOfDay(22);
        int int38 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.era();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(44);
        int int43 = dateTimeZone41.getOffsetFromLocal(1644572632040L);
        boolean boolean44 = localDateTime22.equals((java.lang.Object) dateTimeZone41);
        long long46 = copticChronology13.set((org.joda.time.ReadablePartial) localDateTime22, (long) 59);
        org.joda.time.DateTimeField dateTimeField47 = copticChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 158400000 + "'", int43 == 158400000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572975578L + "'", long46 == 1644572975578L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str18 = copticChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute(43);
        int[] intArray28 = copticChronology17.get((org.joda.time.ReadablePartial) localDateTime26, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime12, intArray28);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572975610L + "'", long9 == 1644572975610L);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CopticChronology[UTC]" + "'", str18, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffset(0L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        int int9 = timeZone8.getRawOffset();
        java.lang.String str10 = timeZone8.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT+10:00" + "'", str10, "GMT+10:00");
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        java.lang.String str6 = copticChronology0.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.TimeZone.setDefault(timeZone2);
        java.time.ZoneId zoneId7 = timeZone2.toZoneId();
        boolean boolean8 = strSet0.equals((java.lang.Object) timeZone2);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("French");
        boolean boolean11 = strSet0.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.lang.String[] strArray21 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        boolean boolean25 = strSet22.equals((java.lang.Object) locale24);
        strSet22.clear();
        boolean boolean28 = strSet22.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator29 = strSet22.spliterator();
        boolean boolean31 = strSet22.add("638");
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMonths(103981);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.centuryOfEra();
        boolean boolean51 = strSet22.equals((java.lang.Object) property50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.parse("eng", strMap53);
        java.util.Set<java.lang.String> strSet55 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        boolean boolean59 = strSet55.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57);
        java.util.Set<java.lang.String> strSet60 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags(languageRangeList54, (java.util.Collection<java.lang.String>) strList61, filteringMode62);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet22, filteringMode62);
        org.joda.time.tz.Provider provider65 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone67 = provider65.getZone("1738-06-04T09:44:49.900");
        java.util.Set<java.lang.String> strSet68 = provider65.getAvailableIDs();
        java.lang.String str69 = java.util.Locale.lookupTag(languageRangeList10, (java.util.Collection<java.lang.String>) strSet68);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode62.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale2.getDisplayName();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str7 = locale2.getDisplayName(locale6);
        java.util.Locale.setDefault(category1, locale2);
        java.util.Locale locale9 = java.util.Locale.getDefault(category1);
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = timeZone0.getDisplayName(locale9);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese (China)" + "'", str4, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese (China)" + "'", str7, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str12, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime8.getFieldTypes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(700);
        int int14 = localDateTime13.size();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.centuryOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime13.getFieldTypes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(3);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField29 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35375727]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1644572672261L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(562);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readablePeriod6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime7.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        boolean boolean5 = timeZone1.observesDaylightTime();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "709");
        java.util.Locale.Builder builder11 = builder6.setLanguage("CAN");
        java.util.Locale.Builder builder12 = builder6.clear();
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale13.getExtension('u');
        java.util.Locale.Builder builder17 = builder6.setLocale(locale13);
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale13.getDisplayScript(locale18);
        java.lang.String str20 = locale13.getVariant();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime23.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        boolean boolean44 = localDateTime38.isAfter((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime41.year();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField48 = property46.getDurationField();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider50);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.util.Locale.setDefault(locale52);
        java.lang.String str58 = nameProvider50.getName(locale52, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        java.lang.String str59 = locale52.getDisplayVariant();
        org.joda.time.LocalDateTime localDateTime60 = property46.setCopy("782", locale52);
        java.lang.String str61 = locale13.getDisplayName(locale52);
        java.lang.String str62 = timeZone1.getDisplayName(locale52);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (Canada)" + "'", str54, "English (Canada)");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese (China)" + "'", str61, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Greenwich Mean Time" + "'", str62, "Greenwich Mean Time");
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        long long13 = copticChronology0.getDateTimeMillis(36000000, (int) (byte) 10, 3, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str16 = dateTimeZone15.getID();
        boolean boolean18 = dateTimeZone15.isStandardOffset(10L);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.lang.String str21 = dateTimeZone15.getShortName((long) 14, locale20);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.millisOfSecond();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = property27.getAsText(locale28);
        org.joda.time.Interval interval30 = property27.toInterval();
        org.joda.time.LocalDateTime localDateTime31 = property27.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds(10);
        int int34 = localDateTime33.getEra();
        boolean boolean35 = dateTimeZone15.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Chronology chronology36 = copticChronology0.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1136020407753600097L + "'", long13 == 1136020407753600097L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "847" + "'", str29, "847");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(700);
        int int14 = localDateTime13.size();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.hourOfDay();
        boolean boolean25 = property24.isLeap();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.getLocalDateTime();
        boolean boolean34 = property24.equals((java.lang.Object) property32);
        org.joda.time.DurationField durationField35 = property32.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property32.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        boolean boolean38 = localDateTime13.isSupported(dateTimeFieldType37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str40 = copticChronology39.toString();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str45 = copticChronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology44.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withSecondOfMinute(43);
        int[] intArray55 = copticChronology44.get((org.joda.time.ReadablePartial) localDateTime53, (long) 43);
        copticChronology39.validate((org.joda.time.ReadablePartial) localDateTime43, intArray55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        boolean boolean60 = dateTimeZone58.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone58);
        org.joda.time.Chronology chronology62 = copticChronology39.withZone(dateTimeZone58);
        java.lang.String str63 = dateTimeZone58.getID();
        org.joda.time.DateTime dateTime64 = localDateTime13.toDateTime(dateTimeZone58);
        long long66 = dateTimeZone58.convertUTCToLocal((long) 431);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35375878]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CopticChronology[UTC]" + "'", str40, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CopticChronology[UTC]" + "'", str45, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 431L + "'", long66 == 431L);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology18.era();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology18.era();
        org.joda.time.DurationField durationField32 = copticChronology18.millis();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology18.secondOfMinute();
        org.joda.time.DurationField durationField36 = copticChronology18.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DurationField durationField5 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.year();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = property9.setCopy(43);
        int[] intArray15 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime13, 5431484690688L);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1858, 6, 4, 35090688]");
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone1);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale8 = locale6.stripExtensions();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = dateTimeZone1.getShortName(1644572654500L, locale6);
        long long14 = dateTimeZone1.convertLocalToUTC(1644572641313L, true, (long) 971);
        java.lang.String str15 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572641313L + "'", long14 == 1644572641313L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.TimeZone.setDefault(timeZone2);
        java.time.ZoneId zoneId7 = timeZone2.toZoneId();
        boolean boolean8 = strSet0.equals((java.lang.Object) timeZone2);
        int int10 = timeZone2.getOffset((long) 43);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        java.util.Locale locale1 = new java.util.Locale("536");
        org.junit.Assert.assertEquals(locale1.toString(), "536");
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        int int7 = property5.getLeapAmount();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy((long) 100);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        int int17 = property13.getMaximumShortTextLength(locale16);
        java.util.Locale locale21 = new java.util.Locale("974", "787", "485");
        java.lang.String str22 = locale21.getCountry();
        java.lang.String str23 = property13.getAsShortText(locale21);
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleKeys();
        int int25 = property5.getMaximumShortTextLength(locale21);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertEquals(locale21.toString(), "974_787_485");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "787" + "'", str22, "787");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "990" + "'", str23, "990");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("35109705");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.removeUnicodeLocaleAttribute("1737-06-04T09:48:16.710+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1737-06-04T09:48:16.710+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 22);
        long long6 = dateTimeZone1.adjustOffset(1152845405211956L, false);
        int int8 = dateTimeZone1.getStandardOffset((long) 554);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusYears((int) (short) -1);
        int[] intArray17 = localDateTime16.getValues();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.hourOfDay();
        boolean boolean19 = dateTimeZone1.isLocalDateTimeGap(localDateTime16);
        long long21 = dateTimeZone1.convertUTCToLocal(1644572828344L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1, 600);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 600");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1152845405211956L + "'", long6 == 1152845405211956L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1737, 6, 4, 35376010]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644608828344L + "'", long21 == 1644608828344L);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("653", (double) 1644572761955L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644572761955E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField16 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField18 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField19 = copticChronology0.months();
        org.joda.time.DurationField durationField20 = copticChronology0.hours();
        org.joda.time.DurationField durationField21 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField24 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.DurationField durationField12 = copticChronology0.seconds();
        org.joda.time.DurationField durationField13 = copticChronology0.seconds();
        org.joda.time.DurationField durationField14 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.minuteOfDay();
        org.joda.time.Chronology chronology16 = copticChronology0.withUTC();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withPeriodAdded(readablePeriod9, 723);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        boolean boolean35 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.year();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfCeilingCopy();
        boolean boolean39 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime4.minusMillis((int) 'u');
        org.joda.time.LocalDateTime.Property property42 = localDateTime4.weekyear();
        int int43 = localDateTime4.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime4.plusMinutes(754);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        long long9 = dateTimeZone6.convertLocalToUTC(0L, false);
        java.util.TimeZone timeZone10 = dateTimeZone6.toTimeZone();
        java.lang.String str11 = dateTimeZone6.getID();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField10 = copticChronology1.centuries();
        org.joda.time.DurationField durationField11 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = copticChronology1.hours();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(36000004L, (org.joda.time.Chronology) copticChronology1);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withSecondOfMinute(51);
        int int18 = localDateTime17.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusYears(636);
        int int21 = localDateTime17.getYearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86 + "'", int15 == 86);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36051004 + "'", int18 == 36051004);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 86 + "'", int21 == 86);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Country();
        int int6 = property2.getMaximumTextLength(locale3);
        org.joda.time.Interval interval7 = property2.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        boolean boolean28 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = dateTime17.getChronology();
        int int52 = property2.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DurationField durationField53 = property2.getRangeDurationField();
        java.lang.String str54 = property2.getAsShortText();
        org.joda.time.LocalDateTime localDateTime56 = property2.addToCopy(328);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2038738 + "'", int52 == 2038738);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10" + "'", str54, "10");
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(580);
        int int5 = localDateTime2.getYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusYears(100);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = copticChronology9.hours();
        int int11 = copticChronology9.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.era();
        org.joda.time.DurationField durationField13 = copticChronology9.days();
        boolean boolean14 = localDateTime2.equals((java.lang.Object) copticChronology9);
        org.joda.time.DurationField durationField15 = copticChronology9.millis();
        long long19 = copticChronology9.add(1644572627999L, (-7339385494493L), 16);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1738-06-04T09:49:36.191" + "'", str6, "1738-06-04T09:49:36.191");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-115785595283889L) + "'", long19 == (-115785595283889L));
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = new java.util.Locale("\uc911\uad6d\uc5b4\uc911\uad6d)", "946");
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str16 = locale11.getDisplayName(locale15);
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale20 = locale18.stripExtensions();
        java.util.Locale.setDefault(category10, locale18);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale23.getLanguage();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.lang.String str29 = locale26.getDisplayScript();
        java.lang.String str30 = locale23.getDisplayVariant(locale26);
        java.lang.String str31 = locale22.getDisplayVariant(locale26);
        java.util.Locale.setDefault(category10, locale26);
        java.util.Set<java.lang.Character> charSet33 = locale26.getExtensionKeys();
        java.lang.String str34 = locale8.getDisplayScript(locale26);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale8.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)_946");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (China)" + "'", str13, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese (China)" + "'", str16, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en" + "'", str24, "en");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(35048859);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(42);
        int int17 = localDateTime16.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDurationAdded(readableDuration18, 893);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra(608);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime25.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis((int) (byte) 100);
        boolean boolean43 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime40);
        int int44 = localDateTime40.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DurationField durationField6 = copticChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology0.getZone();
        long long11 = copticChronology0.add(1644572677045L, (-7339421692352L), 310);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2273576151952075L) + "'", long11 == (-2273576151952075L));
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime12.toString(dateTimeFormatter18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withDurationAdded(readableDuration20, 799);
        org.joda.time.LocalDateTime.Property property23 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = property23.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusSeconds(888);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1738-06-04T09:49:36.282" + "'", str19, "1738-06-04T09:49:36.282");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(704, (int) ' ', 103985, 702, 339, 849);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 702 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        int int8 = localDateTime6.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusWeeks(102);
        java.util.Locale locale13 = new java.util.Locale("GMT");
        java.lang.String str14 = localDateTime6.toString("+44:00", locale13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime6.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals(locale13.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+44:00" + "'", str14, "+44:00");
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology0.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone14);
        boolean boolean20 = dateTimeZone14.isFixed();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.Chronology chronology22 = copticChronology0.withZone(dateTimeZone14);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField24 = copticChronology23.hours();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology23.era();
        java.lang.String str26 = copticChronology23.toString();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology23.era();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology23.hourOfHalfday();
        java.lang.String str29 = copticChronology23.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = copticChronology23.getZone();
        org.joda.time.Chronology chronology31 = chronology22.withZone(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone30, 695);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 695");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CopticChronology[UTC]" + "'", str26, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DurationField durationField4 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField5 = copticChronology0.weekyears();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.getID();
        long long15 = dateTimeZone11.adjustOffset((long) 'x', true);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        boolean boolean20 = strSet16.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale24, locale25, locale26, locale30, locale32, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList38);
        boolean boolean42 = dateTimeZone11.equals((java.lang.Object) locale41);
        java.lang.String str44 = dateTimeZone11.getShortName((long) 999);
        org.joda.time.Chronology chronology45 = copticChronology0.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 120L + "'", long15 == 120L);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English (Canada)" + "'", str33, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguageTag("706");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 706 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = copticChronology0.withUTC();
        org.joda.time.Chronology chronology2 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField3 = copticChronology0.weeks();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        int int5 = dateTimeZone2.getStandardOffset(0L);
        boolean boolean7 = dateTimeZone2.isStandardOffset((long) (short) 1);
        java.lang.String str8 = dateTimeZone2.toString();
        long long11 = dateTimeZone2.adjustOffset(36000004L, false);
        long long13 = dateTimeZone2.convertUTCToLocal((long) 35163266);
        java.lang.String str15 = dateTimeZone2.getName(1644572663540L);
        java.util.TimeZone timeZone16 = dateTimeZone2.toTimeZone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000004L + "'", long11 == 36000004L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35163266L + "'", long13 == 35163266L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        long long28 = copticChronology0.getDateTimeMillis(662, (int) (byte) 10, 1, 319);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-32301331199681L) + "'", long28 == (-32301331199681L));
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        strSet10.clear();
        boolean boolean16 = strSet10.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet10.spliterator();
        boolean boolean19 = strSet10.add("638");
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMonths(103981);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.centuryOfEra();
        boolean boolean39 = strSet10.equals((java.lang.Object) property38);
        int int40 = strSet10.size();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMillis(0);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus(readablePeriod20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.plus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.plusHours(587);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1738-06-04T00:00:00.100" + "'", str16, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        java.util.Locale locale3 = new java.util.Locale("1738-06-04t09:43:28.618 (539)", "306", "35026152");
        java.lang.String str4 = locale3.toLanguageTag();
        java.lang.String str5 = locale3.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 1738-06-04t09:43:28.618 (539)");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "1738-06-04t09:43:28.618 (539)_306_35026152");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und-306-35026152" + "'", str4, "und-306-35026152");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "35026152" + "'", str5, "35026152");
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = copticChronology0.getDateTimeMillis(976, 212, 35308004, 35320495, 576, 2486793, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35320495 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField3 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+01:03" + "'", str4, "+01:03");
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        int int4 = localDateTime2.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withCenturyOfEra(405);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(35163266);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35163266 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        int int4 = copticChronology0.getMinimumDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = copticChronology0.getDateTimeMillis(106, 35234900, 945, 684);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35234900 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.dayOfWeek();
        boolean boolean7 = copticChronology3.equals((java.lang.Object) 1644572844873L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime2.getFieldTypes();
        int int17 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getISO3Country();
        int int25 = property21.getMaximumTextLength(locale22);
        java.lang.String str26 = localDateTime2.toString("293", locale22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime2.withYearOfCentury(32);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime2.minusDays(922);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withSecondOfMinute(290);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 290 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "293" + "'", str26, "293");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.nextTransition((-1L));
        int int8 = dateTimeZone1.getStandardOffset((long) 'x');
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str11 = dateTimeZone1.getName(1644572610881L);
        java.lang.String str12 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withDate(2495554, 12, 35183068);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35183068 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        long long10 = dateTimeZone6.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.plus(readablePeriod29);
        boolean boolean31 = dateTimeZone6.isLocalDateTimeGap(localDateTime23);
        java.lang.String str33 = localDateTime23.toString("380");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = localDateTime23.toString("1737-06-04T09:47:56.624+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "380" + "'", str33, "380");
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        int int17 = localDateTime15.getMillisOfDay();
        int int18 = localDateTime15.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime24.getFieldTypes();
        int int39 = localDateTime24.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getISO3Country();
        int int47 = property43.getMaximumTextLength(locale44);
        java.lang.String str48 = localDateTime24.toString("293", locale44);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        java.util.Set<java.lang.String> strSet51 = locale44.getUnicodeLocaleKeys();
        java.lang.String str52 = localDateTime2.toString("572", locale44);
        int int53 = localDateTime2.size();
        org.joda.time.LocalDateTime.Property property54 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime.Property property55 = localDateTime2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = localDateTime2.withSecondOfMinute(346);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 346 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "293" + "'", str48, "293");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "572" + "'", str52, "572");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 0, 1);
        long long5 = dateTimeZone2.adjustOffset(1644572726698L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572726698L + "'", long5 == 1644572726698L);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(700);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusDays(4);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMinutes(36000000);
        int int29 = property15.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        int int30 = property15.getLeapAmount();
        java.lang.String str31 = property15.getAsText();
        org.joda.time.Interval interval32 = property15.toInterval();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35376920]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "25" + "'", str31, "25");
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("813");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField10 = copticChronology0.centuries();
        org.joda.time.DurationField durationField11 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField13 = copticChronology0.halfdays();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.secondOfMinute();
        int int21 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.dayOfYear();
        long long24 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime16, (long) 335);
        org.joda.time.LocalDateTime.Property property25 = localDateTime16.weekyear();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("it_IT");
        java.lang.String str29 = localDateTime16.toString("35276776", locale28);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644572976992L + "'", long24 == 1644572976992L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "35276776" + "'", str29, "35276776");
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(3);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35377011]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(650);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(450);
        int int3 = dateTimeZone1.getOffset(0L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 450 + "'", int3 == 450);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long10 = copticChronology0.add(1644572616856L, 1644572617993L, 700);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        org.joda.time.DurationField durationField13 = copticChronology11.millis();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime40.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime40.plus(readablePeriod56);
        int int58 = localDateTime57.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.yearOfEra();
        boolean boolean60 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        int[] intArray61 = localDateTime57.getValues();
        copticChronology11.validate((org.joda.time.ReadablePartial) localDateTime21, intArray61);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime65.withFields((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withMillisOfDay(10);
        int[] intArray79 = localDateTime76.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray79);
        org.joda.time.DateTimeField dateTimeField81 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField84 = copticChronology0.weekyears();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1152845405211956L + "'", long10 == 1152845405211956L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 48 + "'", int58 == 48);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1738, 6, 4, 35377048]");
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1738, 6, 4, 35377048]");
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusHours(814);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFieldAdded(durationFieldType9, 241);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        boolean boolean23 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.year();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime56);
        long long69 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime56);
        java.util.Locale locale71 = new java.util.Locale("GMT");
        int int72 = property25.getMaximumTextLength(locale71);
        java.lang.String str73 = locale71.getISO3Country();
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleKeys();
        java.lang.String str75 = locale71.getDisplayVariant();
        org.joda.time.chrono.CopticChronology copticChronology76 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology76.dayOfYear();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime83 = property81.addToCopy((long) 100);
        java.util.Locale locale84 = java.util.Locale.CANADA;
        int int85 = property81.getMaximumShortTextLength(locale84);
        java.util.Locale locale89 = new java.util.Locale("974", "787", "485");
        java.lang.String str90 = locale89.getCountry();
        java.lang.String str91 = property81.getAsShortText(locale89);
        boolean boolean92 = locale89.hasExtensions();
        java.lang.String str93 = locale71.getDisplayName(locale89);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 284L + "'", long69 == 284L);
        org.junit.Assert.assertEquals(locale71.toString(), "gmt");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(copticChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertEquals(locale89.toString(), "974_787_485");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "787" + "'", str90, "787");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "111" + "'", str91, "111");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "gmt" + "'", str93, "gmt");
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.Chronology chronology68 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime63.withMillisOfDay(605);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = localDateTime63.withMinuteOfHour(394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 394 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 188 + "'", int8 == 188);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale5.getDisplayScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale5);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale18.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder23 = builder3.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale.Builder builder27 = builder25.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder25.addUnicodeLocaleAttribute("South Korea");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: South Korea [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "216" + "'", str19, "216");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u8a9e" + "'", str22, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField10 = copticChronology0.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = copticChronology0.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDateTime4.getFields();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withPeriodAdded(readablePeriod6, 384);
        int int9 = localDateTime4.getDayOfYear();
        int[] intArray10 = localDateTime4.getValues();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 11, 71377275]");
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(597);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField7 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        java.lang.String str8 = localDateTime2.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(914);
        int int13 = localDateTime12.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay(105);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u82f1\u8a9e" + "'", str8, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.lang.String str8 = property5.getAsText();
        java.lang.String str9 = property5.toString();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str12 = locale11.getDisplayScript();
        int int13 = property5.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime15 = property5.addToCopy(580);
        org.joda.time.DurationField durationField16 = property5.getRangeDurationField();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.util.Locale.setDefault(locale18);
        java.util.Set<java.lang.Character> charSet22 = locale18.getExtensionKeys();
        java.util.Locale.setDefault(locale18);
        org.joda.time.LocalDateTime localDateTime24 = property5.setCopy("525", locale18);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear(733);
        org.joda.time.DateTime dateTime27 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusDays(989);
        int int30 = localDateTime24.getWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "336" + "'", str7, "336");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "336" + "'", str8, "336");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[millisOfSecond]" + "'", str9, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1738 + "'", int30 == 1738);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusDays(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes(36000000);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        java.lang.String str22 = dateTime20.toString();
        java.lang.String str23 = dateTime20.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35377403]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1805-11-17T09:49:37.403+10:00" + "'", str22, "1805-11-17T09:49:37.403+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1805-11-17T09:49:37.403+10:00" + "'", str23, "1805-11-17T09:49:37.403+10:00");
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.withMaximumValue();
        int int12 = property5.get();
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(1644572654084L);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay(43);
        boolean boolean19 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minus(readablePeriod20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, (-292269337));
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "414" + "'", str7, "414");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 414 + "'", int12 == 414);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        long long13 = dateTimeZone8.nextTransition((-1L));
        int int15 = dateTimeZone8.getStandardOffset((long) 'x');
        java.lang.String str16 = dateTimeZone8.getID();
        java.lang.String str17 = dateTimeZone8.getID();
        long long19 = dateTimeZone8.nextTransition((long) 884);
        boolean boolean20 = languageRange1.equals((java.lang.Object) long19);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 884L + "'", long19 == 884L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "977", "FR");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str8 = nameProvider0.getShortName(locale5, "406", "1737-06-04T10:00:00.000");
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String[] strArray19 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        boolean boolean23 = strSet20.equals((java.lang.Object) locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = locale9.getDisplayVariant(locale22);
        java.lang.String str28 = nameProvider0.getName(locale22, "Property[millisOfDay]", "578");
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale29.getScript();
        java.lang.String str31 = locale29.getISO3Country();
        boolean boolean32 = locale29.hasExtensions();
        java.lang.String str33 = locale29.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.lang.String str36 = locale29.getDisplayLanguage(locale34);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.millisOfSecond();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = property42.getAsText(locale43);
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale43.getDisplayVariant(locale45);
        java.util.Locale locale50 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str51 = locale45.getDisplayName(locale50);
        java.lang.String str52 = locale34.getDisplayVariant(locale50);
        java.lang.String str55 = nameProvider0.getShortName(locale34, "204", "374");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "KOR" + "'", str31, "KOR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u671d\u9c9c\u6587" + "'", str36, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "474" + "'", str44, "474");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals(locale50.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (China)" + "'", str51, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField15 = copticChronology0.years();
        org.joda.time.DurationField durationField16 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.yearOfEra();
        org.joda.time.DurationField durationField10 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.dayOfYear();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = copticChronology0.set(readablePartial13, 1644572899409L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(630, 742, 930, 52, 0, 180);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusMonths(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime2.withMillisOfSecond(301);
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        boolean boolean44 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        boolean boolean65 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology67 = dateTime33.getChronology();
        int int68 = property22.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology69.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.hourOfDay();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        org.joda.time.Instant instant79 = dateTime78.toInstant();
        int int80 = dateTime33.compareTo((org.joda.time.ReadableInstant) instant79);
        org.joda.time.Chronology chronology81 = instant79.getChronology();
        int int82 = property19.getDifference((org.joda.time.ReadableInstant) instant79);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 49 + "'", int14 == 49);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2038738 + "'", int68 == 2038738);
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(instant79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 284 + "'", int82 == 284);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale5.getDisplayScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder14 = builder11.setExtension('u', "kor");
        java.util.Locale.Builder builder16 = builder14.setRegion("371");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder14.setRegion("35346075");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 35346075 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        int[] intArray25 = localDateTime24.getValues();
        boolean boolean26 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime2.plusSeconds(846);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = property34.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = property34.roundHalfEvenCopy();
        int int39 = localDateTime38.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusSeconds(697);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.year();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withCenturyOfEra(1738);
        int int47 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean48 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime28.withYearOfEra(35046049);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 49 + "'", int14 == 49);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1737, 6, 4, 35377596]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1738-06-04T09:43:55.176");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(113);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusYears(884);
        boolean boolean19 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays(249);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withTime(55, 163, 0, 597);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus(readablePeriod18);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        boolean boolean68 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int70 = property26.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property26.getFieldType();
        boolean boolean72 = localDateTime19.isSupported(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = localDateTime19.withFieldAdded(durationFieldType73, 239);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 637 + "'", int20 == 637);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology18.era();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology18.era();
        org.joda.time.DurationField durationField32 = copticChronology18.millis();
        long long36 = copticChronology18.add(1644536583973L, 5431484725640L, 812);
        org.joda.time.DurationField durationField37 = copticChronology18.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4412010133803653L + "'", long36 == 4412010133803653L);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField36 = copticChronology0.seconds();
        org.joda.time.DurationField durationField37 = copticChronology0.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572977669L + "'", long9 == 1644572977669L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431484977669L + "'", long31 == 5431484977669L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.months();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 0L, 847);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField15 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField17 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        int int15 = property14.getMinimumValueOverall();
        int int16 = property14.getMaximumValueOverall();
        int int17 = property14.get();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1644572627999L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds(758);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(32);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyearOfCentury();
        int int13 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.era();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMillis((-1));
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readablePeriod36);
        int[] intArray39 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime37, 1644572736930L);
        org.joda.time.DurationField durationField40 = copticChronology0.millis();
        org.joda.time.DurationField durationField41 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField42 = copticChronology0.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1738, 6, 4, 35136930]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        boolean boolean23 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withWeekyear(697);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plus(readablePeriod33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.minusMonths((int) (byte) 0);
        int int38 = localDateTime37.size();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.era();
        int int40 = localDateTime37.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYearOfCentury(371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 371 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 18 + "'", int40 == 18);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        boolean boolean26 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.withWeekyear(697);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusMonths((int) (byte) 0);
        int int41 = localDateTime40.size();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.era();
        int int43 = localDateTime40.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime40);
        int[] intArray46 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime44, 1644608720682L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 18 + "'", int43 == 18);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1738, 6, 4, 71120682]");
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        int int25 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minusDays(782);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withSecondOfMinute(478);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 478 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35377812]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35377812]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime12.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property28 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property29 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime12.withMillisOfDay(375);
        int int32 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withDurationAdded(readableDuration34, 21);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        boolean boolean38 = localDateTime36.isSupported(durationFieldType37);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(844);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "4" + "'", str18, "4");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder4.setExtension('u', "35026152");
        java.util.Locale.Builder builder13 = builder10.setExtension('a', "196");
        java.util.Locale.Builder builder15 = builder10.removeUnicodeLocaleAttribute("889");
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder15.setUnicodeLocaleKeyword("2022-02-12T19:48:22.507", "702");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-12T19:48:22.507 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.centuryOfEra();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property9.setCopy(816);
        org.joda.time.LocalDateTime localDateTime14 = property9.setCopy(162);
        int int15 = localDateTime14.getMillisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35377889 + "'", int15 == 35377889);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        boolean boolean41 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.millisOfSecond();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = property48.getAsText(locale49);
        long long51 = property48.remainder();
        org.joda.time.LocalDateTime localDateTime52 = property48.roundHalfFloorCopy();
        java.lang.String str53 = property48.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property48.getFieldType();
        boolean boolean55 = dateTime30.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime30.getZone();
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "907" + "'", str50, "907");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Property[millisOfSecond]" + "'", str53, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        long long13 = copticChronology0.add(1644572630276L, (long) 809, 0);
        org.joda.time.DurationField durationField14 = copticChronology0.days();
        org.joda.time.DurationField durationField15 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField17 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644572630276L + "'", long13 == 1644572630276L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        int int25 = localDateTime14.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime14.withYear(934);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35378004]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35378004]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plusDays(49);
        int int68 = localDateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.yearOfCentury();
        int int70 = localDateTime67.getSecondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 18 + "'", int68 == 18);
        org.junit.Assert.assertNotNull(property69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 38 + "'", int70 == 38);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572767480L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(114);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.minuteOfHour();
        boolean boolean6 = property5.isLeap();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        timeZone1.setRawOffset((-1));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int) '#');
        boolean boolean16 = dateTimeZone5.isLocalDateTimeGap(localDateTime15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone5);
        long long19 = dateTimeZone5.previousTransition(1644572610881L);
        long long22 = dateTimeZone5.convertLocalToUTC((long) (short) 1, true);
        java.util.TimeZone timeZone23 = dateTimeZone5.toTimeZone();
        boolean boolean24 = timeZone1.hasSameRules(timeZone23);
        int int26 = timeZone1.getOffset((long) 328);
        boolean boolean27 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(535);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572610881L + "'", long19 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-35999999L) + "'", long22 == (-35999999L));
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str8 = copticChronology7.toString();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology7.add(readablePeriod9, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField13 = copticChronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology7.centuryOfEra();
        long long19 = copticChronology7.add(1644572579020L, 1644572639605L, 648);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int22 = localDateTime21.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusDays(687);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.monthOfYear();
        int int26 = localDateTime21.getYearOfCentury();
        int[] intArray28 = copticChronology7.get((org.joda.time.ReadablePartial) localDateTime21, 1644572701420L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(527, 914, 26, 860, 343, 59, 738, (org.joda.time.Chronology) copticChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 860 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1067327643043060L + "'", long19 == 1067327643043060L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1738, 6, 4, 35101420]");
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusYears((int) (short) 0);
        int[] intArray20 = copticChronology8.get((org.joda.time.ReadablePartial) localDateTime18, 0L);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = null;
        java.lang.String str26 = nameProvider22.getName(locale23, "fr", "572");
        java.util.Locale locale30 = new java.util.Locale("eng", "153", "English (Canada)");
        java.lang.String str33 = nameProvider22.getName(locale30, "1738", "35035387");
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.millisOfSecond();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsText(locale40);
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale40.getDisplayVariant(locale42);
        java.util.Locale locale47 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str48 = locale42.getDisplayName(locale47);
        java.lang.String str49 = locale47.getCountry();
        java.lang.String str52 = nameProvider22.getShortName(locale47, "1737-06-04T09:45:17.021+10:00", "");
        java.lang.String str53 = locale47.getDisplayName();
        java.util.Set<java.lang.String> strSet54 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str55 = property21.getAsShortText(locale47);
        java.lang.String str56 = dateTimeZone1.getShortName((long) 514, locale47);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        int int59 = dateTimeZone1.getOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals(locale30.toString(), "eng_153_English (Canada)");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "121" + "'", str41, "121");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(locale47.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (China)" + "'", str48, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "539" + "'", str49, "539");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str53, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "35278121" + "'", str55, "35278121");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String[] strArray11 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        boolean boolean15 = strSet12.equals((java.lang.Object) locale14);
        strSet12.clear();
        boolean boolean18 = strSet12.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator19 = strSet12.spliterator();
        boolean boolean21 = strSet12.add("638");
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology22.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        int[] intArray34 = localDateTime33.getValues();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        int[] intArray45 = localDateTime44.getValues();
        copticChronology22.validate((org.joda.time.ReadablePartial) localDateTime36, intArray45);
        boolean boolean47 = strSet12.equals((java.lang.Object) copticChronology22);
        java.lang.Object[] objArray48 = strSet12.toArray();
        java.util.LinkedHashSet[] linkedHashSetArray50 = new java.util.LinkedHashSet[1];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray51 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray50;
        strSetArray51[0] = strSet12;
        java.util.LinkedHashSet<java.lang.String>[] strSetArray54 = strSet1.toArray(strSetArray51);
        java.lang.String[] strArray73 = new java.lang.String[] { "93", "171", "93", "93", "en", "160", "hi!", "Greenwich Mean Time", "449", "eng", "449", "527", "Chinese (China)", "en", "Chinese (China)", "en_CA", "+10:00", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        java.lang.CharSequence[] charSequenceArray78 = new java.lang.CharSequence[] { "+10:00", "en" };
        java.lang.CharSequence[] charSequenceArray79 = strSet74.toArray(charSequenceArray78);
        org.joda.time.chrono.CopticChronology copticChronology80 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField81 = copticChronology80.hours();
        int int82 = copticChronology80.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology80.era();
        org.joda.time.DurationField durationField84 = copticChronology80.days();
        boolean boolean85 = strSet74.remove((java.lang.Object) copticChronology80);
        java.util.Set<java.lang.String> strSet86 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray87 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList88 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList88, languageRangeArray87);
        boolean boolean90 = strSet86.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList88);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap91 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList92 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList88, strMap91);
        boolean boolean93 = strSet74.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList92);
        boolean boolean94 = strSet1.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList92);
        java.util.Spliterator<java.lang.String> strSpliterator95 = strSet1.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1737, 6, 4, 35378151]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1737, 6, 4, 35378151]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[638]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[638]");
        org.junit.Assert.assertNotNull(linkedHashSetArray50);
        org.junit.Assert.assertNotNull(strSetArray51);
        org.junit.Assert.assertNotNull(strSetArray54);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(charSequenceArray78);
        org.junit.Assert.assertNotNull(charSequenceArray79);
        org.junit.Assert.assertNotNull(copticChronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(languageRangeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(languageRangeList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strSpliterator95);
    }
}

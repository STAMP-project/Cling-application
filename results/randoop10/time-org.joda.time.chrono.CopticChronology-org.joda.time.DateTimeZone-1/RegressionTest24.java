import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest24 {

    public static boolean debug = false;

    @Test
    public void test12001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12001");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder4.setExtension('u', "35026152");
        java.util.Locale.Builder builder13 = builder10.setExtension('a', "196");
        java.util.Locale.Builder builder15 = builder10.setLanguage("UTC");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.clear();
        java.util.Locale.Builder builder19 = builder18.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("1737-06-04T09:47:56.624+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1737-06-04T09:47:56.624+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test12002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12002");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.getID();
        boolean boolean5 = dateTimeZone2.isStandardOffset(10L);
        java.lang.String str7 = dateTimeZone2.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone2);
        java.lang.String str10 = dateTimeZone2.getNameKey((long) 113);
        boolean boolean11 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        java.lang.String str14 = dateTimeZone2.getShortName((long) 149733240);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
    }

    @Test
    public void test12003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12003");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology0.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test12004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12004");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField6 = copticChronology0.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test12005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12005");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField13 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573062180L + "'", long9 == 1644573062180L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test12006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12006");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.parse("976");
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsText(locale17);
        long long19 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfFloorCopy();
        java.lang.String str21 = property16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property16.getFieldType();
        org.joda.time.LocalDateTime.Property property23 = localDateTime10.property(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime4.withField(dateTimeFieldType22, 883);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "191" + "'", str18, "191");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[millisOfSecond]" + "'", str21, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test12007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12007");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusHours(760);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str7 = dateTimeZone6.toString();
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(1794735895504L, dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6, 655);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 655");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test12008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12008");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test12009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12009");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime22.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property38 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.minuteOfHour();
        int int40 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime22.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withSecondOfMinute(43);
        int[] intArray54 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime52, (long) 43);
        copticChronology18.validate((org.joda.time.ReadablePartial) localDateTime22, intArray54);
        org.joda.time.DurationField durationField56 = copticChronology18.centuries();
        org.joda.time.DurationField durationField57 = copticChronology18.hours();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.TimeZone timeZone64 = dateTimeZone61.toTimeZone();
        long long66 = dateTimeZone61.nextTransition((-1L));
        long long68 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone61);
        int[] intArray72 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime70, 1644572736021L);
        org.joda.time.DateTimeField dateTimeField73 = copticChronology18.dayOfYear();
        java.lang.String str74 = copticChronology18.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999031L) + "'", long68 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1738, 6, 9, 35136021]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CopticChronology[+120:00]" + "'", str74, "CopticChronology[+120:00]");
    }

    @Test
    public void test12010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12010");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("496");
        timeZone1.setRawOffset(812);
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean5 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 22);
        java.lang.String str11 = dateTimeZone7.getShortName(1644572624742L);
        long long13 = dateTimeZone7.convertUTCToLocal(1644572611311L);
        java.util.TimeZone timeZone14 = dateTimeZone7.toTimeZone();
        boolean boolean15 = timeZone1.hasSameRules(timeZone14);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644608611311L + "'", long13 == 1644608611311L);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test12011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12011");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        boolean boolean14 = dateTimeZone1.isStandardOffset(1644572616432L);
        int int16 = dateTimeZone1.getOffsetFromLocal((long) 6);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField21 = copticChronology20.hours();
        int int22 = copticChronology20.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.era();
        boolean boolean24 = strSet19.remove((java.lang.Object) copticChronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = copticChronology20.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        long long34 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 128);
        boolean boolean35 = dateTimeZone25.isFixed();
        long long37 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, 1644572652334L);
        java.util.Locale locale42 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        java.lang.String str43 = dateTimeZone25.getShortName(5431484682905L, locale42);
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.lang.String str47 = dateTimeZone25.getName((long) 492, locale45);
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale locale50 = java.util.Locale.getDefault(category48);
        java.lang.String str51 = locale45.getDisplayCountry(locale50);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.millisOfSecond();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = property57.getAsText(locale58);
        java.lang.String str60 = property57.getAsText();
        java.lang.String str61 = property57.toString();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        boolean boolean66 = locale65.hasExtensions();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category64, locale65);
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale69.getDisplayName(locale70);
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleKeys();
        java.lang.String str73 = locale70.getDisplayScript();
        java.lang.String str74 = locale70.getDisplayVariant();
        java.lang.String str75 = locale70.getDisplayScript();
        java.util.Locale.setDefault(category64, locale70);
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str78 = locale77.getDisplayCountry();
        java.lang.String str79 = locale70.getDisplayScript(locale77);
        java.lang.String str80 = locale63.getDisplayCountry(locale77);
        org.joda.time.LocalDateTime localDateTime81 = property57.setCopy("312", locale77);
        java.lang.String str82 = locale45.getDisplayLanguage(locale77);
        org.joda.time.chrono.CopticChronology copticChronology83 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str84 = copticChronology83.toString();
        org.joda.time.DurationField durationField85 = copticChronology83.weekyears();
        org.joda.time.DateTimeField dateTimeField86 = copticChronology83.yearOfEra();
        int int87 = copticChronology83.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField88 = copticChronology83.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField89 = copticChronology83.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField90 = copticChronology83.clockhourOfHalfday();
        boolean boolean91 = locale77.equals((java.lang.Object) dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 128L + "'", long34 == 128L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572652334L + "'", long37 == 1644572652334L);
        org.junit.Assert.assertEquals(locale42.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "China" + "'", str46, "China");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "China" + "'", str51, "China");
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "309" + "'", str59, "309");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "309" + "'", str60, "309");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Property[millisOfSecond]" + "'", str61, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "English (Canada)" + "'", str71, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Taiwan" + "'", str78, "Taiwan");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u4e2d\u6587" + "'", str82, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(copticChronology83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "CopticChronology[UTC]" + "'", str84, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12012");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology0.halfdays();
        int int6 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12013");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.era();
        org.joda.time.DurationField durationField7 = copticChronology0.days();
        org.joda.time.DurationField durationField8 = copticChronology0.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test12014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12014");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        boolean boolean11 = strSet7.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap12);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream14 = languageRangeList13.stream();
        boolean boolean15 = strSet6.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        boolean boolean20 = strSet16.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        java.lang.String[] strArray30 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        boolean boolean34 = strSet31.equals((java.lang.Object) locale33);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet31);
        java.util.Set<java.lang.String> strSet36 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        boolean boolean40 = strSet36.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38);
        java.util.Set<java.lang.String> strSet41 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet41);
        boolean boolean43 = strSet31.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38);
        java.lang.String[] strArray62 = new java.lang.String[] { "93", "171", "93", "93", "en", "160", "hi!", "Greenwich Mean Time", "449", "eng", "449", "527", "Chinese (China)", "en", "Chinese (China)", "en_CA", "+10:00", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "+10:00", "en" };
        java.lang.CharSequence[] charSequenceArray68 = strSet63.toArray(charSequenceArray67);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField70 = copticChronology69.hours();
        int int71 = copticChronology69.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology69.era();
        org.joda.time.DurationField durationField73 = copticChronology69.days();
        boolean boolean74 = strSet63.remove((java.lang.Object) copticChronology69);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet63);
        boolean boolean76 = strSet63.isEmpty();
        java.util.Locale.FilteringMode filteringMode77 = null;
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strSet63, filteringMode77);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertNotNull(charSequenceArray68);
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test12015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12015");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        int[] intArray13 = localDateTime12.getValues();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        int[] intArray46 = localDateTime45.getValues();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        int[] intArray57 = localDateTime56.getValues();
        copticChronology34.validate((org.joda.time.ReadablePartial) localDateTime48, intArray57);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime33, intArray57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 710, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withDayOfYear(81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withWeekOfWeekyear(242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 242 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1737, 6, 4, 35462461]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35462461]");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1737, 6, 4, 35462461]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1737, 6, 4, 35462461]");
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test12016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12016");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale4.getISO3Language();
        boolean boolean6 = copticChronology0.equals((java.lang.Object) locale4);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getISO3Language();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("709");
        java.lang.String str11 = locale10.getISO3Country();
        java.util.Locale locale14 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale10.getDisplayCountry(locale14);
        java.lang.String str17 = locale4.getDisplayScript(locale10);
        java.lang.String str18 = locale4.getLanguage();
        java.lang.String str19 = locale4.toLanguageTag();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('x', "709");
        java.util.Locale locale24 = builder23.build();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = property30.getAsText(locale31);
        java.lang.String str33 = locale24.getDisplayVariant(locale31);
        java.lang.String str34 = locale24.getDisplayCountry();
        java.lang.String str35 = locale4.getDisplayCountry(locale24);
        java.lang.String str36 = locale24.toLanguageTag();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jpn" + "'", str5, "jpn");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jpn" + "'", str8, "jpn");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale14.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ja" + "'", str18, "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "479" + "'", str32, "479");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "x-709" + "'", str36, "x-709");
    }

    @Test
    public void test12017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12017");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withHourOfDay(22);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours(760);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime13.toDateTime(dateTimeZone19);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str24 = copticChronology23.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = copticChronology23.add(readablePeriod25, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField29 = copticChronology23.halfdays();
        org.joda.time.DurationField durationField30 = copticChronology23.millis();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = copticChronology23.withZone(dateTimeZone32);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.millisOfSecond();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsText(locale40);
        long long42 = property39.remainder();
        org.joda.time.LocalDateTime localDateTime43 = property39.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime44 = property39.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime45 = property39.withMaximumValue();
        int[] intArray47 = copticChronology23.get((org.joda.time.ReadablePartial) localDateTime45, (long) 30);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray47);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CopticChronology[UTC]" + "'", str24, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "503" + "'", str41, "503");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1686, 4, 23, 30]");
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test12018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder4.setRegion("497");
        java.util.Locale.Builder builder11 = builder4.setRegion("840");
        java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("166");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12019");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("KR");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        int int8 = strSet7.size();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 575 + "'", int8 == 575);
    }

    @Test
    public void test12020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12020");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        long long10 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime6, (long) 100);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        boolean boolean15 = copticChronology1.equals((java.lang.Object) localDateTime14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(obj0, (org.joda.time.Chronology) copticChronology1);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644573062546L + "'", long10 == 1644573062546L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test12021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12021");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        int int20 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withYearOfCentury(802);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 802 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test12022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12022");
        java.util.Locale locale1 = new java.util.Locale("1738-06-04T00:44:27.284");
        java.lang.String str2 = locale1.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "1738-06-04t00:44:27.284");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test12023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12023");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        org.joda.time.DurationField durationField10 = copticChronology8.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        long long17 = copticChronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.DurationField durationField18 = copticChronology8.hours();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology8.year();
        boolean boolean21 = localDateTime7.equals((java.lang.Object) copticChronology8);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        boolean boolean48 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        boolean boolean69 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime68);
        int int70 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime58);
        int int71 = property27.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property27.getFieldType();
        org.joda.time.LocalDateTime.Property property73 = localDateTime7.property(dateTimeFieldType72);
        int int74 = property73.get();
        int int75 = property73.getMinimumValueOverall();
        org.joda.time.Interval interval76 = property73.toInterval();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644573062596L + "'", long17 == 1644573062596L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 596 + "'", int74 == 596);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test12024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12024");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.withYear(42);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfDay(875);
        int int26 = localDateTime23.getHourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
    }

    @Test
    public void test12025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12025");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        int int3 = property2.getMinimumValueOverall();
        java.lang.String str4 = property2.getAsString();
        org.joda.time.LocalDateTime localDateTime6 = property2.setCopy("972");
        org.joda.time.LocalDateTime localDateTime8 = property2.addToCopy((long) 392);
        org.joda.time.LocalDateTime localDateTime9 = property2.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localDateTime9.toString("1737-06-04T09:45:27.291+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-292275054) + "'", int3 == (-292275054));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "46" + "'", str4, "46");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test12026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12026");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("1738-06-04T09:50:26.675", (double) 5431484828685L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=5.431484828685E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12027");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        long long10 = dateTimeZone4.convertUTCToLocal(1644572641156L);
        long long12 = dateTimeZone4.previousTransition(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        long long16 = dateTimeZone4.convertLocalToUTC((long) 35235731, true);
        java.lang.String str18 = dateTimeZone4.getShortName(1644572840239L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644608641156L + "'", long10 == 1644608641156L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-764269L) + "'", long16 == (-764269L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
    }

    @Test
    public void test12028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12028");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        int int25 = localDateTime14.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35462682]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35462682]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test12029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12029");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField9 = copticChronology0.years();
        org.joda.time.DurationField durationField10 = copticChronology0.centuries();
        java.lang.String str11 = copticChronology0.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
    }

    @Test
    public void test12030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12030");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = property5.withMaximumValue();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        int[] intArray21 = localDateTime20.getValues();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime20.getFieldTypes();
        int int24 = localDateTime20.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.minusMinutes(35048859);
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.getLocalDateTime();
        long long36 = property34.remainder();
        int int37 = property34.getMinimumValueOverall();
        int int38 = property34.getLeapAmount();
        java.lang.String[] strArray48 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        boolean boolean52 = strSet49.equals((java.lang.Object) locale51);
        java.lang.String str53 = locale51.getLanguage();
        int int54 = property34.getMaximumTextLength(locale51);
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        boolean boolean57 = locale56.hasExtensions();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category55, locale56);
        java.util.Locale locale60 = locale56.stripExtensions();
        java.lang.String str61 = locale51.getDisplayVariant(locale56);
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusYears((int) (short) -1);
        int[] intArray70 = localDateTime69.getValues();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.hourOfDay();
        boolean boolean72 = property71.isLeap();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.hourOfDay();
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale76.getISO3Country();
        int int79 = property75.getMaximumTextLength(locale76);
        java.lang.String str80 = locale76.getISO3Language();
        int int81 = property71.getMaximumShortTextLength(locale76);
        java.lang.String str82 = locale51.getDisplayScript(locale76);
        java.lang.String str83 = locale76.getCountry();
        boolean boolean84 = property27.equals((java.lang.Object) locale76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime85 = property5.setCopy("1738-06-04T09:50:57.486", locale76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1738-06-04T09:50:57.486\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "761" + "'", str7, "761");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1737, 6, 4, 35462761]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1737, 6, 4, 35462762]");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "jpn" + "'", str80, "jpn");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test12031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12031");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        java.lang.String str8 = localDateTime2.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusYears(181);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withDayOfWeek(874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 874 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u82f1\u8a9e" + "'", str8, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test12032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12032");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDateTime2.toDateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str21 = copticChronology20.toString();
        org.joda.time.DurationField durationField22 = copticChronology20.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        long long29 = copticChronology20.set((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology20.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.withPeriodAdded(readablePeriod40, 723);
        long long44 = copticChronology20.set((org.joda.time.ReadablePartial) localDateTime42, (long) 999);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str46 = copticChronology45.toString();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = copticChronology45.add(readablePeriod47, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField51 = copticChronology45.halfdays();
        org.joda.time.DurationField durationField52 = copticChronology45.millis();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        long long56 = copticChronology45.add(readablePeriod53, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology59 = copticChronology45.withZone(dateTimeZone58);
        long long61 = dateTimeZone58.previousTransition((long) 103981);
        org.joda.time.DateTime dateTime62 = localDateTime42.toDateTime(dateTimeZone58);
        boolean boolean63 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime62.getZone();
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str66 = copticChronology65.toString();
        org.joda.time.DurationField durationField67 = copticChronology65.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        long long74 = copticChronology65.set((org.joda.time.ReadablePartial) localDateTime70, (long) 100);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.minusMinutes(10);
        int int77 = localDateTime76.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withPeriodAdded(readablePeriod78, 999);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plusYears((int) (byte) 1);
        org.joda.time.chrono.CopticChronology copticChronology85 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField86 = copticChronology85.dayOfYear();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology85);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property90 = localDateTime87.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property90.getFieldType();
        org.joda.time.LocalDateTime.Property property92 = localDateTime82.property(dateTimeFieldType91);
        boolean boolean93 = dateTime62.isSupported(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644573062808L + "'", long19 == 1644573062808L);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CopticChronology[UTC]" + "'", str21, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644573062808L + "'", long29 == 1644573062808L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1644572962808L + "'", long44 == 1644572962808L);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CopticChronology[UTC]" + "'", str46, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 35L + "'", long56 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 103981L + "'", long61 == 103981L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "CopticChronology[UTC]" + "'", str66, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1644573062808L + "'", long74 == 1644573062808L);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 38 + "'", int77 == 38);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(copticChronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test12033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12033");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        int int11 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusMinutes(35048859);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.weekOfWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.weekyear();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.getScript();
        java.lang.String str28 = locale25.getExtension('a');
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = locale25.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale25.getDisplayScript(locale32);
        org.joda.time.LocalDateTime localDateTime36 = property23.setCopy("103", locale32);
        int int37 = property14.getMaximumShortTextLength(locale32);
        java.lang.String str38 = locale32.getISO3Country();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder39.setExtension('x', "709");
        java.util.Locale.Builder builder43 = builder42.clear();
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder46 = builder43.setLocale(locale45);
        java.util.Locale.Builder builder48 = builder46.addUnicodeLocaleAttribute("813");
        java.util.Locale locale49 = builder46.build();
        java.lang.String str50 = locale49.getDisplayVariant();
        java.lang.String str51 = locale32.getDisplayName(locale49);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35462842]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str31, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English (Canada)" + "'", str34, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CAN" + "'", str38, "CAN");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (Canada)" + "'", str51, "English (Canada)");
    }

    @Test
    public void test12034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12034");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test12035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12035");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField5 = copticChronology0.years();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8);
        int[] intArray14 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime8, 473L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone16);
        int int22 = localDateTime21.getDayOfMonth();
        int int23 = localDateTime21.getDayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        boolean boolean47 = localDateTime41.isAfter((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime44.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        int int51 = localDateTime21.indexOf(dateTimeFieldType50);
        boolean boolean52 = localDateTime8.isSupported(dateTimeFieldType50);
        int int53 = localDateTime8.getMinuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1686, 4, 23, 473]");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 51 + "'", int53 == 51);
    }

    @Test
    public void test12036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12036");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573062942L + "'", long9 == 1644573062942L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test12037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12037");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("533");
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "811");
        java.util.Locale.Builder builder12 = builder8.clear();
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder14 = builder8.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.setRegion("947");
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Locale.Builder builder20 = builder15.setLocale(locale18);
        java.util.Locale locale21 = builder15.build();
        java.lang.String str22 = locale21.getVariant();
        java.util.Locale.Builder builder23 = builder3.setLocale(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder3.setLanguage("1738-06-04T09:45:02.611");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1738-06-04T09:45:02.611 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test12038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12038");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test12039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12039");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(35184997);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12040");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        timeZone1.setRawOffset((-1));
        timeZone1.setRawOffset(207);
        timeZone1.setID("654");
        boolean boolean8 = timeZone1.observesDaylightTime();
        timeZone1.setID("171");
        boolean boolean11 = timeZone1.observesDaylightTime();
        boolean boolean12 = timeZone1.observesDaylightTime();
        java.lang.Object obj13 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "sun.util.calendar.ZoneInfo[id=\"171\",offset=207,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "sun.util.calendar.ZoneInfo[id=\"171\",offset=207,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "sun.util.calendar.ZoneInfo[id=\"171\",offset=207,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test12041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12041");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(44);
        int int23 = dateTimeZone21.getOffsetFromLocal(1644572632040L);
        boolean boolean24 = localDateTime2.equals((java.lang.Object) dateTimeZone21);
        int int25 = localDateTime2.getMillisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 158400000 + "'", int23 == 158400000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test12042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12042");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "709");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder15 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder18 = builder12.setExtension('u', "35026152");
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = builder18.build();
        java.util.Locale.Builder builder21 = builder7.setLocale(locale20);
        java.util.Locale.Builder builder23 = builder7.setRegion("878");
        java.util.Locale locale25 = new java.util.Locale("CHN");
        java.util.Locale.Builder builder26 = builder7.setLocale(locale25);
        java.lang.String str27 = locale25.toLanguageTag();
        java.lang.Object obj28 = locale25.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals(locale25.toString(), "chn");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "chn" + "'", str27, "chn");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "chn");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "chn");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "chn");
    }

    @Test
    public void test12043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12043");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays(1738);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        int int33 = localDateTime31.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        boolean boolean60 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.hourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        boolean boolean81 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime80);
        int int82 = dateTime49.compareTo((org.joda.time.ReadableInstant) dateTime70);
        int int83 = property39.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property39.getFieldType();
        boolean boolean85 = localDateTime31.isSupported(dateTimeFieldType84);
        org.joda.time.LocalDateTime.Property property86 = localDateTime31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime88 = property86.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.minus(readablePeriod89);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime88.plusDays(49);
        int[] intArray94 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime88, 1644572619434L);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime88.withWeekyear(591);
        int[] intArray97 = localDateTime88.getValues();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 43 + "'", int33 == 43);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1738, 6, 4, 35019434]");
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(intArray97);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[1743, 3, 6, 35463043]");
    }

    @Test
    public void test12044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12044");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        boolean boolean40 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int63 = property19.compareTo((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean64 = strSet12.remove((java.lang.Object) property19);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        boolean boolean70 = strSet66.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet71);
        boolean boolean73 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream74 = languageRangeList68.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream75 = languageRangeList68.stream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(languageRangeStream74);
        org.junit.Assert.assertNotNull(languageRangeStream75);
    }

    @Test
    public void test12045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12045");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus(readablePeriod18);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths(3);
        int int23 = localDateTime19.getMillisOfSecond();
        int int24 = localDateTime19.getYearOfCentury();
        int int25 = localDateTime19.getDayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 157 + "'", int20 == 157);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 157 + "'", int23 == 157);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 38 + "'", int24 == 38);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
    }

    @Test
    public void test12046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12046");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfDay();
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = copticChronology0.set(readablePartial6, 1644572660027L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test12047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12047");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str11 = copticChronology10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology10.add(readablePeriod12, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField16 = copticChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology10.secondOfDay();
        boolean boolean19 = localDateTime9.equals((java.lang.Object) dateTimeField18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = property20.withMaximumValue();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        java.lang.String str35 = dateTimeZone31.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone31);
        int int37 = localDateTime36.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withDayOfWeek(6);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) (byte) 100);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone45);
        java.lang.String str48 = dateTimeZone45.getShortName(1136020407753600097L);
        org.joda.time.DateTime dateTime49 = localDateTime42.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        long long51 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime52 = property23.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "191" + "'", str7, "191");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 11 + "'", int37 == 11);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 805L + "'", long51 == 805L);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test12048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12048");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-7339421688533L));
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) (byte) 0);
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.Interval interval12 = property7.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property7.getFieldType();
        int int14 = localDateTime1.get(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 467 + "'", int14 == 467);
    }

    @Test
    public void test12049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12049");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears(160);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test12050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12050");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        java.lang.String[] strArray20 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        boolean boolean24 = strSet21.equals((java.lang.Object) locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = property10.getAsText(locale23);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = property10.getAsShortText(locale27);
        org.joda.time.LocalDateTime localDateTime31 = property10.setCopy(2);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfMonth();
        org.joda.time.DurationField durationField33 = property32.getDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "37" + "'", str26, "37");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "37" + "'", str29, "37");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test12051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12051");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        strSet10.clear();
        boolean boolean16 = strSet10.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet10.spliterator();
        boolean boolean19 = strSet10.add("638");
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        int[] intArray32 = localDateTime31.getValues();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        int[] intArray43 = localDateTime42.getValues();
        copticChronology20.validate((org.joda.time.ReadablePartial) localDateTime34, intArray43);
        boolean boolean45 = strSet10.equals((java.lang.Object) copticChronology20);
        java.util.Set<java.lang.String> strSet46 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        boolean boolean50 = strSet46.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, strMap51);
        boolean boolean53 = strSet10.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52);
        strSet10.clear();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1737, 6, 4, 35463285]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1737, 6, 4, 35463286]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test12052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12052");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone1.setID("");
        int int5 = timeZone1.getOffset(1644572624742L);
        int int7 = timeZone1.getOffset(1644572671424L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test12053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12053");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy(250);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(989);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.plus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime39.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime26.isSupported(dateTimeFieldType48);
        int int50 = localDateTime6.get(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime4.property(dateTimeFieldType48);
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        org.joda.time.LocalDateTime localDateTime53 = property51.roundHalfFloorCopy();
        int int54 = property51.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test12054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12054");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long5 = dateTimeZone1.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay((int) (byte) 100);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusMillis(0);
        boolean boolean27 = dateTimeZone1.isLocalDateTimeGap(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000000L + "'", long5 == 36000000L);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1738-06-04T00:00:00.100" + "'", str23, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12055");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology7.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        int[] intArray30 = localDateTime29.getValues();
        copticChronology7.validate((org.joda.time.ReadablePartial) localDateTime21, intArray30);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.DateTimeField dateTimeField43 = copticChronology40.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        int[] intArray52 = localDateTime51.getValues();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusYears((int) (short) -1);
        int[] intArray63 = localDateTime62.getValues();
        copticChronology40.validate((org.joda.time.ReadablePartial) localDateTime54, intArray63);
        copticChronology7.validate((org.joda.time.ReadablePartial) localDateTime39, intArray63);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.DurationField durationField67 = copticChronology7.months();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology7.weekOfWeekyear();
        long long72 = copticChronology7.add(1644572745363L, (long) 1, 104);
        org.joda.time.DurationField durationField73 = copticChronology7.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(721, 923, 207, 561, 321, 461, 290, (org.joda.time.Chronology) copticChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 561 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1737, 6, 4, 35463420]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1737, 6, 4, 35463420]");
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1737, 6, 4, 35463420]");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1737, 6, 4, 35463420]");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1644572745467L + "'", long72 == 1644572745467L);
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test12056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12056");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(36000000);
        int int14 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMonths(12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(947);
        int int19 = localDateTime18.getYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "458" + "'", str7, "458");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1736 + "'", int14 == 1736);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 947 + "'", int19 == 947);
    }

    @Test
    public void test12057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12057");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.DurationField durationField20 = copticChronology18.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        long long27 = copticChronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology18.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        boolean boolean32 = copticChronology18.equals((java.lang.Object) localDateTime31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str52 = dateTimeZone51.getID();
        boolean boolean54 = dateTimeZone51.isStandardOffset(10L);
        java.util.TimeZone timeZone55 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime56 = localDateTime48.toDateTime(dateTimeZone51);
        int[] intArray58 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime48, 0L);
        java.lang.String str59 = copticChronology18.toString();
        org.joda.time.DateTimeZone dateTimeZone60 = copticChronology18.getZone();
        org.joda.time.Chronology chronology61 = copticChronology0.withZone(dateTimeZone60);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644573063476L + "'", long27 == 1644573063476L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1686, 4, 23, 0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CopticChronology[UTC]" + "'", str59, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test12058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12058");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField12 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfCentury();
        int int26 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusYears(700);
        int int29 = localDateTime28.size();
        int[] intArray31 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime28, (long) 586);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.year();
        org.joda.time.LocalDateTime localDateTime37 = property35.addWrapFieldToCopy(250);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusMinutes(989);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime62.withFields((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime72.plus(readablePeriod78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime72.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property80.getFieldType();
        boolean boolean82 = localDateTime59.isSupported(dateTimeFieldType81);
        int int83 = localDateTime39.get(dateTimeFieldType81);
        org.joda.time.LocalDateTime.Property property84 = localDateTime37.property(dateTimeFieldType81);
        org.joda.time.LocalDateTime localDateTime85 = property84.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology86 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField87 = copticChronology86.dayOfYear();
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology86);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property91 = localDateTime88.hourOfDay();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime88.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property94 = localDateTime93.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property94.getFieldType();
        org.joda.time.LocalDateTime.Property property96 = localDateTime85.property(dateTimeFieldType95);
        long long98 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime85, (long) 836);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573063565L + "'", long9 == 1644573063565L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1686, 4, 23, 586]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(copticChronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-43874697600000L) + "'", long98 == (-43874697600000L));
    }

    @Test
    public void test12059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12059");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfCeilingCopy();
        int int11 = localDateTime10.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths(250);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withYearOfEra(6);
        int int16 = localDateTime10.getMillisOfSecond();
        int int17 = localDateTime10.getHourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "627" + "'", str7, "627");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 627 + "'", int16 == 627);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
    }

    @Test
    public void test12060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12060");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        java.util.Locale locale13 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str14 = locale8.getDisplayName(locale13);
        java.lang.String str15 = locale13.getScript();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.String str18 = locale13.getDisplayName();
        java.lang.String str19 = locale13.getDisplayLanguage();
        java.util.Locale locale21 = new java.util.Locale("Greenwich Mean Time");
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getDisplayScript();
        java.lang.String str27 = locale23.getDisplayVariant();
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.lang.String str29 = locale23.getDisplayScript(locale28);
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale21.getDisplayLanguage(locale28);
        java.lang.String str32 = locale21.getVariant();
        java.util.Set<java.lang.String> strSet33 = locale21.getUnicodeLocaleKeys();
        java.lang.String str34 = locale13.getDisplayName(locale21);
        java.lang.String str35 = locale13.getVariant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "647" + "'", str7, "647");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "539" + "'", str17, "539");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str18, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1738-06-04t09:43:28.618" + "'", str19, "1738-06-04t09:43:28.618");
        org.junit.Assert.assertEquals(locale21.toString(), "greenwich mean time");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "greenwich mean time" + "'", str31, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str34, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test12061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12061");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology0.halfdays();
        int int6 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test12062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12062");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekyear(335);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withDurationAdded(readableDuration26, 182);
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test12063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12063");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.lang.String str4 = locale1.getDisplayScript();
        java.lang.String str5 = locale1.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet6 = locale1.getExtensionKeys();
        java.util.Locale locale7 = locale1.stripExtensions();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime10.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime10.getFieldTypes();
        int int25 = localDateTime10.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.hourOfDay();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale30.getISO3Country();
        int int33 = property29.getMaximumTextLength(locale30);
        java.lang.String str34 = localDateTime10.toString("293", locale30);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale30.getDisplayScript(locale35);
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale7.getDisplayScript(locale39);
        java.lang.Object obj41 = locale39.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "293" + "'", str34, "293");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "it_IT");
    }

    @Test
    public void test12064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12064");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str14 = copticChronology13.toString();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withSecondOfMinute(43);
        int[] intArray29 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime27, (long) 43);
        copticChronology13.validate((org.joda.time.ReadablePartial) localDateTime17, intArray29);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray29);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.minusMonths((int) (byte) 0);
        int int43 = localDateTime42.size();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.era();
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.era();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        java.util.TimeZone timeZone50 = dateTimeZone47.toTimeZone();
        java.util.TimeZone timeZone51 = dateTimeZone47.toTimeZone();
        int int53 = dateTimeZone47.getOffset((-6108584L));
        java.lang.String str54 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime55 = localDateTime42.toDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime42.withWeekyear((int) 'a');
        int int58 = localDateTime42.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime42.plusMinutes((int) (byte) -1);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str62 = copticChronology61.toString();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        long long66 = copticChronology61.add(readablePeriod63, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField67 = copticChronology61.halfdays();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology61.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology61.year();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology61.minuteOfHour();
        org.joda.time.DurationField durationField71 = copticChronology61.minutes();
        java.lang.String str72 = copticChronology61.toString();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology61.year();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField75 = copticChronology61.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology76 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology76.dayOfYear();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.hourOfDay();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.plusMinutes(35048859);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.plusMonths(42);
        int[] intArray94 = copticChronology61.get((org.joda.time.ReadablePartial) localDateTime92, 1644573035045L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime60, intArray94);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:00" + "'", str48, "+10:00");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 36000000 + "'", int53 == 36000000);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 18 + "'", int58 == 18);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "CopticChronology[UTC]" + "'", str62, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "CopticChronology[UTC]" + "'", str72, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(copticChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1738, 6, 4, 35435045]");
    }

    @Test
    public void test12065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12065");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale7.getDisplayVariant(locale9);
        java.util.Locale locale14 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str15 = locale9.getDisplayName(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getDisplayName();
        java.lang.String str20 = nameProvider0.getName(locale14, "917", "965");
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.lang.String str27 = locale24.getDisplayScript();
        java.lang.String str28 = locale21.getDisplayVariant(locale24);
        java.util.Locale locale30 = new java.util.Locale("1737-06-04T09:44:05.259+10:00");
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder31.setExtension('x', "811");
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String str39 = locale36.getDisplayScript();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.lang.String str41 = locale36.getDisplayScript();
        java.util.Locale.Builder builder42 = builder34.setLocale(locale36);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale43.getScript();
        java.lang.String str45 = locale43.getISO3Country();
        boolean boolean46 = locale43.hasExtensions();
        java.util.Locale.Builder builder47 = builder34.setLocale(locale43);
        java.lang.String str48 = locale30.getDisplayVariant(locale43);
        java.lang.String str49 = locale21.getDisplayVariant(locale43);
        java.lang.String str50 = locale21.getDisplayName();
        java.lang.String str53 = nameProvider0.getName(locale21, "KR", "gmt");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "801" + "'", str8, "801");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale14.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str17, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale30.toString(), "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English (Canada)" + "'", str37, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "KOR" + "'", str45, "KOR");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English" + "'", str50, "English");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test12066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12066");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String str4 = nameProvider0.getName(locale1, "fr", "572");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        int[] intArray14 = localDateTime13.getValues();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime13.getFieldTypes();
        int int17 = localDateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime18 = localDateTime13.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = property24.roundHalfCeilingCopy();
        org.joda.time.Interval interval29 = property24.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = property35.getAsText(locale36);
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale43 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str44 = locale38.getDisplayName(locale43);
        java.lang.String str45 = locale43.getScript();
        java.lang.String str46 = locale43.getDisplayName();
        java.lang.String str47 = locale43.getDisplayLanguage();
        java.lang.String str48 = property24.getAsText(locale43);
        boolean boolean49 = locale43.hasExtensions();
        boolean boolean50 = dateTime18.equals((java.lang.Object) locale43);
        java.lang.String str51 = locale43.getCountry();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean55 = dateTimeZone53.isStandardOffset((long) 22);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = dateTimeZone53.getName(1644572630789L, locale57);
        boolean boolean60 = locale57.hasExtensions();
        java.util.Locale locale63 = new java.util.Locale("35150933", "369");
        java.lang.String str64 = locale57.getDisplayName(locale63);
        java.lang.String str65 = locale43.getDisplayCountry(locale57);
        java.lang.String str68 = nameProvider0.getShortName(locale57, "Property[secondOfMinute]", "1737-06-04T09:44:47.119+10:00");
        java.lang.Object obj69 = locale57.clone();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1737, 6, 4, 35463850]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "850" + "'", str37, "850");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale43.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (China)" + "'", str44, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str46, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1738-06-04t09:43:28.618" + "'", str47, "1738-06-04t09:43:28.618");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "850" + "'", str48, "850");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "539" + "'", str51, "539");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "German (Germany)" + "'", str58, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals(locale63.toString(), "35150933_369");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "German (Germany)" + "'", str64, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "539" + "'", str65, "539");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "de_DE");
    }

    @Test
    public void test12067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12067");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.minusMillis(734);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withMillisOfSecond(359);
        int int72 = localDateTime69.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusMonths(250);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withMillisOfDay(35150906);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusWeeks(775);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.minusYears(700);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 928 + "'", int8 == 928);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 194 + "'", int72 == 194);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test12068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12068");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder5 = builder0.setLanguage("AM");
        java.util.Locale.Builder builder7 = builder0.setRegion("276");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setLanguage("1838-06-04T09:50:16.476");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1838-06-04T09:50:16.476 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test12069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12069");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.year();
        org.joda.time.DurationField durationField9 = copticChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int17 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDayOfWeek(6);
        int int20 = localDateTime19.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths(4);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str32 = copticChronology31.toString();
        org.joda.time.DurationField durationField33 = copticChronology31.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        long long40 = copticChronology31.set((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.DurationField durationField41 = copticChronology31.hours();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology31.year();
        boolean boolean44 = localDateTime30.equals((java.lang.Object) copticChronology31);
        long long50 = copticChronology31.getDateTimeMillis((long) '4', 22, 44, 4, 710);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMonths(103981);
        int[] intArray70 = copticChronology31.get((org.joda.time.ReadablePartial) localDateTime66, 1644572630964L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime19, intArray70);
        org.joda.time.DateTimeField dateTimeField72 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField73 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CopticChronology[UTC]" + "'", str32, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644573064031L + "'", long40 == 1644573064031L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 81844710L + "'", long50 == 81844710L);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1738, 6, 4, 35030964]");
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test12070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12070");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusYears(150);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12071");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("496");
        boolean boolean2 = timeZone1.observesDaylightTime();
        int int4 = timeZone1.getOffset(1644572804228L);
        java.util.Locale locale9 = new java.util.Locale("1737-06-03T23:43:36.994Z", "German (Germany)");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = timeZone1.getDisplayName(false, 538, locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 538");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
    }

    @Test
    public void test12072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12072");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.era();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str17 = locale12.getDisplayName(locale16);
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale21 = locale19.stripExtensions();
        java.util.Locale.setDefault(category11, locale19);
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale27.getDisplayScript();
        java.lang.String str31 = locale24.getDisplayVariant(locale27);
        java.lang.String str32 = locale23.getDisplayVariant(locale27);
        java.util.Locale.setDefault(category11, locale27);
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = nameProvider34.getName(locale36, "38", "493");
        java.util.Locale.setDefault(category11, locale36);
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale36.getDisplayScript(locale41);
        int int43 = property10.getMaximumShortTextLength(locale36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = property10.setCopy("1737-06-04T09:45:34.531+00:00:00.207");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1737-06-04T09:45:34.531+00:00:00.207\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (China)" + "'", str17, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test12073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12073");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = dateTimeZone1.getShortName((long) 14, locale6);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsText(locale14);
        org.joda.time.Interval interval16 = property13.toInterval();
        org.joda.time.LocalDateTime localDateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(10);
        int int20 = localDateTime19.getEra();
        boolean boolean21 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str24 = dateTimeZone1.getShortName(1644536655810L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "144" + "'", str15, "144");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
    }

    @Test
    public void test12074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12074");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = copticChronology0.hours();
        org.joda.time.DurationField durationField16 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573064162L + "'", long9 == 1644573064162L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test12075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12075");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int) '#');
        boolean boolean28 = dateTimeZone17.isLocalDateTimeGap(localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone17);
        long long31 = dateTimeZone17.previousTransition(1644572610881L);
        long long34 = dateTimeZone17.convertLocalToUTC((long) (short) 1, true);
        org.joda.time.Chronology chronology35 = copticChronology0.withZone(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = copticChronology0.getDateTimeMillis((long) 664, 781, 231, 636, 859);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 781 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572610881L + "'", long31 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-35999999L) + "'", long34 == (-35999999L));
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test12076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12076");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.lang.String str6 = timeZone5.getID();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.TimeZone.setDefault(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean14 = timeZone5.hasSameRules(timeZone8);
        java.time.ZoneId zoneId15 = timeZone8.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone(zoneId15);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = timeZone17.getOffset(830, 22, 35121611, 494, 261, 671);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT+10:00" + "'", str6, "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test12077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12077");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField3 = copticChronology0.days();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test12078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12078");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        long long13 = copticChronology8.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone14 = copticChronology8.getZone();
        long long18 = dateTimeZone14.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 292272708, dateTimeZone14);
        org.joda.time.Chronology chronology20 = copticChronology0.withZone(dateTimeZone14);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str22 = copticChronology21.toString();
        org.joda.time.DurationField durationField23 = copticChronology21.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        long long30 = copticChronology21.set((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology21.clockhourOfHalfday();
        java.lang.String str35 = copticChronology21.toString();
        org.joda.time.DurationField durationField36 = copticChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology21.hourOfDay();
        org.joda.time.DurationField durationField39 = copticChronology21.days();
        org.joda.time.DurationField durationField40 = copticChronology21.months();
        org.joda.time.DurationField durationField41 = copticChronology21.weeks();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str47 = dateTimeZone43.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone43);
        boolean boolean49 = dateTimeZone43.isFixed();
        org.joda.time.Chronology chronology50 = copticChronology21.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology51 = copticChronology0.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField52 = copticChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1136091124375922418L + "'", long13 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CopticChronology[UTC]" + "'", str22, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644573064222L + "'", long30 == 1644573064222L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CopticChronology[UTC]" + "'", str35, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test12079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12079");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.parse("627");
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = localDateTime14.getMinuteOfHour();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str33 = copticChronology32.toString();
        org.joda.time.DurationField durationField34 = copticChronology32.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        long long41 = copticChronology32.set((org.joda.time.ReadablePartial) localDateTime37, (long) 100);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology32.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plus(readablePeriod48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.withPeriodAdded(readablePeriod52, 723);
        long long56 = copticChronology32.set((org.joda.time.ReadablePartial) localDateTime54, (long) 999);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str58 = copticChronology57.toString();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = copticChronology57.add(readablePeriod59, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField63 = copticChronology57.halfdays();
        org.joda.time.DurationField durationField64 = copticChronology57.millis();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        long long68 = copticChronology57.add(readablePeriod65, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology71 = copticChronology57.withZone(dateTimeZone70);
        long long73 = dateTimeZone70.previousTransition((long) 103981);
        org.joda.time.DateTime dateTime74 = localDateTime54.toDateTime(dateTimeZone70);
        boolean boolean75 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        int int77 = property7.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime76.getZone();
        java.lang.String str79 = dateTime76.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 366 + "'", int8 == 366);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 51 + "'", int26 == 51);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644573064249L + "'", long31 == 1644573064249L);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CopticChronology[UTC]" + "'", str33, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644573064249L + "'", long41 == 1644573064249L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1644572964249L + "'", long56 == 1644572964249L);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CopticChronology[UTC]" + "'", str58, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 35L + "'", long68 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 103981L + "'", long73 == 103981L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0627-01-01T00:00:00.000Z" + "'", str79, "0627-01-01T00:00:00.000Z");
    }

    @Test
    public void test12080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12080");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime63 = property61.getLocalDateTime();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 291 + "'", int8 == 291);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test12081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12081");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology0.add(readablePeriod7, 1644608611311L, 37);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644608611311L + "'", long10 == 1644608611311L);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test12082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12082");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = copticChronology0.add(readablePeriod6, 1644572640069L, 575);
        org.joda.time.DurationField durationField10 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572640069L + "'", long9 == 1644572640069L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test12083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12083");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getNameKey((long) 61);
        java.lang.String str10 = dateTimeZone1.getNameKey((-242200881249885L));
        int int12 = dateTimeZone1.getStandardOffset((long) 232);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
    }

    @Test
    public void test12084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12084");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        long long8 = dateTimeZone1.adjustOffset((long) (-1), false);
        long long11 = dateTimeZone1.convertLocalToUTC(1644572957130L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644536957130L + "'", long11 == 1644536957130L);
    }

    @Test
    public void test12085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12085");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        timeZone1.setRawOffset((-1));
        timeZone1.setRawOffset(207);
        timeZone1.setID("654");
        java.util.TimeZone.setDefault(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = timeZone1.getOffset(35241205, (int) 'u', 38, 907, 710, 487);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test12086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12086");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) 100);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        int int9 = property5.getMaximumShortTextLength(locale8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime12.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property28 = localDateTime12.millisOfDay();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = property28.getAsShortText(locale29);
        java.lang.String str33 = locale29.getDisplayVariant();
        java.lang.String str34 = property5.getAsShortText(locale29);
        boolean boolean35 = property5.isLeap();
        int int36 = property5.getMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English (Canada)" + "'", str31, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "35464414" + "'", str32, "35464414");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "414" + "'", str34, "414");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test12087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12087");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str10 = localDateTime2.toString("93", locale9);
        org.joda.time.Chronology chronology11 = localDateTime2.getChronology();
        int int12 = localDateTime2.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withDayOfYear(562);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 562 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "93" + "'", str10, "93");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
    }

    @Test
    public void test12088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12088");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("1738-06-04T09:48:37.862", (double) 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=39.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12089");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.plus(readablePeriod21);
        int[] intArray23 = localDateTime2.getValues();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime2.plusMinutes(1816);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis(35223403);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1738, 6, 4, 35464472]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test12090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0, 175);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 175");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12091");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        java.lang.String str21 = property19.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 499 + "'", int18 == 499);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
    }

    @Test
    public void test12092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12092");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(416);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        java.lang.String str11 = localDateTime7.toString("760");
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusSeconds(934);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(35461161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "760" + "'", str11, "760");
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test12093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12093");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573064537L + "'", long9 == 1644573064537L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12094");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str8 = copticChronology7.toString();
        org.joda.time.DurationField durationField9 = copticChronology7.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        long long16 = copticChronology7.set((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.DurationField durationField17 = copticChronology7.hours();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology7.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) 'x');
        long long38 = copticChronology7.set((org.joda.time.ReadablePartial) localDateTime36, (long) 1);
        org.joda.time.DateTimeField dateTimeField39 = copticChronology7.halfdayOfDay();
        org.joda.time.DurationField durationField40 = copticChronology7.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(35187164, (-2667), 69, 35151479, 2512354, 60, 1772, (org.joda.time.Chronology) copticChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35151479 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644573064553L + "'", long16 == 1644573064553L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 5431485064553L + "'", long38 == 5431485064553L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test12095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12095");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(102);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusDays(375);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        int int24 = property23.get();
        int int25 = property23.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = property23.setCopy(964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 964 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test12096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12096");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(102);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusDays(375);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        int int24 = property23.get();
        int int25 = property23.getMinimumValueOverall();
        java.lang.String str26 = property23.getName();
        java.lang.String str27 = property23.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfHour" + "'", str26, "minuteOfHour");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
    }

    @Test
    public void test12097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12097");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        int int8 = localDateTime6.getDayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(1738);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        int int17 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.minus(readableDuration18);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays(1738);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfYear();
        int int28 = localDateTime26.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        boolean boolean55 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        org.joda.time.chrono.CopticChronology copticChronology66 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.hourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDateTime73.toDateTime(readableInstant74);
        boolean boolean76 = dateTime65.isEqual((org.joda.time.ReadableInstant) dateTime75);
        int int77 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime65);
        int int78 = property34.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property34.getFieldType();
        boolean boolean80 = localDateTime26.isSupported(dateTimeFieldType79);
        boolean boolean81 = localDateTime19.isSupported(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 673 + "'", int28 == 673);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(copticChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test12098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12098");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 800, (org.joda.time.Chronology) copticChronology4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology4.year();
        org.joda.time.DurationField durationField8 = copticChronology4.centuries();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime11.getFieldTypes();
        int int26 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.hourOfDay();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getISO3Country();
        int int34 = property30.getMaximumTextLength(locale31);
        java.lang.String str35 = localDateTime11.toString("293", locale31);
        int int36 = localDateTime11.getYearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str38 = copticChronology37.toString();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = copticChronology37.add(readablePeriod39, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField43 = copticChronology37.halfdays();
        org.joda.time.DurationField durationField44 = copticChronology37.millis();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = copticChronology37.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology37.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone49 = copticChronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        java.lang.String str55 = dateTimeZone51.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone51);
        boolean boolean57 = dateTimeZone51.isFixed();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.Chronology chronology59 = copticChronology37.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime60 = localDateTime11.toDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime11.plusWeeks(662);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime11.minus(readableDuration63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        long long68 = copticChronology4.set((org.joda.time.ReadablePartial) localDateTime66, 0L);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "293" + "'", str35, "293");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1738 + "'", int36 == 1738);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CopticChronology[UTC]" + "'", str38, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:00" + "'", str55, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1644573064752L + "'", long68 == 1644573064752L);
    }

    @Test
    public void test12099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12099");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone1.setID("");
        int int4 = timeZone1.getRawOffset();
        timeZone1.setID("572");
        int int7 = timeZone1.getRawOffset();
        boolean boolean8 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(210);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12100");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy("4");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay((int) '#');
        boolean boolean36 = dateTimeZone25.isLocalDateTimeGap(localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone25);
        long long39 = dateTimeZone25.previousTransition(1644572610881L);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(1644572637142L, dateTimeZone25);
        org.joda.time.DateTime dateTime41 = localDateTime22.toDateTime(dateTimeZone25);
        long long43 = dateTimeZone25.nextTransition(1644572852163L);
        long long45 = dateTimeZone25.nextTransition(5431484869197L);
        int int47 = dateTimeZone25.getOffsetFromLocal(3780000L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 806 + "'", int18 == 806);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1644572610881L + "'", long39 == 1644572610881L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644572852163L + "'", long43 == 1644572852163L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 5431484869197L + "'", long45 == 5431484869197L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36000000 + "'", int47 == 36000000);
    }

    @Test
    public void test12101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12101");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = copticChronology0.getDateTimeMillis((-35999612L), 956, 286, 62, 35156908);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 956 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test12102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12102");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusDays(4);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property11.getLocalDateTime();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35464842]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30 + "'", int12 == 30);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test12103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12103");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withCenturyOfEra((int) (short) 1);
        int int19 = localDateTime18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test12104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12104");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readableDuration3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        java.lang.String str8 = property7.toString();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy("263");
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[millisOfSecond]" + "'", str8, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test12105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12105");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str7 = copticChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology6.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withSecondOfMinute(43);
        int[] intArray17 = copticChronology6.get((org.joda.time.ReadablePartial) localDateTime15, (long) 43);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime5, intArray17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone20);
        org.joda.time.Chronology chronology24 = copticChronology1.withZone(dateTimeZone20);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime27.getFieldTypes();
        long long43 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime27, (long) 0);
        long long45 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime27, (-35999999L));
        org.joda.time.DurationField durationField46 = copticChronology0.seconds();
        java.lang.String str47 = copticChronology0.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[UTC]" + "'", str7, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644573064942L + "'", long43 == 1644573064942L);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644573064942L + "'", long45 == 1644573064942L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CopticChronology[UTC]" + "'", str47, "CopticChronology[UTC]");
    }

    @Test
    public void test12106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12106");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644536719784L);
    }

    @Test
    public void test12107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12107");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.months();
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12108");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = copticChronology0.add(readablePeriod14, (-7339421632501L), 711);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573064985L + "'", long9 == 1644573064985L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-7339421632501L) + "'", long17 == (-7339421632501L));
    }

    @Test
    public void test12109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12109");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        boolean boolean7 = property5.isLeap();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsText(locale8);
        org.joda.time.LocalDateTime localDateTime10 = property5.withMinimumValue();
        int int11 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime13 = property5.addToCopy(1644572685466L);
        int int14 = localDateTime13.getWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9" + "'", str9, "9");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187609847 + "'", int14 == 187609847);
    }

    @Test
    public void test12110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12110");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology33.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        int[] intArray45 = localDateTime44.getValues();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        int[] intArray56 = localDateTime55.getValues();
        copticChronology33.validate((org.joda.time.ReadablePartial) localDateTime47, intArray56);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime32, intArray56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField60 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology0.weekOfWeekyear();
        long long65 = copticChronology0.add(1644572745363L, (long) 1, 104);
        org.joda.time.DurationField durationField66 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35465012]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35465012]");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1737, 6, 4, 35465012]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1737, 6, 4, 35465012]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644572745467L + "'", long65 == 1644572745467L);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test12111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12111");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime29.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime29.plus(readablePeriod45);
        int int47 = localDateTime46.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.yearOfEra();
        boolean boolean49 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        int[] intArray50 = localDateTime46.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime10, intArray50);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField53 = copticChronology52.halfdays();
        org.joda.time.DurationField durationField54 = copticChronology52.minutes();
        org.joda.time.Chronology chronology55 = copticChronology52.withUTC();
        org.joda.time.DurationField durationField56 = copticChronology52.centuries();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology52.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = copticChronology52.add(readablePeriod58, 1644572640069L, 575);
        org.joda.time.DurationField durationField62 = copticChronology52.seconds();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology52.millisOfSecond();
        boolean boolean64 = localDateTime10.equals((java.lang.Object) copticChronology52);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        java.lang.String str70 = dateTimeZone66.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(dateTimeZone66);
        int int72 = localDateTime71.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(5);
        int int75 = localDateTime74.getHourOfDay();
        boolean boolean76 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.plus(readableDuration77);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = localDateTime78.getValue(321);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 321");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 41 + "'", int47 == 41);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1738, 6, 4, 35465041]");
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1644572640069L + "'", long61 == 1644572640069L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 11 + "'", int72 == 11);
        org.junit.Assert.assertNotNull(localDateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 19 + "'", int75 == 19);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test12112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12112");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField12 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.joda.time.DurationField durationField16 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573065063L + "'", long9 == 1644573065063L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test12113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12113");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) 100);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        int int9 = property5.getMaximumShortTextLength(locale8);
        int int10 = property5.getMinimumValueOverall();
        java.lang.String str11 = property5.toString();
        java.lang.Object obj12 = null;
        boolean boolean13 = property5.equals(obj12);
        boolean boolean14 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime16 = property5.addWrapFieldToCopy(538);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[millisOfSecond]" + "'", str11, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12114");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime4 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.roundCeilingCopy();
        boolean boolean6 = property2.isLeap();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.util.Locale.setDefault(locale7);
        java.util.Set<java.lang.Character> charSet11 = locale7.getExtensionKeys();
        java.util.Locale.setDefault(locale7);
        java.lang.String str13 = property2.getAsShortText(locale7);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English (Canada)" + "'", str9, "English (Canada)");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "46" + "'", str13, "46");
    }

    @Test
    public void test12115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12115");
        java.util.Locale locale3 = new java.util.Locale("China", "817", "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str5 = copticChronology4.toString();
        org.joda.time.DurationField durationField6 = copticChronology4.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        long long13 = copticChronology4.set((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DurationField durationField14 = copticChronology4.hours();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology4.secondOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        boolean boolean18 = copticChronology4.equals((java.lang.Object) locale17);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsText(locale25);
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale25.getDisplayVariant(locale27);
        java.util.Locale locale32 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str33 = locale27.getDisplayName(locale32);
        java.lang.String str34 = locale17.getDisplayName(locale27);
        java.lang.String str35 = locale3.getDisplayLanguage(locale17);
        java.lang.String str36 = locale17.getDisplayCountry();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CopticChronology[UTC]" + "'", str5, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644573065109L + "'", long13 == 1644573065109L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "109" + "'", str26, "109");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale32.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "china" + "'", str35, "china");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test12116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12116");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(579, 807);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 807");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12117");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale9.getDisplayCountry(locale12);
        java.lang.String str14 = locale6.getDisplayName(locale9);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        int int19 = property17.getMaximumValueOverall();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.TimeZone.setDefault(timeZone21);
        java.time.ZoneId zoneId26 = timeZone21.toZoneId();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone(zoneId26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone(zoneId26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder32.setExtension('x', "811");
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.lang.String str40 = locale37.getDisplayScript();
        java.lang.String str41 = locale37.getDisplayVariant();
        java.lang.String str42 = locale37.getDisplayScript();
        java.util.Locale.Builder builder43 = builder35.setLocale(locale37);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfSecond();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = property49.getAsText(locale50);
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale50.getDisplayLanguage(locale52);
        java.util.Locale.Builder builder55 = builder35.setLocale(locale52);
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("528");
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale59.getCountry();
        java.util.Locale.Builder builder62 = builder58.setLocale(locale59);
        java.lang.String str63 = dateTimeZone29.getShortName((long) 368, locale59);
        java.lang.String str64 = property17.getAsShortText(locale59);
        java.lang.String str65 = locale6.getDisplayScript(locale59);
        java.lang.String str66 = locale6.getDisplayLanguage();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "173" + "'", str7, "173");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English" + "'", str14, "English");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English (Canada)" + "'", str38, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "173" + "'", str51, "173");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u82f1\u8a9e" + "'", str54, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CN" + "'", str61, "CN");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "46" + "'", str64, "46");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English" + "'", str66, "English");
    }

    @Test
    public void test12118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12118");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = copticChronology0.getDateTimeMillis((long) 279, 723, 883, 747, 828);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 723 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test12119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12119");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1738-06-04T09:43:55.176");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(113);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusYears(884);
        boolean boolean19 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusMinutes(935);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.minusMinutes(617);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFieldAdded(durationFieldType25, 821);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test12120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12120");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.Chronology chronology9 = copticChronology1.withZone(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone5.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(13254255130L, dateTimeZone5);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        timeZone14.setRawOffset(154);
        int int20 = timeZone14.getRawOffset();
        boolean boolean21 = timeZone14.observesDaylightTime();
        int int22 = timeZone14.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        boolean boolean24 = timeZone14.observesDaylightTime();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone26.setID("");
        int int29 = timeZone26.getRawOffset();
        timeZone26.setID("572");
        boolean boolean32 = timeZone14.hasSameRules(timeZone26);
        boolean boolean33 = dateTimeZone5.equals((java.lang.Object) timeZone14);
        boolean boolean34 = timeZone14.observesDaylightTime();
        boolean boolean35 = timeZone14.useDaylightTime();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 154 + "'", int20 == 154);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 154 + "'", int22 == 154);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test12121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12121");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.withYear(42);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra(376);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        int int27 = property25.getMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "37542-06-04T09:51:05.305" + "'", str24, "37542-06-04T09:51:05.305");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test12122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12122");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy((int) (byte) 0);
        boolean boolean19 = property9.equals((java.lang.Object) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(112);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths((int) '4');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond(893);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35465340]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test12123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12123");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1738);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        int int20 = localDateTime18.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        boolean boolean68 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int70 = property26.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property26.getFieldType();
        boolean boolean72 = localDateTime18.isSupported(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = property73.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readablePeriod76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.minus(readablePeriod78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.plusSeconds(701);
        int[] intArray83 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime75, 5431484729681L);
        org.joda.time.DateTimeField dateTimeField84 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField86 = copticChronology0.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 355 + "'", int20 == 355);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1858, 6, 4, 35129681]");
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test12124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12124");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField10 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test12125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12125");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = copticChronology0.getDateTimeMillis(810, 271, 570, 257);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 271 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12126");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573065431L + "'", long9 == 1644573065431L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test12127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12127");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("fra");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("106");
        timeZone3.setRawOffset((-1));
        timeZone3.setRawOffset(207);
        timeZone3.setID("654");
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean11 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str12 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Greenwich Mean Time" + "'", str12, "Greenwich Mean Time");
    }

    @Test
    public void test12128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12128");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.removeUnicodeLocaleAttribute("925");
        java.util.Locale.Builder builder9 = builder0.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12129");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime24.getFieldTypes();
        int int39 = localDateTime24.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getISO3Country();
        int int47 = property43.getMaximumTextLength(locale44);
        java.lang.String str48 = localDateTime24.toString("293", locale44);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        java.util.Set<java.lang.String> strSet51 = locale44.getUnicodeLocaleKeys();
        java.lang.String str52 = localDateTime2.toString("572", locale44);
        int int53 = localDateTime2.size();
        org.joda.time.LocalDateTime.Property property54 = localDateTime2.weekyear();
        int int55 = property54.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime57 = property54.addToCopy(537);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "293" + "'", str48, "293");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "572" + "'", str52, "572");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-292269338) + "'", int55 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test12130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12130");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusYears(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime8.toString(dateTimeFormatter9);
        int int11 = localDateTime8.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1738-06-04T09:51:05.493" + "'", str6, "1738-06-04T09:51:05.493");
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1838-06-04T09:51:05.493" + "'", str10, "1838-06-04T09:51:05.493");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35465493 + "'", int11 == 35465493);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test12131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12131");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        long long13 = copticChronology8.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone14 = copticChronology8.getZone();
        long long18 = dateTimeZone14.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 292272708, dateTimeZone14);
        org.joda.time.Chronology chronology20 = copticChronology0.withZone(dateTimeZone14);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str22 = copticChronology21.toString();
        org.joda.time.DurationField durationField23 = copticChronology21.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        long long30 = copticChronology21.set((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology21.clockhourOfHalfday();
        java.lang.String str35 = copticChronology21.toString();
        org.joda.time.DurationField durationField36 = copticChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology21.hourOfDay();
        org.joda.time.DurationField durationField39 = copticChronology21.days();
        org.joda.time.DurationField durationField40 = copticChronology21.months();
        org.joda.time.DurationField durationField41 = copticChronology21.weeks();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str47 = dateTimeZone43.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone43);
        boolean boolean49 = dateTimeZone43.isFixed();
        org.joda.time.Chronology chronology50 = copticChronology21.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology51 = copticChronology0.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField52 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1136091124375922418L + "'", long13 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CopticChronology[UTC]" + "'", str22, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644573065511L + "'", long30 == 1644573065511L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CopticChronology[UTC]" + "'", str35, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test12132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12132");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        boolean boolean12 = property10.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfEvenCopy();
        int int14 = localDateTime13.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMillis(128);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minus(readableDuration17);
        boolean boolean19 = copticChronology0.equals((java.lang.Object) localDateTime13);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plusMillis(605);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime13.withDate(988, 786, 302);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 786 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test12133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12133");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology0.add(readablePeriod9, 0L, 304);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.dayOfMonth();
        org.joda.time.Chronology chronology14 = copticChronology0.withUTC();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test12134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12134");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = locale12.getScript();
        java.util.Locale locale18 = new java.util.Locale("1737-06-03T23:43:36.994Z", "German (Germany)");
        java.lang.String str19 = locale12.getDisplayCountry(locale18);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("709");
        java.lang.String str22 = locale18.getDisplayName(locale21);
        boolean boolean23 = locale18.hasExtensions();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale18.toString(), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1737-06-03t23:43:36.994z (GERMAN (GERMANY))" + "'", str22, "1737-06-03t23:43:36.994z (GERMAN (GERMANY))");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test12135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12135");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 126, dateTimeZone10);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology16 = chronology7.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField17 = chronology7.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test12136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12136");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone4.isLocalDateTimeGap(localDateTime9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371988948265624 + 552182400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12137");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12138");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getLeapAmount();
        org.joda.time.DurationField durationField11 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property5.addToCopy(0);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime13.isSupported(durationFieldType14);
        int int16 = localDateTime13.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withTime(100, 65, 237, 101);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "656" + "'", str7, "656");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test12139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12139");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField24 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test12140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12140");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long15 = dateTimeZone1.previousTransition(1644572610881L);
        long long18 = dateTimeZone1.convertLocalToUTC((long) (short) 1, true);
        boolean boolean20 = dateTimeZone1.isStandardOffset(1644572630044L);
        long long23 = dateTimeZone1.adjustOffset((long) 984, true);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone25);
        long long30 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, (-7339421692352L));
        java.lang.String[] strArray41 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        boolean boolean45 = strSet42.equals((java.lang.Object) locale44);
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet48 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str49 = dateTimeZone25.getName(13254326752L, locale44);
        boolean boolean50 = dateTimeZone25.isFixed();
        java.lang.String str52 = dateTimeZone25.getNameKey((long) 261);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572610881L + "'", long15 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-35999999L) + "'", long18 == (-35999999L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 984L + "'", long23 == 984L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-7339385692352L) + "'", long30 == (-7339385692352L));
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "English" + "'", str47, "English");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
    }

    @Test
    public void test12141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12141");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "976", "493");
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.lang.String str13 = nameProvider0.getShortName(locale6, "152", "878");
        java.lang.String str14 = locale6.getDisplayScript();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        long long21 = dateTimeZone16.nextTransition((-1L));
        java.lang.String str23 = dateTimeZone16.getShortName((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.millisOfSecond();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str37 = locale32.getDisplayName(locale36);
        java.util.Locale.setDefault(category31, locale32);
        java.lang.String str39 = property30.getAsShortText(locale32);
        java.lang.String str40 = dateTimeZone16.getShortName(1644572644179L, locale32);
        java.util.Set<java.lang.Character> charSet41 = locale32.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet42 = locale32.getExtensionKeys();
        java.util.Set<java.lang.String> strSet43 = locale32.getUnicodeLocaleAttributes();
        strSet43.clear();
        boolean boolean45 = locale6.equals((java.lang.Object) strSet43);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "775" + "'", str39, "775");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test12142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12142");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 773, 153, 839, 981);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 839 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12143");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(923, 92, 0, 452, 262);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 452 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12144");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField15 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test12145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12145");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        strSet10.clear();
        boolean boolean16 = strSet10.contains((java.lang.Object) "293");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("French");
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        boolean boolean23 = strSet19.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.util.Locale.setDefault(locale29);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale27, locale28, locale29, locale33, locale35, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale locale44 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList41);
        boolean boolean46 = strSet10.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        org.joda.time.tz.Provider provider47 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider47);
        org.joda.time.DateTimeZone.setProvider(provider47);
        org.joda.time.DateTimeZone dateTimeZone51 = provider47.getZone("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.joda.time.DateTimeZone dateTimeZone53 = provider47.getZone("35253296");
        java.util.Set<java.lang.String> strSet54 = provider47.getAvailableIDs();
        java.lang.String str55 = java.util.Locale.lookupTag(languageRangeList18, (java.util.Collection<java.lang.String>) strSet54);
        strSet54.clear();
        boolean boolean57 = strSet54.isEmpty();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English (Canada)" + "'", str31, "English (Canada)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (Canada)" + "'", str36, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(provider47);
        org.junit.Assert.assertNull(dateTimeZone51);
        org.junit.Assert.assertNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test12146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12146");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(36000000);
        int int14 = localDateTime13.getYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "857" + "'", str7, "857");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1736 + "'", int14 == 1736);
    }

    @Test
    public void test12147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12147");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test12148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12148");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime2.getFieldTypes();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime19.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime35.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime35.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime35.plus(readablePeriod51);
        int int53 = localDateTime52.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.yearOfEra();
        boolean boolean55 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.Chronology chronology56 = localDateTime19.getChronology();
        boolean boolean57 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime19.withYearOfEra(508);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime19.minusYears(504);
        org.joda.time.LocalDateTime.Property property62 = localDateTime19.yearOfEra();
        java.lang.String str63 = property62.getName();
        org.joda.time.LocalDateTime localDateTime64 = property62.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withDayOfWeek(87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 87 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 902 + "'", int53 == 902);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yearOfEra" + "'", str63, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test12149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12149");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime29.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime29.plus(readablePeriod45);
        int int47 = localDateTime46.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.yearOfEra();
        boolean boolean49 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        int[] intArray50 = localDateTime46.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime10, intArray50);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField53 = copticChronology52.halfdays();
        org.joda.time.DurationField durationField54 = copticChronology52.minutes();
        org.joda.time.Chronology chronology55 = copticChronology52.withUTC();
        org.joda.time.DurationField durationField56 = copticChronology52.centuries();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology52.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = copticChronology52.add(readablePeriod58, 1644572640069L, 575);
        org.joda.time.DurationField durationField62 = copticChronology52.seconds();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology52.millisOfSecond();
        boolean boolean64 = localDateTime10.equals((java.lang.Object) copticChronology52);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        java.lang.String str70 = dateTimeZone66.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(dateTimeZone66);
        int int72 = localDateTime71.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(5);
        int int75 = localDateTime74.getHourOfDay();
        boolean boolean76 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime78 = property77.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime79 = property77.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 932 + "'", int47 == 932);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1738, 6, 4, 35465932]");
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1644572640069L + "'", long61 == 1644572640069L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 11 + "'", int72 == 11);
        org.junit.Assert.assertNotNull(localDateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 19 + "'", int75 == 19);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test12150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12150");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology0.add(readablePeriod12, 1644572913643L, 258);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572913643L + "'", long15 == 1644572913643L);
    }

    @Test
    public void test12151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12151");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.plus(readablePeriod34);
        int int36 = localDateTime35.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        boolean boolean38 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.Chronology chronology39 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime40 = localDateTime2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        long long42 = dateTime40.getMillis();
        boolean boolean44 = dateTime40.equals((java.lang.Object) 1644537028057L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 987 + "'", int36 == 987);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644537065987L + "'", long42 == 1644537065987L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test12152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12152");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(35375112);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test12153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12153");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        boolean boolean43 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        boolean boolean64 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int66 = property22.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int67 = property16.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DurationField durationField68 = property16.getLeapDurationField();
        long long69 = property16.remainder();
        java.util.Locale locale70 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.util.Locale.Category category72 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale73.getDisplayName();
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str78 = locale73.getDisplayName(locale77);
        java.util.Locale.setDefault(category72, locale73);
        java.util.Locale locale80 = java.util.Locale.getDefault(category72);
        java.lang.String str81 = locale70.getDisplayLanguage(locale80);
        int int82 = property16.getMaximumShortTextLength(locale80);
        boolean boolean83 = locale80.hasExtensions();
        java.lang.String str84 = locale80.getScript();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 103981 + "'", int67 == 103981);
        org.junit.Assert.assertNull(durationField68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 35466024L + "'", long69 == 35466024L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.FORMAT + "'", category72.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Chinese (China)" + "'", str75, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Chinese (China)" + "'", str78, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u6587" + "'", str81, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test12154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12154");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusHours(22);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusDays(154);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.DurationField durationField18 = property17.getLeapDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test12155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12155");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(462);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12156");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        strSet10.clear();
        boolean boolean16 = strSet10.add("372");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("eng", strMap18);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream20 = languageRangeList19.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("eng", strMap22);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getISO3Language();
        java.util.Locale locale43 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfSecond();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = property49.getAsText(locale50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale24, locale25, locale32, locale34, locale35, locale36, locale38, locale41, locale43, locale50, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale locale58 = java.util.Locale.lookup(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList55);
        boolean boolean59 = strSet10.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream60 = languageRangeList19.stream();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeStream20);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "107" + "'", str33, "107");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "107" + "'", str51, "107");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeStream60);
    }

    @Test
    public void test12157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12157");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test12158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12158");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekOfWeekyear();
        java.lang.String str7 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = copticChronology0.get(readablePeriod9, 35281032L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[UTC]" + "'", str7, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test12159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12159");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology0.hours();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("106");
        timeZone7.setRawOffset((-1));
        java.time.ZoneId zoneId10 = timeZone7.toZoneId();
        boolean boolean11 = copticChronology0.equals((java.lang.Object) timeZone7);
        timeZone7.setID("1738-06-04T09:46:08.957");
        java.lang.Object obj14 = timeZone7.clone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "sun.util.calendar.ZoneInfo[id=\"1738-06-04T09:46:08.957\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "sun.util.calendar.ZoneInfo[id=\"1738-06-04T09:46:08.957\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "sun.util.calendar.ZoneInfo[id=\"1738-06-04T09:46:08.957\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test12160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12160");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone10);
        org.joda.time.Chronology chronology12 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DurationField durationField14 = chronology12.eras();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test12161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12161");
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        int[] intArray20 = localDateTime19.getValues();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        copticChronology8.validate((org.joda.time.ReadablePartial) localDateTime22, intArray31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.DateTimeField dateTimeField44 = copticChronology41.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusYears((int) (short) -1);
        int[] intArray53 = localDateTime52.getValues();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        int[] intArray64 = localDateTime63.getValues();
        copticChronology41.validate((org.joda.time.ReadablePartial) localDateTime55, intArray64);
        copticChronology8.validate((org.joda.time.ReadablePartial) localDateTime40, intArray64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 710, (org.joda.time.Chronology) copticChronology8);
        org.joda.time.DateTimeField dateTimeField68 = copticChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology8.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(717, 437, 1736, 35320495, 661, 274, 35391520, (org.joda.time.Chronology) copticChronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35320495 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1737, 6, 4, 35466193]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35466193]");
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1737, 6, 4, 35466193]");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1737, 6, 4, 35466193]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test12162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12162");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = copticChronology0.get(readablePeriod16, 1644572697404L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test12163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12163");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(36000000);
        int int14 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusYears(527);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusHours(861);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "297" + "'", str7, "297");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1736 + "'", int14 == 1736);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test12164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12164");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Country();
        int int6 = property2.getMaximumTextLength(locale3);
        org.joda.time.Interval interval7 = property2.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        boolean boolean28 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = dateTime17.getChronology();
        int int52 = property2.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DurationField durationField53 = property2.getRangeDurationField();
        java.lang.String str54 = property2.getName();
        int int55 = property2.getMaximumValueOverall();
        int int56 = property2.get();
        org.joda.time.DateTimeField dateTimeField57 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2038738 + "'", int52 == 2038738);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hourOfDay" + "'", str54, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test12165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12165");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.era();
        org.joda.time.Chronology chronology4 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test12166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12166");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getLanguage();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getDisplayScript();
        java.lang.String str20 = locale13.getDisplayVariant(locale16);
        java.lang.String str21 = locale12.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        java.lang.String str25 = locale24.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English" + "'", str25, "English");
    }

    @Test
    public void test12167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12167");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(43);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withDurationAdded(readableDuration11, 999);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusMillis((int) 'x');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusDays(122);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfDay(751);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test12168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12168");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        strSet10.clear();
        boolean boolean16 = strSet10.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet10.spliterator();
        boolean boolean19 = strSet10.add("638");
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMonths(103981);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.centuryOfEra();
        boolean boolean39 = strSet10.equals((java.lang.Object) property38);
        java.lang.String[] strArray49 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        boolean boolean53 = strSet50.equals((java.lang.Object) locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        boolean boolean55 = strSet10.remove((java.lang.Object) strSet54);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.parse("French");
        boolean boolean58 = strSet54.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57);
        java.lang.Object[] objArray59 = strSet54.toArray();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
    }

    @Test
    public void test12169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12169");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(1738);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int69 = property25.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property25.getFieldType();
        boolean boolean71 = localDateTime17.isSupported(dateTimeFieldType70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = property72.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minus(readablePeriod75);
        int[] intArray78 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime74, (-35999736L));
        boolean boolean80 = copticChronology1.equals((java.lang.Object) "889");
        org.joda.time.DateTimeField dateTimeField81 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology1.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(1644572799477L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField85 = copticChronology1.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 409 + "'", int19 == 409);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1686, 4, 22, 50400264]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test12170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12170");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(3);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        java.lang.String str30 = dateTimeZone27.toString();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str32 = copticChronology31.toString();
        long long36 = copticChronology31.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology31.weekOfWeekyear();
        boolean boolean38 = dateTimeZone27.equals((java.lang.Object) copticChronology31);
        java.util.TimeZone timeZone39 = dateTimeZone27.toTimeZone();
        java.lang.String str41 = dateTimeZone27.getName(1644572665565L);
        long long43 = dateTimeZone27.nextTransition(1644572744049L);
        org.joda.time.Chronology chronology44 = copticChronology0.withZone(dateTimeZone27);
        java.lang.String str46 = dateTimeZone27.getName(1644572736692L);
        int int48 = dateTimeZone27.getOffsetFromLocal(1644572996690L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35466451]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CopticChronology[UTC]" + "'", str32, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1136091124375922418L + "'", long36 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644572744049L + "'", long43 == 1644572744049L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
    }

    @Test
    public void test12171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12171");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology1.add(readablePeriod9, (long) '#', 43);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(2101362L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.hourOfHalfday();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        boolean boolean22 = property20.isLeap();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfEvenCopy();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        org.joda.time.chrono.CopticChronology copticChronology72 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.hourOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime79.toDateTime(readableInstant80);
        boolean boolean82 = dateTime71.isEqual((org.joda.time.ReadableInstant) dateTime81);
        int int83 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int84 = property40.compareTo((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean85 = strSet33.remove((java.lang.Object) property40);
        org.joda.time.LocalDateTime localDateTime87 = property40.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime88 = property40.roundHalfCeilingCopy();
        int int89 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime88);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime88.plusHours(35028711);
        long long93 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime91, 777L);
        org.joda.time.DateTimeField dateTimeField94 = copticChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(copticChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(localDateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + 127747932666478L + "'", long93 == 127747932666478L);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test12172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12172");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.Chronology chronology6 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12173");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField12 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = copticChronology0.add(readablePeriod15, 1644572833934L, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = copticChronology0.getDateTimeMillis(1737, 955, 35305535, 213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 955 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572833934L + "'", long18 == 1644572833934L);
    }

    @Test
    public void test12174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12174");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getShortName(1644572654256L);
        long long10 = dateTimeZone1.convertUTCToLocal((long) 385);
        long long12 = dateTimeZone1.previousTransition(1644572936526L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000385L + "'", long10 == 36000385L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644572936526L + "'", long12 == 1644572936526L);
    }

    @Test
    public void test12175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12175");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField5 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test12176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12176");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = copticChronology0.getZone();
        java.lang.String str10 = copticChronology0.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
    }

    @Test
    public void test12177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12177");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField16 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField18 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField20 = copticChronology0.months();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = copticChronology0.add(readablePeriod21, 1644572624950L, 857);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField26 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology0.weekyear();
        long long32 = copticChronology0.add(1644572884711L, 1644573006868L, 471);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644572624950L + "'", long24 == 1644572624950L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 776238459119539L + "'", long32 == 776238459119539L);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test12178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12178");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay(10);
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMinutes(710);
        int int19 = localDateTime13.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withDurationAdded(readableDuration20, 35168173);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays(972);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test12179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12179");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) "1738-06-04T09:43:41.692", (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        int int7 = property6.getMinimumValue();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        boolean boolean28 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime17.getZone();
        int int52 = property6.compareTo((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str53 = dateTime17.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1737-06-04T09:51:06.646+10:00" + "'", str53, "1737-06-04T09:51:06.646+10:00");
    }

    @Test
    public void test12180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12180");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        java.lang.String str9 = copticChronology0.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
    }

    @Test
    public void test12181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12181");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(35048859);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withFields(readablePartial16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(457);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 98 + "'", int15 == 98);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test12182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12182");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField10 = copticChronology0.centuries();
        org.joda.time.DurationField durationField11 = copticChronology0.halfdays();
        org.joda.time.Chronology chronology12 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField13 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property32 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime.Property property33 = localDateTime16.minuteOfHour();
        int int34 = localDateTime16.getEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        long long41 = dateTimeZone36.nextTransition((-1L));
        java.lang.String str43 = dateTimeZone36.getShortName((long) 100);
        org.joda.time.DateTime dateTime44 = localDateTime16.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology45 = copticChronology0.withZone(dateTimeZone36);
        org.joda.time.DurationField durationField46 = copticChronology0.months();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test12183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12183");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.DurationField durationField12 = copticChronology0.seconds();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = copticChronology0.add(readablePeriod13, 1644572678910L, 966);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime19.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMonths((int) (byte) 100);
        int int35 = localDateTime32.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.minusMonths((int) 'u');
        int[] intArray39 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime32, (long) 916);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime32.withMillisOfDay(810);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572678910L + "'", long16 == 1644572678910L);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1686, 4, 23, 916]");
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test12184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12184");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str18 = copticChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute(43);
        int[] intArray28 = copticChronology17.get((org.joda.time.ReadablePartial) localDateTime26, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime12, intArray28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime12.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime12.monthOfYear();
        org.joda.time.Chronology chronology33 = localDateTime12.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.millisOfSecond();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsText(locale40);
        int int42 = property39.getLeapAmount();
        int int43 = property39.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property39.getFieldType();
        int int45 = localDateTime12.get(dateTimeFieldType44);
        int int46 = localDateTime12.getMillisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573066800L + "'", long9 == 1644573066800L);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CopticChronology[UTC]" + "'", str18, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "800" + "'", str41, "800");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 800 + "'", int43 == 800);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 800 + "'", int45 == 800);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 800 + "'", int46 == 800);
    }

    @Test
    public void test12185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12185");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setRegion("");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder9 = builder7.setLanguage("eng");
        java.util.Locale locale10 = builder7.build();
        java.util.Locale.Builder builder12 = builder7.setRegion("728");
        java.util.Locale.Builder builder15 = builder7.setExtension('u', "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "eng__#x-709");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test12186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12186");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale6 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.lang.String str7 = locale1.getDisplayCountry(locale6);
        java.lang.String[] strArray17 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        boolean boolean21 = strSet18.equals((java.lang.Object) locale20);
        java.lang.String str22 = locale20.getLanguage();
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = locale20.stripExtensions();
        java.lang.String str25 = locale1.getDisplayScript(locale20);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale27.getLanguage();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.lang.String str33 = locale30.getDisplayScript();
        java.lang.String str34 = locale27.getDisplayVariant(locale30);
        java.lang.String str35 = locale26.getDisplayVariant(locale30);
        java.lang.String str36 = locale30.toLanguageTag();
        java.lang.String str37 = locale20.getDisplayCountry(locale30);
        java.lang.String str38 = locale30.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertEquals(locale6.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Canada" + "'", str7, "Canada");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English (Canada)" + "'", str31, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "en-CA" + "'", str36, "en-CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Canada" + "'", str37, "Canada");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
    }

    @Test
    public void test12187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12187");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        boolean boolean41 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean44 = dateTime30.equals((java.lang.Object) 0L);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime30.getZone();
        long long46 = dateTime30.getMillis();
        java.lang.String str47 = dateTime30.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime30.getZone();
        java.lang.String str49 = dateTime30.toString();
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime69);
        int int71 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime52.minusMonths(1636);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.weekyear();
        java.lang.String str75 = property74.getAsString();
        boolean boolean76 = property74.isLeap();
        org.joda.time.LocalDateTime localDateTime78 = property74.setCopy("626");
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property74.getFieldType();
        boolean boolean80 = dateTime30.isSupported(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-7339421333125L) + "'", long46 == (-7339421333125L));
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1737-06-04T09:51:06.875+10:00" + "'", str47, "1737-06-04T09:51:06.875+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1737-06-04T09:51:06.875+10:00" + "'", str49, "1737-06-04T09:51:06.875+10:00");
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1612" + "'", str75, "1612");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test12188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12188");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        int int9 = property5.getMinimumValueOverall();
        org.joda.time.Interval interval10 = property5.toInterval();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale17.getDisplayVariant();
        java.lang.String str22 = locale17.getDisplayScript();
        java.util.Locale.setDefault(category11, locale17);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category11, locale24);
        java.util.Locale locale26 = java.util.Locale.getDefault(category11);
        java.util.Locale locale27 = java.util.Locale.getDefault(category11);
        java.util.Locale locale28 = java.util.Locale.getDefault(category11);
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = property5.getAsText(locale28);
        org.joda.time.DateTimeField dateTimeField31 = property5.getField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "945" + "'", str30, "945");
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test12189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12189");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(1738);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int69 = property25.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property25.getFieldType();
        boolean boolean71 = localDateTime17.isSupported(dateTimeFieldType70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = property72.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minus(readablePeriod75);
        int[] intArray78 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime74, (-35999736L));
        boolean boolean80 = copticChronology1.equals((java.lang.Object) "889");
        org.joda.time.DateTimeField dateTimeField81 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology1.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((-7339421743304L), (org.joda.time.Chronology) copticChronology1);
        org.joda.time.chrono.CopticChronology copticChronology85 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str86 = copticChronology85.toString();
        long long91 = copticChronology85.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField92 = copticChronology85.secondOfDay();
        org.joda.time.DateTimeField dateTimeField93 = copticChronology85.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone94 = copticChronology85.getZone();
        long long96 = dateTimeZone94.nextTransition(1644572736930L);
        org.joda.time.Chronology chronology97 = copticChronology1.withZone(dateTimeZone94);
        org.joda.time.DurationField durationField98 = copticChronology1.minutes();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 966 + "'", int19 == 966);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1686, 4, 22, 50400264]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(copticChronology85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "CopticChronology[UTC]" + "'", str86, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-50149497600000L) + "'", long91 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1644572736930L + "'", long96 == 1644572736930L);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(durationField98);
    }

    @Test
    public void test12190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12190");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds(10);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMinuteOfHour(51);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.hourOfDay();
        boolean boolean26 = property25.isLeap();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.getLocalDateTime();
        boolean boolean35 = property25.equals((java.lang.Object) property33);
        org.joda.time.DurationField durationField36 = property33.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property33.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withHourOfDay(22);
        int int57 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfSecond(283);
        int int60 = localDateTime59.getSecondOfMinute();
        org.joda.time.Chronology chronology61 = localDateTime59.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField71 = copticChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime64.withFields((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime64.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property78 = localDateTime64.dayOfMonth();
        int int79 = property78.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime81 = property78.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plus(readableDuration82);
        int[] intArray85 = chronology61.get((org.joda.time.ReadablePartial) localDateTime83, 1644572639605L);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.minusMinutes(83);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray88 = localDateTime87.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime87.plusMonths(0);
        int int91 = property33.compareTo((org.joda.time.ReadablePartial) localDateTime90);
        int int92 = property33.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime93 = property33.roundHalfCeilingCopy();
        int int94 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime93);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "11" + "'", str7, "11");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35467012]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 30 + "'", int79 == 30);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1738, 6, 4, 35039605]");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 999 + "'", int92 == 999);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test12191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12191");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.months();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test12192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12192");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = copticChronology0.getZone();
        java.lang.String str11 = dateTimeZone9.getShortName(1644572624307L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundFloorCopy();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale15.toLanguageTag();
        java.lang.String str18 = locale15.getScript();
        java.lang.String str19 = property13.getAsText(locale15);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it-IT" + "'", str17, "it-IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "venerd\354" + "'", str19, "venerd\354");
    }

    @Test
    public void test12193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12193");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = dateTimeZone1.getShortName((long) 14, locale6);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsText(locale14);
        org.joda.time.Interval interval16 = property13.toInterval();
        org.joda.time.LocalDateTime localDateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(10);
        int int20 = localDateTime19.getEra();
        boolean boolean21 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        int[] intArray30 = localDateTime29.getValues();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.hourOfDay();
        boolean boolean32 = property31.isLeap();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.getLocalDateTime();
        boolean boolean41 = property31.equals((java.lang.Object) property39);
        org.joda.time.DurationField durationField42 = property39.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property39.getFieldType();
        boolean boolean44 = localDateTime19.isSupported(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime19.withWeekyear(252);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusSeconds(604);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "92" + "'", str15, "92");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1737, 6, 4, 35467092]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test12194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12194");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French (France)" + "'", str2, "French (France)");
    }

    @Test
    public void test12195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12195");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(3);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.DateTimeZone dateTimeZone26 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35467138]");
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test12196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12196");
        java.util.Locale locale2 = new java.util.Locale("454", "500");
        org.junit.Assert.assertEquals(locale2.toString(), "454_500");
    }

    @Test
    public void test12197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12197");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        int int5 = dateTimeZone2.getStandardOffset(0L);
        boolean boolean7 = dateTimeZone2.isStandardOffset((long) (short) 1);
        long long10 = dateTimeZone2.adjustOffset(1644572630512L, false);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.centuryOfEra();
        int int20 = localDateTime18.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minus(readablePeriod21);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTime dateTime26 = localDateTime18.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        long long29 = dateTimeZone2.getMillisKeepLocal(dateTimeZone25, (-7307885724435L));
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime32.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property48 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime32.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime32.plus(readablePeriod51);
        boolean boolean53 = dateTimeZone2.isLocalDateTimeGap(localDateTime32);
        java.lang.String str55 = dateTimeZone2.getNameKey((long) 1743);
        long long57 = dateTimeZone2.nextTransition((long) 554);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField60 = copticChronology59.halfdays();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572630512L + "'", long10 == 1644572630512L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 37 + "'", int20 == 37);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-7307885724435L) + "'", long29 == (-7307885724435L));
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 554L + "'", long57 == 554L);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test12198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12198");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = timeZone4.getOffset((long) 942);
        java.util.TimeZone.setDefault(timeZone4);
        int int9 = timeZone4.getOffset(46003918L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
    }

    @Test
    public void test12199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12199");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus(readablePeriod18);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths(3);
        int int23 = localDateTime19.getMillisOfSecond();
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        boolean boolean27 = dateTimeZone25.equals((java.lang.Object) 1644572716872L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 189 + "'", int20 == 189);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 189 + "'", int23 == 189);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12200");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths((int) (byte) 0);
        int int12 = localDateTime11.size();
        int int13 = localDateTime11.getWeekyear();
        int int14 = localDateTime11.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(458);
        boolean boolean18 = locale0.equals((java.lang.Object) localDateTime17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1738 + "'", int13 == 1738);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test12201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12201");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = copticChronology0.getZone();
        int int6 = dateTimeZone4.getStandardOffset((long) 946);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsText(locale14);
        long long16 = property13.remainder();
        org.joda.time.LocalDateTime localDateTime17 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.year();
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale19.getVariant();
        int int23 = property18.getMaximumShortTextLength(locale19);
        boolean boolean24 = locale19.hasExtensions();
        java.lang.String str25 = dateTimeZone4.getShortName(1644572672473L, locale19);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        java.util.TimeZone timeZone52 = dateTimeZone49.toTimeZone();
        long long54 = dateTimeZone49.nextTransition((-1L));
        int int56 = dateTimeZone49.getStandardOffset((long) 'x');
        java.lang.String str57 = dateTimeZone49.getID();
        java.lang.String str58 = dateTimeZone49.getID();
        long long60 = dateTimeZone49.nextTransition((long) 884);
        java.lang.String str61 = dateTimeZone49.getID();
        long long63 = dateTimeZone4.getMillisKeepLocal(dateTimeZone49, (long) 687);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "225" + "'", str15, "225");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 36000000 + "'", int56 == 36000000);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:00" + "'", str58, "+10:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 884L + "'", long60 == 884L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-35999313L) + "'", long63 == (-35999313L));
    }

    @Test
    public void test12202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12202");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime18);
        int int20 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime8.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        boolean boolean32 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime8.plusSeconds(846);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = property40.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = property40.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = property40.roundHalfEvenCopy();
        int int45 = localDateTime44.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusSeconds(697);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.year();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withCenturyOfEra(1738);
        int int53 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        boolean boolean54 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.DateTimeField dateTimeField58 = copticChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology55.minuteOfDay();
        org.joda.time.DurationField durationField60 = copticChronology55.months();
        org.joda.time.DurationField durationField61 = copticChronology55.minutes();
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str63 = copticChronology62.toString();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = copticChronology62.add(readablePeriod64, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField68 = copticChronology62.halfdays();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology62.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology62.era();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology62);
        int[] intArray73 = copticChronology55.get((org.joda.time.ReadablePartial) localDateTime71, 1644572717111L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime34, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            long long79 = copticChronology0.getDateTimeMillis(974, 171, 100, 74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 171 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35467257]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CopticChronology[UTC]" + "'", str63, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1738, 6, 4, 35117111]");
    }

    @Test
    public void test12203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12203");
        java.util.Locale locale1 = new java.util.Locale("+00:01");
        org.junit.Assert.assertEquals(locale1.toString(), "+00:01");
    }

    @Test
    public void test12204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12204");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        int int10 = localDateTime9.size();
        int int11 = localDateTime9.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long17 = dateTimeZone13.convertLocalToUTC((long) (byte) 10, false, 1644572659598L);
        long long19 = dateTimeZone13.convertUTCToLocal((-35999736L));
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime21 = localDateTime9.toDateTime(dateTimeZone13);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 299 + "'", int11 == 299);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-35999990L) + "'", long17 == (-35999990L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 264L + "'", long19 == 264L);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test12205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12205");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        long long6 = copticChronology0.add((long) (byte) -1, (long) 43, 1737);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 74690L + "'", long6 == 74690L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12206");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        int int8 = property5.getLeapAmount();
        int int9 = property5.get();
        org.joda.time.Interval interval10 = property5.toInterval();
        org.joda.time.DateTimeField dateTimeField11 = property5.getField();
        org.joda.time.LocalDateTime localDateTime13 = property5.addToCopy(104);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "327" + "'", str7, "327");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 327 + "'", int9 == 327);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test12207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12207");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus(readablePeriod18);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.yearOfEra();
        int int22 = localDateTime19.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 348 + "'", int20 == 348);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
    }

    @Test
    public void test12208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12208");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfHalfday();
        java.lang.String str14 = copticChronology0.toString();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField19 = copticChronology0.seconds();
        java.lang.String str20 = copticChronology0.toString();
        org.joda.time.DurationField durationField21 = copticChronology0.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573067365L + "'", long9 == 1644573067365L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CopticChronology[UTC]" + "'", str20, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test12209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12209");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusDays(1738);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        int int18 = localDateTime16.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        boolean boolean45 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        boolean boolean66 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime55);
        int int68 = property24.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property24.getFieldType();
        boolean boolean70 = localDateTime16.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = property71.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minus(readablePeriod74);
        int[] intArray77 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime73, (-35999736L));
        boolean boolean79 = copticChronology0.equals((java.lang.Object) "889");
        org.joda.time.DateTimeField dateTimeField80 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField81 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField83 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 400 + "'", int18 == 400);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1686, 4, 22, 50400264]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
    }

    @Test
    public void test12210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12210");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = property20.setCopy("95");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 95 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12211");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale7.getDisplayVariant(locale9);
        java.util.Locale locale14 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str15 = locale9.getDisplayName(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getDisplayName();
        java.lang.String str20 = nameProvider0.getName(locale14, "917", "965");
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.lang.String str27 = locale24.getDisplayScript();
        java.lang.String str28 = locale21.getDisplayVariant(locale24);
        java.util.Locale locale30 = new java.util.Locale("1737-06-04T09:44:05.259+10:00");
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder31.setExtension('x', "811");
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String str39 = locale36.getDisplayScript();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.lang.String str41 = locale36.getDisplayScript();
        java.util.Locale.Builder builder42 = builder34.setLocale(locale36);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale43.getScript();
        java.lang.String str45 = locale43.getISO3Country();
        boolean boolean46 = locale43.hasExtensions();
        java.util.Locale.Builder builder47 = builder34.setLocale(locale43);
        java.lang.String str48 = locale30.getDisplayVariant(locale43);
        java.lang.String str49 = locale21.getDisplayVariant(locale43);
        java.lang.String str50 = locale21.getDisplayName();
        java.lang.String str53 = nameProvider0.getName(locale21, "KR", "gmt");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = locale56.getLanguage();
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = locale58.getDisplayName(locale59);
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        java.lang.String str62 = locale59.getDisplayScript();
        java.lang.String str63 = locale56.getDisplayVariant(locale59);
        java.lang.String str64 = locale55.getDisplayVariant(locale59);
        java.lang.String str65 = locale59.toLanguageTag();
        java.util.Set<java.lang.String> strSet66 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str69 = nameProvider0.getShortName(locale59, "35141978", "fra");
        java.lang.String[] strArray79 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        java.util.Locale locale82 = java.util.Locale.CANADA;
        boolean boolean83 = strSet80.equals((java.lang.Object) locale82);
        java.lang.String str84 = locale82.getLanguage();
        java.lang.String str85 = locale82.getVariant();
        java.lang.String str88 = nameProvider0.getShortName(locale82, "", "638");
        java.util.Set<java.lang.String> strSet89 = locale82.getUnicodeLocaleKeys();
        java.util.Locale locale90 = locale82.stripExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "501" + "'", str8, "501");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale14.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str17, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale30.toString(), "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English (Canada)" + "'", str37, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "KOR" + "'", str45, "KOR");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English" + "'", str50, "English");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en" + "'", str57, "en");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English (Canada)" + "'", str60, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en-CA" + "'", str65, "en-CA");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "en" + "'", str84, "en");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_CA");
    }

    @Test
    public void test12212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12212");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("494");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=494");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12213");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.eras();
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        int[] intArray20 = localDateTime19.getValues();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        copticChronology8.validate((org.joda.time.ReadablePartial) localDateTime22, intArray31);
        int int33 = localDateTime22.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.minus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        int[] intArray38 = chronology7.get((org.joda.time.ReadablePartial) localDateTime35, (long) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readablePeriod39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusHours(838);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundFloorCopy();
        org.joda.time.Interval interval51 = property49.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property49.getFieldType();
        boolean boolean53 = localDateTime35.isSupported(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1737, 6, 4, 35467566]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35467566]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test12214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12214");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField18 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test12215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12215");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, 5431484632041L);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = copticChronology11.add(1644573034872L, 1644536694481L, 34927720);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644536694481 * 34927720");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5431448632041L + "'", long10 == 5431448632041L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12216");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getDisplayVariant();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Country();
        int int16 = property12.getMaximumTextLength(locale13);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale13.getDisplayVariant(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale13);
        java.util.Locale.Builder builder23 = builder20.setExtension('u', "35080628");
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str36 = locale31.getDisplayName(locale35);
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str38 = property29.getAsShortText(locale31);
        java.util.Locale.Builder builder39 = builder23.setLocale(locale31);
        java.util.Locale.Builder builder40 = builder39.clear();
        java.util.Locale.Builder builder42 = builder39.setRegion("510");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder42.setVariant("1738-06-04T09:48:45.535");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1738-06-04T09:48:45.535 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "640" + "'", str38, "640");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test12217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12217");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.lang.String str4 = locale1.getVariant();
        java.util.Set<java.lang.Character> charSet5 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test12218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12218");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap5);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("eng", strMap13);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream15 = languageRangeList14.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("eng", strMap17);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = property26.getAsText(locale27);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.millisOfSecond();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale19, locale20, locale27, locale29, locale30, locale31, locale33, locale36, locale38, locale45, locale47, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale locale53 = java.util.Locale.lookup(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale locale57 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strSet58, filteringMode59);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet11, filteringMode59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap62);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeStream15);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "669" + "'", str28, "669");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English (Canada)" + "'", str34, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "669" + "'", str46, "669");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertEquals(locale57.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
    }

    @Test
    public void test12219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12219");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = copticChronology0.getDateTimeMillis((long) 3, 956, 996, 83, 1754);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 956 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test12220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12220");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        java.lang.String str12 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        int int22 = localDateTime20.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minus(readablePeriod23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = copticChronology0.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.year();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime39 = property35.setCopy(43);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = property45.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = property45.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = property45.roundHalfEvenCopy();
        int int50 = localDateTime49.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusSeconds(697);
        boolean boolean53 = localDateTime39.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime39.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str56 = copticChronology55.toString();
        org.joda.time.DurationField durationField57 = copticChronology55.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        long long64 = copticChronology55.set((org.joda.time.ReadablePartial) localDateTime60, (long) 100);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.minusMinutes(10);
        int int67 = localDateTime66.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withPeriodAdded(readablePeriod68, 999);
        int[] intArray71 = localDateTime70.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime39, intArray71);
        org.joda.time.DurationField durationField73 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology0.year();
        org.joda.time.DurationField durationField75 = copticChronology0.months();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573067726L + "'", long9 == 1644573067726L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37 + "'", int22 == 37);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "CopticChronology[UTC]" + "'", str56, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1644573067726L + "'", long64 == 1644573067726L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 38 + "'", int67 == 38);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1738, 6, 4, 34867726]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test12221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12221");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((-1));
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, 48);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test12222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12222");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds(93);
        int int15 = localDateTime12.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusMonths(35396621);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test12223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12223");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField4 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test12224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12224");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 154);
        long long5 = dateTimeZone1.convertUTCToLocal(1644572721651L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644687921651L + "'", long5 == 1644687921651L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test12225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12225");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime17.getFields();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
    }

    @Test
    public void test12226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12226");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(43);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMonths((int) (byte) 100);
        java.lang.String str27 = localDateTime26.toString();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        boolean boolean30 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime8.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1732-09-03T09:51:07.851" + "'", str27, "1732-09-03T09:51:07.851");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test12227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12227");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = copticChronology0.hours();
        org.joda.time.DurationField durationField16 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573067872L + "'", long9 == 1644573067872L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test12228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12228");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str11 = copticChronology10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology10.add(readablePeriod12, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField16 = copticChronology10.halfdays();
        org.joda.time.DurationField durationField17 = copticChronology10.millis();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology10.millisOfDay();
        org.joda.time.DurationField durationField19 = copticChronology10.centuries();
        org.joda.time.DurationField durationField20 = copticChronology10.months();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology10);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        boolean boolean30 = localDateTime22.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime9.withField(dateTimeFieldType29, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.year();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "889" + "'", str7, "889");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test12229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12229");
        java.util.Locale locale3 = new java.util.Locale("545", "February", "35021141");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        int int5 = strSet4.size();
        org.junit.Assert.assertEquals(locale3.toString(), "545_FEBRUARY_35021141");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test12230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12230");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 22);
        java.lang.String str17 = dateTimeZone13.getShortName(1644572624742L);
        long long19 = dateTimeZone13.convertUTCToLocal(1644572611311L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        boolean boolean21 = dateTime11.equals((java.lang.Object) localDateTime20);
        long long22 = dateTime11.getMillis();
        long long23 = dateTime11.getMillis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644608611311L + "'", long19 == 1644608611311L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644537067915L + "'", long22 == 1644537067915L);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644537067915L + "'", long23 == 1644537067915L);
    }

    @Test
    public void test12231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12231");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = property18.getAsShortText(locale19);
        java.lang.String str23 = property18.toString();
        java.lang.String str24 = property18.getAsShortText();
        org.joda.time.LocalDateTime localDateTime25 = property18.withMinimumValue();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale27.getDisplayScript();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = localDateTime33.toString(dateTimeFormatter36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusYears(100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime33.year();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale42.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str47 = locale42.getDisplayName(locale46);
        java.util.Locale.setDefault(category41, locale42);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Locale locale50 = locale49.stripExtensions();
        java.util.Locale locale51 = locale49.stripExtensions();
        java.util.Locale.setDefault(category41, locale49);
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = locale57.getDisplayScript();
        java.lang.String str61 = locale54.getDisplayVariant(locale57);
        java.lang.String str62 = locale53.getDisplayVariant(locale57);
        java.util.Locale.setDefault(category41, locale57);
        org.joda.time.tz.NameProvider nameProvider64 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider64);
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str69 = nameProvider64.getName(locale66, "38", "493");
        java.util.Locale.setDefault(category41, locale66);
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str72 = locale66.getDisplayScript(locale71);
        int int73 = property40.getMaximumShortTextLength(locale66);
        java.lang.String str74 = locale27.getDisplayVariant(locale66);
        int int75 = property18.getMaximumTextLength(locale27);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "35467932" + "'", str22, "35467932");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[millisOfDay]" + "'", str23, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "35467932" + "'", str24, "35467932");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1738-06-04T09:51:07.933" + "'", str37, "1738-06-04T09:51:07.933");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (China)" + "'", str44, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (China)" + "'", str47, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en" + "'", str55, "en");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English (Canada)" + "'", str58, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(nameProvider64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
    }

    @Test
    public void test12232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12232");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 22);
        java.lang.String str5 = dateTimeZone1.getShortName(1644572624742L);
        java.lang.String str6 = dateTimeZone1.toString();
        long long10 = dateTimeZone1.convertLocalToUTC((long) 89, false, 1643709020030L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999911L) + "'", long10 == (-35999911L));
    }

    @Test
    public void test12233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12233");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.getID();
        long long6 = dateTimeZone2.adjustOffset((long) 'x', true);
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        boolean boolean11 = strSet7.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Locale.setDefault(locale17);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale15, locale16, locale17, locale21, locale23, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Locale locale32 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList29);
        boolean boolean33 = dateTimeZone2.equals((java.lang.Object) locale32);
        java.lang.String str35 = dateTimeZone2.getShortName((long) 999);
        long long37 = dateTimeZone2.previousTransition((long) 11);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(1644572772395L, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2, 719);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 719");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 120L + "'", long6 == 120L);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 11L + "'", long37 == 11L);
    }

    @Test
    public void test12234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12234");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = copticChronology0.withUTC();
        org.joda.time.Chronology chronology2 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField3 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test12235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12235");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("1737-06-04T09:45:46.623+10:00");
        int int10 = property7.getMaximumShortTextLength(locale9);
        java.util.Locale locale13 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Country();
        int int20 = property16.getMaximumTextLength(locale17);
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale17.getDisplayVariant(locale21);
        java.lang.String str24 = locale13.getDisplayLanguage(locale17);
        java.util.Set<java.lang.String> strSet25 = locale13.getUnicodeLocaleKeys();
        java.lang.String str26 = locale9.getDisplayLanguage(locale13);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology28.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        int[] intArray51 = localDateTime50.getValues();
        copticChronology28.validate((org.joda.time.ReadablePartial) localDateTime42, intArray51);
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = property58.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.DateTimeField dateTimeField64 = copticChronology61.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.hourOfDay();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusYears((int) (short) -1);
        int[] intArray73 = localDateTime72.getValues();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology76 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology76.dayOfYear();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.hourOfDay();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.plusYears((int) (short) -1);
        int[] intArray84 = localDateTime83.getValues();
        copticChronology61.validate((org.joda.time.ReadablePartial) localDateTime75, intArray84);
        copticChronology28.validate((org.joda.time.ReadablePartial) localDateTime60, intArray84);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 710, (org.joda.time.Chronology) copticChronology28);
        org.joda.time.DateTimeField dateTimeField88 = copticChronology28.minuteOfDay();
        org.joda.time.DurationField durationField89 = copticChronology28.eras();
        org.joda.time.DateTimeField dateTimeField90 = copticChronology28.secondOfDay();
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology28);
        org.joda.time.DateTimeField dateTimeField92 = copticChronology28.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime((java.lang.Object) locale13, (org.joda.time.Chronology) copticChronology28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals(locale13.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1738-06-04t09:43:28.618" + "'", str24, "1738-06-04t09:43:28.618");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1737, 6, 4, 35468010]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1737, 6, 4, 35468010]");
        org.junit.Assert.assertNotNull(copticChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(intArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1737, 6, 4, 35468010]");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(copticChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(intArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1737, 6, 4, 35468010]");
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test12236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12236");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime20.dayOfWeek();
        boolean boolean29 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property30 = localDateTime6.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test12237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12237");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str11 = copticChronology10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology10.add(readablePeriod12, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField16 = copticChronology10.eras();
        boolean boolean17 = localDateTime7.equals((java.lang.Object) copticChronology10);
        org.joda.time.DateTime dateTime18 = localDateTime7.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = property24.roundHalfEvenCopy();
        int int29 = localDateTime28.getDayOfWeek();
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime();
        long long31 = dateTime30.getMillis();
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime30.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC(1794736082356L, true, 1644572679063L);
        long long40 = dateTimeZone33.adjustOffset(1644572645652L, true);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644537068053L + "'", long31 == 1644537068053L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1794700082356L + "'", long37 == 1794700082356L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572645652L + "'", long40 == 1644572645652L);
    }

    @Test
    public void test12238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12238");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusDays(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes(36000000);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35468073]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
    }

    @Test
    public void test12239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12239");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Country();
        int int6 = property2.getMaximumTextLength(locale3);
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale3.getDisplayVariant(locale7);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfCeilingCopy();
        org.joda.time.Interval interval20 = property15.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = property26.getAsText(locale27);
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale27.getDisplayVariant(locale29);
        java.util.Locale locale34 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str35 = locale29.getDisplayName(locale34);
        java.lang.String str36 = locale34.getScript();
        java.lang.String str37 = locale34.getDisplayName();
        java.lang.String str38 = locale34.getDisplayLanguage();
        java.lang.String str39 = property15.getAsText(locale34);
        java.lang.String str40 = locale34.getDisplayScript();
        java.lang.String str41 = locale3.getDisplayLanguage(locale34);
        java.lang.String str42 = locale3.toLanguageTag();
        java.lang.String str43 = locale3.getScript();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getVariant();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale44.getISO3Country();
        java.lang.String str48 = locale44.getScript();
        java.util.Set<java.lang.String> strSet49 = locale44.getUnicodeLocaleKeys();
        java.lang.String str50 = locale3.getDisplayCountry(locale44);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "104" + "'", str28, "104");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals(locale34.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str37, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1738-06-04t09:43:28.618" + "'", str38, "1738-06-04t09:43:28.618");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "104" + "'", str39, "104");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japanese" + "'", str41, "Japanese");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ja" + "'", str42, "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test12240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12240");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long10 = copticChronology0.add(1644572616856L, 1644572617993L, 700);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        org.joda.time.DurationField durationField13 = copticChronology11.millis();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime40.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime40.plus(readablePeriod56);
        int int58 = localDateTime57.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.yearOfEra();
        boolean boolean60 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        int[] intArray61 = localDateTime57.getValues();
        copticChronology11.validate((org.joda.time.ReadablePartial) localDateTime21, intArray61);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime65.withFields((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withMillisOfDay(10);
        int[] intArray79 = localDateTime76.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray79);
        org.joda.time.DateTimeField dateTimeField81 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone83 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField84 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField85 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1152845405211956L + "'", long10 == 1152845405211956L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 152 + "'", int58 == 152);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1738, 6, 4, 35468152]");
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1738, 6, 4, 35468152]");
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
    }

    @Test
    public void test12241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12241");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setUnicodeLocaleKeyword("Fri", "1737-06-04T09:46:57.984+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Fri [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test12242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12242");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology0.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField13 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test12243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12243");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko" + "'", str1, "ko");
    }

    @Test
    public void test12244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12244");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 467);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        int int23 = localDateTime19.getDayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.minuteOfHour();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekyear();
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale33.getExtension('u');
        java.lang.String str37 = property32.getAsShortText(locale33);
        org.joda.time.LocalDateTime localDateTime38 = property32.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime41.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime41.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property57 = localDateTime41.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = localDateTime41.getFieldTypes();
        org.joda.time.LocalDateTime.Property property59 = localDateTime41.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property59.getFieldType();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime38.withField(dateTimeFieldType60, 811);
        boolean boolean63 = localDateTime19.isSupported(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime1.withField(dateTimeFieldType60, 529);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1738" + "'", str37, "1738");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test12245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12245");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str5 = timeZone3.getID();
        int int6 = timeZone3.getRawOffset();
        int int7 = timeZone3.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test12246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12246");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getLeapAmount();
        org.joda.time.DurationField durationField11 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property5.addToCopy(0);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        int[] intArray22 = localDateTime21.getValues();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.hourOfDay();
        int int24 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = property5.setCopy(161);
        org.joda.time.LocalDateTime localDateTime27 = property5.roundHalfFloorCopy();
        int int28 = localDateTime27.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "303" + "'", str7, "303");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1737, 6, 4, 35468303]");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
    }

    @Test
    public void test12247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12247");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12248");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("35408213");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test12249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12249");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays(580);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 207);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        boolean boolean70 = dateTime59.isEqual((org.joda.time.ReadableInstant) dateTime69);
        int int71 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime38.getZone();
        org.joda.time.Chronology chronology73 = dateTime38.getChronology();
        long long74 = dateTime38.getMillis();
        int int75 = property27.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime76 = property27.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusSeconds(734);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573068349L + "'", long9 == 1644573068349L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-7339421331651L) + "'", long74 == (-7339421331651L));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test12250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12250");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfCentury();
        int int28 = localDateTime24.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusYears(700);
        int int31 = localDateTime30.size();
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.hourOfDay();
        boolean boolean42 = property41.isLeap();
        org.joda.time.LocalDateTime localDateTime43 = property41.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.getLocalDateTime();
        boolean boolean51 = property41.equals((java.lang.Object) property49);
        org.joda.time.DurationField durationField52 = property49.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property49.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property49.getFieldType();
        boolean boolean55 = localDateTime30.isSupported(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime12.withField(dateTimeFieldType54, 625);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plus(readablePeriod58);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1737, 6, 4, 35468399]");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test12251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12251");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        boolean boolean23 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((-35999031L));
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        boolean boolean28 = localDateTime17.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime17.plusSeconds(1743);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime33.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime33.plusSeconds((int) 'x');
        int int49 = localDateTime33.getMillisOfSecond();
        int int50 = localDateTime33.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime33.plusDays(375);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime33.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime33.plusHours(100);
        boolean boolean57 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 431 + "'", int49 == 431);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test12252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12252");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        boolean boolean40 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int63 = property19.compareTo((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean64 = strSet12.remove((java.lang.Object) property19);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.parse("eng", strMap67);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream69 = languageRangeList68.stream();
        boolean boolean70 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream71 = languageRangeList68.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream72 = languageRangeList68.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList68, strMap73);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(languageRangeStream71);
        org.junit.Assert.assertNotNull(languageRangeStream72);
        org.junit.Assert.assertNotNull(languageRangeList74);
    }

    @Test
    public void test12253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12253");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.nextTransition((-1L));
        long long9 = dateTimeZone1.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property11.withMinimumValue();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        int[] intArray22 = localDateTime21.getValues();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.hourOfDay();
        boolean boolean24 = property23.isLeap();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder25.setExtension('x', "709");
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder32 = builder29.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder29.setExtension('u', "35026152");
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = property23.getAsText(locale36);
        java.lang.String str38 = locale36.getCountry();
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = locale36.getDisplayLanguage();
        java.lang.String str41 = locale36.getLanguage();
        int int42 = property11.getMaximumShortTextLength(locale36);
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale36.getDisplayCountry(locale43);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-35999999L) + "'", long9 == (-35999999L));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1737, 6, 4, 35468535]");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9" + "'", str37, "9");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und-u-35026152" + "'", str39, "und-u-35026152");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test12254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12254");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        int int9 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfMonth();
        int int11 = localDateTime7.getMillisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37 + "'", int9 == 37);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35468554 + "'", int11 == 35468554);
    }

    @Test
    public void test12255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12255");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.plus(readablePeriod21);
        int int23 = localDateTime2.getDayOfMonth();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.getDisplayVariant();
        java.util.Locale locale30 = new java.util.Locale("Greenwich Mean Time");
        java.lang.String str31 = locale25.getDisplayVariant(locale30);
        java.lang.String str32 = localDateTime2.toString("665", locale25);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime2.plusDays(35106004);
        org.joda.time.LocalDateTime.Property property35 = localDateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale30.toString(), "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "665" + "'", str32, "665");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test12256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12256");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        int int8 = localDateTime6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        int int21 = dateTimeZone14.getStandardOffset(1644572875391L);
        org.joda.time.DateTime dateTime22 = localDateTime6.toDateTime(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test12257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12257");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        int[] intArray36 = localDateTime35.getValues();
        boolean boolean37 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime13.plusSeconds(846);
        int int40 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks(493);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withMillisOfSecond(767);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1737, 6, 4, 35468603]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test12258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12258");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.toLanguageTag();
        java.lang.String str4 = locale2.getLanguage();
        java.lang.String str5 = locale2.getLanguage();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayScript();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        java.lang.String str13 = dateTimeZone10.toString();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        long long19 = copticChronology14.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology14.weekOfWeekyear();
        boolean boolean21 = dateTimeZone10.equals((java.lang.Object) copticChronology14);
        boolean boolean23 = dateTimeZone10.isStandardOffset(1644572616432L);
        int int25 = dateTimeZone10.getOffsetFromLocal((long) 6);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField30 = copticChronology29.hours();
        int int31 = copticChronology29.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology29.era();
        boolean boolean33 = strSet28.remove((java.lang.Object) copticChronology29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = copticChronology29.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str38 = dateTimeZone37.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        java.util.TimeZone timeZone40 = dateTimeZone37.toTimeZone();
        java.util.TimeZone timeZone41 = dateTimeZone37.toTimeZone();
        long long43 = dateTimeZone34.getMillisKeepLocal(dateTimeZone37, (long) 128);
        boolean boolean44 = dateTimeZone34.isFixed();
        long long46 = dateTimeZone10.getMillisKeepLocal(dateTimeZone34, 1644572652334L);
        java.util.Locale locale51 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        java.lang.String str52 = dateTimeZone34.getShortName(5431484682905L, locale51);
        java.lang.String str53 = locale7.getDisplayName(locale51);
        java.util.Locale.setDefault(category0, locale7);
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str56 = copticChronology55.toString();
        org.joda.time.DurationField durationField57 = copticChronology55.weekyears();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology55.clockhourOfHalfday();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale59.getISO3Language();
        boolean boolean61 = copticChronology55.equals((java.lang.Object) locale59);
        java.lang.String str62 = locale59.getCountry();
        java.lang.String str63 = locale59.getISO3Language();
        java.util.Locale.setDefault(category0, locale59);
        java.util.Locale locale65 = java.util.Locale.getDefault(category0);
        java.util.Locale locale66 = java.util.Locale.getDefault(category0);
        java.util.Locale locale67 = java.util.Locale.getDefault(category0);
        java.util.Locale locale68 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1136091124375922418L + "'", long19 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 128L + "'", long43 == 128L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572652334L + "'", long46 == 1644572652334L);
        org.junit.Assert.assertEquals(locale51.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (United States)" + "'", str53, "English (United States)");
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "CopticChronology[UTC]" + "'", str56, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "jpn" + "'", str60, "jpn");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "jpn" + "'", str63, "jpn");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
    }

    @Test
    public void test12259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12259");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusDays(999);
        int int10 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plusWeeks(2495554);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = localDateTime2.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -309 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test12260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12260");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getDisplayName();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "704" + "'", str7, "704");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u82f1\u8a9e" + "'", str8, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u82f1\u8a9e" + "'", str9, "\u82f1\u8a9e");
    }

    @Test
    public void test12261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12261");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.hourOfDay();
        int int13 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField15 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573068719L + "'", long9 == 1644573068719L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test12262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12262");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str18 = copticChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute(43);
        int[] intArray28 = copticChronology17.get((org.joda.time.ReadablePartial) localDateTime26, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime12, intArray28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime12.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime12.withSecondOfMinute(408);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 408 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573068735L + "'", long9 == 1644573068735L);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CopticChronology[UTC]" + "'", str18, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test12263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12263");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfHalfday();
        java.lang.String str14 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusYears((int) (short) 0);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology24.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        int[] intArray36 = localDateTime35.getValues();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        int[] intArray47 = localDateTime46.getValues();
        copticChronology24.validate((org.joda.time.ReadablePartial) localDateTime38, intArray47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology57.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        int[] intArray69 = localDateTime68.getValues();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology72 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.hourOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusYears((int) (short) -1);
        int[] intArray80 = localDateTime79.getValues();
        copticChronology57.validate((org.joda.time.ReadablePartial) localDateTime71, intArray80);
        copticChronology24.validate((org.joda.time.ReadablePartial) localDateTime56, intArray80);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime23, intArray80);
        org.joda.time.DateTimeField dateTimeField84 = copticChronology0.clockhourOfHalfday();
        long long88 = copticChronology0.add(5L, (long) 565, 175);
        org.joda.time.DateTimeField dateTimeField89 = copticChronology0.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = copticChronology0.get(readablePeriod90, (long) 727, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573068757L + "'", long9 == 1644573068757L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1737, 6, 4, 35468757]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1737, 6, 4, 35468757]");
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1737, 6, 4, 35468757]");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(copticChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1737, 6, 4, 35468757]");
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 98880L + "'", long88 == 98880L);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test12264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12264");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays(35048859);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property6.setCopy("369");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test12265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12265");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.millisOfDay();
        int int69 = property68.getMinimumValue();
        java.lang.String str70 = property68.getName();
        org.joda.time.LocalDateTime localDateTime71 = property68.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime72 = property68.withMaximumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 809 + "'", int8 == 809);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "millisOfDay" + "'", str70, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test12266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12266");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale5.getDisplayScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale5);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale18.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder23 = builder3.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("528");
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale27.getCountry();
        java.util.Locale.Builder builder30 = builder26.setLocale(locale27);
        java.util.Locale.Builder builder31 = builder26.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder26.setScript("1737-06-04T09:48:47.755+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1737-06-04T09:48:47.755+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "844" + "'", str19, "844");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u8a9e" + "'", str22, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CN" + "'", str29, "CN");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test12267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12267");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str17 = locale12.getDisplayName(locale16);
        java.lang.String str18 = property10.getAsText(locale16);
        org.joda.time.Interval interval19 = property10.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property10.roundFloorCopy();
        int int21 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusYears(406);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withDate(819, 90, 375);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 90 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str14, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (China)" + "'", str17, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test12268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12268");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("686");
        timeZone1.setRawOffset(628);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone1.getOffset(775, 928, 35224677, (int) 'a', 860, 316);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test12269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12269");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, 5431484632041L);
        int int12 = dateTimeZone5.getOffsetFromLocal(1644572683502L);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(1738);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        int int21 = localDateTime19.getMillisOfSecond();
        int int22 = localDateTime19.getSecondOfMinute();
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime19);
        long long25 = dateTimeZone5.convertUTCToLocal(1644572675873L);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = copticChronology26.getDateTimeMillis(0, 859, 54, 538, 767, 16, 36083869);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 538 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5431448632041L + "'", long10 == 5431448632041L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 931 + "'", int21 == 931);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644608675873L + "'", long25 == 1644608675873L);
        org.junit.Assert.assertNotNull(copticChronology26);
    }

    @Test
    public void test12270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12270");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.lang.String str6 = timeZone5.getID();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.TimeZone.setDefault(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean14 = timeZone5.hasSameRules(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int17 = timeZone8.getOffset(1644572872148L);
        int int19 = timeZone8.getOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT+10:00" + "'", str6, "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test12271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12271");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDurationAdded(readableDuration5, (int) ' ');
        int int8 = localDateTime4.getMillisOfSecond();
        java.lang.String str10 = localDateTime4.toString("494");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withHourOfDay(960);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 960 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 976 + "'", int8 == 976);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "494" + "'", str10, "494");
    }

    @Test
    public void test12272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12272");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        boolean boolean21 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        boolean boolean42 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        boolean boolean64 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.hourOfDay();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime(readableInstant73);
        org.joda.time.chrono.CopticChronology copticChronology75 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField76 = copticChronology75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.hourOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDateTime82.toDateTime(readableInstant83);
        boolean boolean85 = dateTime74.isEqual((org.joda.time.ReadableInstant) dateTime84);
        int int86 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean88 = dateTime74.equals((java.lang.Object) 0L);
        boolean boolean89 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime10.getZone();
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(1644572583973L, dateTimeZone90);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime91.plusHours(273);
        org.joda.time.LocalDateTime.Property property94 = localDateTime91.year();
        int int95 = property94.getLeapAmount();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(copticChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test12273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12273");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setRegion("");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder11 = builder7.setExtension('a', "44");
        java.util.Locale.Builder builder12 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder7.setVariant("352");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 352 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12274");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plusDays(49);
        int int68 = localDateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.yearOfCentury();
        java.lang.String str70 = property69.getAsString();
        java.lang.String str71 = property69.getName();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 106 + "'", int8 == 106);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 18 + "'", int68 == 18);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "43" + "'", str70, "43");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "yearOfCentury" + "'", str71, "yearOfCentury");
    }

    @Test
    public void test12275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12275");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffset(0L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = nameProvider10.getName(locale12, "38", "493");
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.getScript();
        java.lang.String str19 = locale16.getExtension('a');
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale16.getDisplayName(locale21);
        java.lang.String str25 = nameProvider10.getName(locale21, "239", "750");
        java.lang.String str26 = dateTimeZone1.getName(81844710L, locale21);
        long long29 = dateTimeZone1.convertLocalToUTC((long) 56, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str22, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-35999944L) + "'", long29 == (-35999944L));
    }

    @Test
    public void test12276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12276");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573069154L + "'", long9 == 1644573069154L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test12277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12277");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        int int14 = strSet10.size();
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        boolean boolean19 = strSet15.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.util.Locale.setDefault(locale25);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale23, locale24, locale25, locale29, locale31, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean41 = strSet10.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap42);
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str49 = locale44.getDisplayName(locale48);
        java.util.Set<java.lang.String> strSet50 = locale44.getUnicodeLocaleAttributes();
        int int51 = strSet50.size();
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet50);
        java.lang.String[] strArray62 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        boolean boolean66 = strSet63.equals((java.lang.Object) locale65);
        strSet63.clear();
        boolean boolean69 = strSet63.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator70 = strSet63.spliterator();
        boolean boolean72 = strSet63.add("638");
        boolean boolean74 = strSet63.add("335");
        java.util.Iterator<java.lang.String> strItor75 = strSet63.iterator();
        java.lang.String str76 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet63);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (China)" + "'", str46, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSpliterator70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strItor75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test12278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12278");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("1737-06-04T09:48:58.281+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1737-06-04t09:48:58.281+10:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12279");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfEra(7);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay(154);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str28 = copticChronology27.toString();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = copticChronology27.add(readablePeriod29, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField33 = copticChronology27.halfdays();
        org.joda.time.DurationField durationField34 = copticChronology27.millis();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology27.millisOfDay();
        org.joda.time.DurationField durationField36 = copticChronology27.centuries();
        org.joda.time.DurationField durationField37 = copticChronology27.months();
        org.joda.time.DurationField durationField38 = copticChronology27.halfdays();
        org.joda.time.DurationField durationField39 = copticChronology27.months();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 946, (org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears(113);
        int int43 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime46.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime46.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property62 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime46.withWeekyear(514);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.hourOfDay();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime(readableInstant73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.yearOfCentury();
        boolean boolean76 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.plusWeeks(814);
        boolean boolean79 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.chrono.CopticChronology copticChronology80 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField81 = copticChronology80.dayOfYear();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.millisOfSecond();
        java.util.Locale locale86 = java.util.Locale.ENGLISH;
        java.lang.String str87 = property85.getAsText(locale86);
        long long88 = property85.remainder();
        org.joda.time.LocalDateTime localDateTime89 = property85.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.withDayOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime89.minusMonths(1);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.LocalDateTime.Property property95 = localDateTime94.yearOfCentury();
        int int96 = localDateTime94.getWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CopticChronology[UTC]" + "'", str28, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(copticChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "241" + "'", str87, "241");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1738 + "'", int96 == 1738);
    }

    @Test
    public void test12280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12280");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology0.add(readablePeriod7, 1136091124375922418L, 100);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = copticChronology0.add(readablePeriod15, 36000004L, 128);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField20 = copticChronology0.hours();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 36000004L + "'", long18 == 36000004L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test12281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12281");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        java.lang.String[] strArray20 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        boolean boolean24 = strSet21.equals((java.lang.Object) locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = property10.getAsText(locale23);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = property10.getAsShortText(locale27);
        int int30 = property10.getMinimumValue();
        java.lang.String str31 = property10.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property10.getFieldType();
        java.lang.String str33 = property10.getAsText();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "37" + "'", str26, "37");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "37" + "'", str29, "37");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "37" + "'", str31, "37");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "37" + "'", str33, "37");
    }

    @Test
    public void test12282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12282");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField3 = copticChronology0.years();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test12283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12283");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.Chronology chronology9 = copticChronology1.withZone(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone5.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(13254255130L, dateTimeZone5);
        boolean boolean13 = dateTimeZone5.isFixed();
        java.util.TimeZone timeZone14 = dateTimeZone5.toTimeZone();
        int int16 = timeZone14.getOffset((long) 71674882);
        boolean boolean17 = timeZone14.useDaylightTime();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test12284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12284");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        boolean boolean40 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int63 = property19.compareTo((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean64 = strSet12.remove((java.lang.Object) property19);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        boolean boolean70 = strSet66.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet71);
        boolean boolean73 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.parse("eng", strMap75);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream77 = languageRangeList76.stream();
        boolean boolean78 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76);
        boolean boolean79 = strSet12.isEmpty();
        int int80 = strSet12.size();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNotNull(languageRangeStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
    }

    @Test
    public void test12285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12285");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getLanguage();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getDisplayScript();
        java.lang.String str20 = locale13.getDisplayVariant(locale16);
        java.lang.String str21 = locale12.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet28 = locale24.getExtensionKeys();
        java.lang.String str29 = locale24.getISO3Language();
        java.lang.String str30 = locale24.toLanguageTag();
        java.util.Locale.setDefault(category0, locale24);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "English (Canada)" + "'", str26, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eng" + "'", str29, "eng");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en-CA" + "'", str30, "en-CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
    }

    @Test
    public void test12286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12286");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = copticChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean9 = dateTimeZone6.isStandardOffset(10L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) 28);
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withHourOfDay(22);
        int int33 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfSecond(283);
        int int36 = localDateTime35.getSecondOfMinute();
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime40.dayOfMonth();
        int int55 = property54.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime57 = property54.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plus(readableDuration58);
        int[] intArray61 = chronology37.get((org.joda.time.ReadablePartial) localDateTime59, 1644572639605L);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.year();
        boolean boolean63 = dateTimeZone13.equals((java.lang.Object) property62);
        java.lang.Class<?> wildcardClass64 = property62.getClass();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 30 + "'", int55 == 30);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1738, 6, 4, 35039605]");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test12287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12287");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12288");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone4.setID("");
        java.util.TimeZone.setDefault(timeZone4);
        boolean boolean8 = copticChronology0.equals((java.lang.Object) timeZone4);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsText(locale15);
        long long17 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMillis(36000000);
        int int23 = localDateTime20.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusYears(527);
        int[] intArray27 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime20, 1644572711763L);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime51);
        int int53 = localDateTime41.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime41.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        int[] intArray64 = localDateTime63.getValues();
        boolean boolean65 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime41.plusSeconds(846);
        int int68 = property38.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusWeeks(493);
        int int71 = localDateTime70.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYearOfEra(63);
        int[] intArray75 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime70, 1644572638284L);
        org.joda.time.DurationField durationField76 = copticChronology0.weekyears();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "527" + "'", str16, "527");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1736 + "'", int23 == 1736);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1738, 6, 4, 35111763]");
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 51 + "'", int53 == 51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1737, 6, 4, 35469527]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 11 + "'", int71 == 11);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1738, 6, 4, 35038284]");
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test12289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12289");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond(283);
        int int21 = localDateTime20.getSecondOfMinute();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime25.dayOfMonth();
        int int40 = property39.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime42 = property39.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plus(readableDuration43);
        int[] intArray46 = chronology22.get((org.joda.time.ReadablePartial) localDateTime44, 1644572639605L);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusMinutes(83);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withPeriodAdded(readablePeriod49, 35184365);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        java.util.TimeZone timeZone57 = dateTimeZone54.toTimeZone();
        long long59 = dateTimeZone54.nextTransition((-1L));
        java.lang.String str61 = dateTimeZone54.getShortName((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.millisOfSecond();
        java.util.Locale.Category category69 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale70.getDisplayName();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str75 = locale70.getDisplayName(locale74);
        java.util.Locale.setDefault(category69, locale70);
        java.lang.String str77 = property68.getAsShortText(locale70);
        java.lang.String str78 = dateTimeZone54.getShortName(1644572644179L, locale70);
        java.lang.String str79 = locale70.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = localDateTime51.toString("1737-06-04T09:49:41.195+10:00", locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 30 + "'", int40 == 30);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1738, 6, 4, 35039605]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:00" + "'", str55, "+10:00");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.FORMAT + "'", category69.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese (China)" + "'", str72, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Chinese (China)" + "'", str75, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "565" + "'", str77, "565");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test12290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12290");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime22.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property38 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.minuteOfHour();
        int int40 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime22.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withSecondOfMinute(43);
        int[] intArray54 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime52, (long) 43);
        copticChronology18.validate((org.joda.time.ReadablePartial) localDateTime22, intArray54);
        org.joda.time.DurationField durationField56 = copticChronology18.centuries();
        org.joda.time.DurationField durationField57 = copticChronology18.hours();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.TimeZone timeZone64 = dateTimeZone61.toTimeZone();
        long long66 = dateTimeZone61.nextTransition((-1L));
        long long68 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone61);
        int[] intArray72 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime70, 1644572736021L);
        java.util.Date date73 = localDateTime70.toDate();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime83 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999031L) + "'", long68 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1738, 6, 9, 35136021]");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Fri Feb 11 19:44:44 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test12291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12291");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setRegion("947");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguage("35098694");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 35098694 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12292");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField12 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573069661L + "'", long9 == 1644573069661L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test12293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12293");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        java.lang.String[] strArray20 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        boolean boolean24 = strSet21.equals((java.lang.Object) locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = property10.getAsText(locale23);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = property10.getAsShortText(locale27);
        int int30 = property10.getMinimumValue();
        org.joda.time.DurationField durationField31 = property10.getLeapDurationField();
        boolean boolean32 = property10.isLeap();
        org.joda.time.Interval interval33 = property10.toInterval();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "37" + "'", str26, "37");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "37" + "'", str29, "37");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
    }

    @Test
    public void test12294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12294");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        int int11 = localDateTime7.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        boolean boolean36 = localDateTime30.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        int int40 = localDateTime7.indexOf(dateTimeFieldType39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime7.era();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.util.TimeZone timeZone46 = dateTimeZone43.toTimeZone();
        long long48 = dateTimeZone43.nextTransition((-1L));
        long long51 = dateTimeZone43.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime53 = localDateTime7.toDateTime(dateTimeZone43);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField55 = copticChronology54.hours();
        int int56 = copticChronology54.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology54.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology54.minuteOfDay();
        org.joda.time.DurationField durationField59 = copticChronology54.weeks();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology54.era();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology54.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology54.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, (org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusMinutes(107);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plusMinutes(1);
        int int68 = localDateTime63.getDayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35469726]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-35999999L) + "'", long51 == (-35999999L));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 154 + "'", int68 == 154);
    }

    @Test
    public void test12295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12295");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale6.getDisplayVariant();
        java.lang.String str11 = locale6.getDisplayScript();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getISO3Country();
        int int22 = property18.getMaximumTextLength(locale19);
        org.joda.time.Interval interval23 = property18.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        boolean boolean44 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        boolean boolean65 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology67 = dateTime33.getChronology();
        int int68 = property18.getDifference((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale.Category category69 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale70.getDisplayName();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str75 = locale70.getDisplayName(locale74);
        java.util.Locale.setDefault(category69, locale70);
        java.util.Set<java.lang.Character> charSet77 = locale70.getExtensionKeys();
        java.lang.String str78 = property18.getAsText(locale70);
        java.util.Locale.setDefault(category0, locale70);
        java.util.Locale locale80 = java.util.Locale.getDefault(category0);
        java.lang.String str81 = locale80.getDisplayScript();
        java.lang.String str82 = locale80.getVariant();
        java.util.Set<java.lang.Character> charSet83 = locale80.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2038738 + "'", int68 == 2038738);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.FORMAT + "'", category69.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese (China)" + "'", str72, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Chinese (China)" + "'", str75, "Chinese (China)");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "10" + "'", str78, "10");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(charSet83);
    }

    @Test
    public void test12296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12296");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfHalfday();
        java.lang.String str14 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusYears((int) (short) 0);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology24.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        int[] intArray36 = localDateTime35.getValues();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        int[] intArray47 = localDateTime46.getValues();
        copticChronology24.validate((org.joda.time.ReadablePartial) localDateTime38, intArray47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology57.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        int[] intArray69 = localDateTime68.getValues();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology72 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.hourOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusYears((int) (short) -1);
        int[] intArray80 = localDateTime79.getValues();
        copticChronology57.validate((org.joda.time.ReadablePartial) localDateTime71, intArray80);
        copticChronology24.validate((org.joda.time.ReadablePartial) localDateTime56, intArray80);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime23, intArray80);
        org.joda.time.DateTimeField dateTimeField84 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField86 = copticChronology0.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573069810L + "'", long9 == 1644573069810L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1737, 6, 4, 35469810]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1737, 6, 4, 35469810]");
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1737, 6, 4, 35469810]");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(copticChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1737, 6, 4, 35469810]");
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test12297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12297");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        long long26 = dateTimeZone19.convertLocalToUTC(1644572701362L, false);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMonths(103981);
        int int46 = localDateTime43.getWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.DateTimeField dateTimeField50 = copticChronology47.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        int[] intArray59 = localDateTime58.getValues();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusYears((int) (short) -1);
        int[] intArray70 = localDateTime69.getValues();
        copticChronology47.validate((org.joda.time.ReadablePartial) localDateTime61, intArray70);
        int int72 = localDateTime61.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime61.minusDays(782);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusWeeks(49);
        int int77 = localDateTime74.getYear();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.weekyear();
        long long81 = copticChronology27.set((org.joda.time.ReadablePartial) localDateTime78, (long) 35);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572701362L + "'", long26 == 1644572701362L);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1738 + "'", int46 == 1738);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1737, 6, 4, 35469849]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1737, 6, 4, 35469849]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1735 + "'", int77 == 1735);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1545126669849L + "'", long81 == 1545126669849L);
    }

    @Test
    public void test12298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12298");
        java.util.Locale locale3 = new java.util.Locale("545", "February", "35021141");
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale6 = null;
        java.lang.String str9 = nameProvider5.getShortName(locale6, "976", "493");
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale11.getDisplayCountry(locale14);
        java.lang.String str18 = nameProvider5.getShortName(locale11, "152", "878");
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property37 = localDateTime21.millisOfDay();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = property37.getAsShortText(locale38);
        java.lang.String str44 = nameProvider5.getShortName(locale38, "chinois (Chine)", "38");
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String[] strArray55 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        java.util.Locale locale58 = java.util.Locale.CANADA;
        boolean boolean59 = strSet56.equals((java.lang.Object) locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        java.lang.String str61 = locale45.getDisplayVariant(locale58);
        java.lang.String str64 = nameProvider5.getShortName(locale58, "35033315", "525");
        org.joda.time.tz.NameProvider nameProvider65 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider65);
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.util.Locale.setDefault(locale67);
        java.lang.String str73 = nameProvider65.getName(locale67, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField75 = copticChronology74.dayOfYear();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.millisOfSecond();
        java.util.Locale.Category category80 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale81 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale81.getDisplayName();
        java.util.Locale locale85 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str86 = locale81.getDisplayName(locale85);
        java.util.Locale.setDefault(category80, locale81);
        java.lang.String str88 = property79.getAsShortText(locale81);
        java.lang.String str89 = locale67.getDisplayLanguage(locale81);
        java.lang.String str91 = locale67.getExtension('a');
        java.lang.String str92 = locale67.getCountry();
        java.lang.String str95 = nameProvider5.getName(locale67, "1737-06-04T09:44:05.179+10:00", "399");
        java.lang.String str96 = locale3.getDisplayName(locale67);
        org.junit.Assert.assertEquals(locale3.toString(), "545_FEBRUARY_35021141");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "545" + "'", str4, "545");
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (Canada)" + "'", str40, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "35469886" + "'", str41, "35469886");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(nameProvider65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English (Canada)" + "'", str69, "English (Canada)");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.FORMAT + "'", category80.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Chinese (China)" + "'", str83, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Chinese (China)" + "'", str86, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "886" + "'", str88, "886");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u82f1\u6587" + "'", str89, "\u82f1\u6587");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "CA" + "'", str92, "CA");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "545 (FEBRUARY,35021141)" + "'", str96, "545 (FEBRUARY,35021141)");
    }

    @Test
    public void test12299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12299");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) 100);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        int int9 = property5.getMaximumShortTextLength(locale8);
        java.util.Locale locale13 = new java.util.Locale("974", "787", "485");
        java.lang.String str14 = locale13.getCountry();
        java.lang.String str15 = property5.getAsShortText(locale13);
        boolean boolean16 = locale13.hasExtensions();
        java.lang.String str17 = locale13.getCountry();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals(locale13.toString(), "974_787_485");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "787" + "'", str14, "787");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "921" + "'", str15, "921");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "787" + "'", str17, "787");
    }

    @Test
    public void test12300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12300");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime2.getFieldTypes();
        int int17 = localDateTime2.getYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.withCenturyOfEra(150);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str27 = nameProvider22.getName(locale24, "38", "493");
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.getScript();
        java.lang.String str31 = locale28.getExtension('a');
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale28.getDisplayName(locale33);
        java.lang.String str37 = nameProvider22.getName(locale33, "239", "750");
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("119");
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale40.getScript();
        java.lang.String str42 = locale40.getISO3Country();
        boolean boolean43 = locale40.hasExtensions();
        java.lang.String str44 = locale40.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.lang.String str47 = locale40.getDisplayLanguage(locale45);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.millisOfSecond();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = property53.getAsText(locale54);
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.lang.String str58 = locale54.getDisplayVariant(locale56);
        java.util.Locale locale61 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str62 = locale56.getDisplayName(locale61);
        java.lang.String str63 = locale45.getDisplayVariant(locale61);
        java.lang.String str64 = locale39.getDisplayLanguage(locale45);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.hourOfDay();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology73 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime67.withFields((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime67.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime67.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property83 = localDateTime67.millisOfDay();
        java.util.Locale locale84 = java.util.Locale.CANADA;
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale84.getDisplayName(locale85);
        java.lang.String str87 = property83.getAsShortText(locale84);
        java.lang.String str88 = locale84.getDisplayVariant();
        java.lang.String str89 = locale84.getDisplayName();
        java.lang.String str90 = locale45.getDisplayLanguage(locale84);
        java.lang.String str93 = nameProvider22.getName(locale84, "104", "1737-06-04T09:45:24.184Z");
        java.lang.String str94 = locale84.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = localDateTime19.toString("1738-06-04T09:47:38.587", locale84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1738 + "'", int17 == 1738);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "14938-06-04T09:51:09.936" + "'", str20, "14938-06-04T09:51:09.936");
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str34, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "kor" + "'", str44, "kor");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u671d\u9c9c\u6587" + "'", str47, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "936" + "'", str55, "936");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals(locale61.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(copticChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "English (Canada)" + "'", str86, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "35469936" + "'", str87, "35469936");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "English (Canada)" + "'", str89, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Chinese" + "'", str90, "Chinese");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test12301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12301");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = localDateTime11.toString(dateTimeFormatter12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMinutes(904);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minus(readableDuration16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withCenturyOfEra(975);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35469966]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1737-06-04T10:00:00.000" + "'", str13, "1737-06-04T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12302");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond(4);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plus(readablePeriod15);
        int[] intArray18 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime16, (long) 997);
        org.joda.time.DurationField durationField19 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1686, 4, 23, 997]");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test12303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12303");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        int int16 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMonths(1743);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.year();
        org.joda.time.LocalDateTime localDateTime20 = property19.getLocalDateTime();
        java.lang.String str21 = localDateTime20.toString();
        int int22 = localDateTime20.getMillisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1738 + "'", int16 == 1738);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1872-07-04T09:51:10.004" + "'", str21, "1872-07-04T09:51:10.004");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test12304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12304");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        boolean boolean14 = copticChronology0.equals((java.lang.Object) localDateTime13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.centuryOfEra();
        java.lang.String str16 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.hourOfHalfday();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime20.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime20.plus(readablePeriod36);
        int int38 = localDateTime37.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusMonths(3);
        int int41 = localDateTime37.getYear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.DurationField durationField45 = copticChronology43.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        long long52 = copticChronology43.set((org.joda.time.ReadablePartial) localDateTime48, (long) 100);
        org.joda.time.DateTimeField dateTimeField53 = copticChronology43.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        boolean boolean57 = copticChronology43.equals((java.lang.Object) localDateTime56);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology66 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime60.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str77 = dateTimeZone76.getID();
        boolean boolean79 = dateTimeZone76.isStandardOffset(10L);
        java.util.TimeZone timeZone80 = dateTimeZone76.toTimeZone();
        org.joda.time.DateTime dateTime81 = localDateTime73.toDateTime(dateTimeZone76);
        int[] intArray83 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime73, 0L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime37, intArray83);
        org.joda.time.DateTimeField dateTimeField85 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573070021L + "'", long9 == 1644573070021L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CopticChronology[UTC]" + "'", str16, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21 + "'", int38 == 21);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1738 + "'", int41 == 1738);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1644573070021L + "'", long52 == 1644573070021L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(copticChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test12305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12305");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField15 = copticChronology0.hours();
        org.joda.time.DurationField durationField16 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test12306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12306");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str8 = copticChronology7.toString();
        long long12 = copticChronology7.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology7.yearOfEra();
        org.joda.time.DurationField durationField15 = copticChronology7.halfdays();
        org.joda.time.DurationField durationField16 = copticChronology7.millis();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology7.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(610, 451, 123, 390, 335, 776, 675, (org.joda.time.Chronology) copticChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 390 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1136091124375922418L + "'", long12 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test12307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12307");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusMonths((int) (byte) 0);
        int int15 = localDateTime14.size();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.era();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.era();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.millisOfSecond();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property23.getAsText(locale24);
        java.lang.String str26 = property23.getAsText();
        long long27 = property23.remainder();
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder28.setExtension('x', "709");
        java.util.Locale.Builder builder33 = builder28.setLanguage("CAN");
        java.util.Locale.Builder builder34 = builder28.clear();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale35.getExtension('u');
        java.util.Locale.Builder builder39 = builder28.setLocale(locale35);
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale35.getDisplayScript(locale40);
        java.lang.String str42 = locale35.getVariant();
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        boolean boolean66 = localDateTime60.isAfter((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.Chronology chronology67 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.year();
        org.joda.time.LocalDateTime localDateTime69 = property68.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField70 = property68.getDurationField();
        org.joda.time.tz.NameProvider nameProvider72 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider72);
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.lang.String str76 = locale74.getDisplayName(locale75);
        java.util.Locale.setDefault(locale74);
        java.lang.String str80 = nameProvider72.getName(locale74, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        java.lang.String str81 = locale74.getDisplayVariant();
        org.joda.time.LocalDateTime localDateTime82 = property68.setCopy("782", locale74);
        java.lang.String str83 = locale35.getDisplayName(locale74);
        java.lang.String str84 = property23.getAsShortText(locale35);
        java.lang.String str85 = property17.getAsShortText(locale35);
        java.util.Locale.Builder builder86 = builder4.setLocale(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder88 = builder86.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(nameProvider72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English (Canada)" + "'", str76, "English (Canada)");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Chinese (China)" + "'", str83, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "120" + "'", str84, "120");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "AM" + "'", str85, "AM");
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test12308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12308");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekyear(700);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusMillis(593);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(564);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusDays(696);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1738 + "'", int14 == 1738);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test12309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12309");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        timeZone5.setRawOffset(154);
        int int11 = timeZone5.getRawOffset();
        boolean boolean12 = timeZone5.observesDaylightTime();
        int int13 = timeZone5.getRawOffset();
        boolean boolean14 = timeZone1.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        int int17 = timeZone5.getOffset(1644572731025L);
        int int18 = timeZone5.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 154 + "'", int11 == 154);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 154 + "'", int13 == 154);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 154 + "'", int17 == 154);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test12310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12310");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(43);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withDurationAdded(readableDuration11, 999);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusMillis((int) 'x');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusDays(122);
        int int19 = localDateTime15.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusSeconds(35438673);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test12311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12311");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test12312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12312");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572639204L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test12313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12313");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        boolean boolean27 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        boolean boolean48 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.millisOfSecond();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = property55.getAsText(locale56);
        long long58 = property55.remainder();
        org.joda.time.LocalDateTime localDateTime59 = property55.roundHalfFloorCopy();
        java.lang.String str60 = property55.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property55.getFieldType();
        boolean boolean62 = dateTime37.isSupported(dateTimeFieldType61);
        int int63 = property6.getDifference((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime37.getZone();
        long long68 = dateTimeZone64.convertLocalToUTC((long) 17, true, 5431484653269L);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str71 = dateTimeZone70.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        java.util.TimeZone timeZone73 = dateTimeZone70.toTimeZone();
        java.util.TimeZone timeZone74 = dateTimeZone70.toTimeZone();
        int int76 = dateTimeZone70.getOffset((-6108584L));
        int int78 = dateTimeZone70.getOffsetFromLocal((long) 250);
        long long80 = dateTimeZone64.getMillisKeepLocal(dateTimeZone70, 5431484752986L);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        int[] intArray82 = localDateTime81.getValues();
        org.joda.time.DurationFieldType durationFieldType83 = null;
        boolean boolean84 = localDateTime81.isSupported(durationFieldType83);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "241" + "'", str57, "241");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[millisOfSecond]" + "'", str60, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 149733239 + "'", int63 == 149733239);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999983L) + "'", long68 == (-35999983L));
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 36000000 + "'", int76 == 36000000);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 5431484752986L + "'", long80 == 5431484752986L);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[2022, 2, 11, 71470243]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test12314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12314");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder4.setExtension('u', "35026152");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clearExtensions();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str14 = copticChronology13.toString();
        org.joda.time.DurationField durationField15 = copticChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.clockhourOfHalfday();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getISO3Language();
        boolean boolean19 = copticChronology13.equals((java.lang.Object) locale17);
        java.lang.String str20 = locale17.getCountry();
        java.lang.String str21 = locale17.getISO3Language();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("709");
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Locale locale27 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale23.getDisplayCountry(locale27);
        java.lang.String str30 = locale17.getDisplayScript(locale23);
        java.lang.String str31 = locale17.getLanguage();
        java.util.Locale.Builder builder32 = builder10.setLocale(locale17);
        java.util.Locale.Builder builder33 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder33.setVariant("466");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 466 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "jpn" + "'", str18, "jpn");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jpn" + "'", str21, "jpn");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals(locale27.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ja" + "'", str31, "ja");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test12315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12315");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setRegion("");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder9 = builder7.setRegion("450");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setScript("142");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 142 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12316");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.DurationField durationField16 = copticChronology14.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test12317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12317");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.lang.String str8 = property5.getAsText();
        java.lang.String str9 = property5.toString();
        int int10 = property5.getMaximumValueOverall();
        org.joda.time.DurationField durationField11 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "353" + "'", str7, "353");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "353" + "'", str8, "353");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[millisOfSecond]" + "'", str9, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 999 + "'", int10 == 999);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test12318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12318");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsText(locale10);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale10.getDisplayVariant(locale12);
        java.util.Locale locale17 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str18 = locale12.getDisplayName(locale17);
        java.util.Set<java.lang.String> strSet19 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale12.getDisplayScript();
        java.lang.String str21 = locale2.getDisplayLanguage(locale12);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int29 = localDateTime28.getDayOfMonth();
        int int30 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusWeeks(102);
        java.util.Locale locale35 = new java.util.Locale("GMT");
        java.lang.String str36 = localDateTime28.toString("+44:00", locale35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime28.dayOfWeek();
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder38.setExtension('x', "811");
        java.util.Locale.Builder builder42 = builder38.clear();
        java.util.Locale.Builder builder43 = builder38.clearExtensions();
        java.util.Locale.Builder builder44 = builder38.clear();
        java.util.Locale.Builder builder45 = builder44.clearExtensions();
        java.util.Locale.Builder builder47 = builder45.setRegion("947");
        java.util.Locale locale48 = builder47.build();
        java.lang.String str49 = property37.getAsShortText(locale48);
        java.lang.String str50 = locale12.getDisplayLanguage(locale48);
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale51.getDisplayScript();
        boolean boolean53 = locale51.hasExtensions();
        java.lang.String str54 = locale12.getDisplayLanguage(locale51);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "366" + "'", str11, "366");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u6cd5\u6587" + "'", str21, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals(locale35.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+44:00" + "'", str36, "+44:00");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "_947");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Fri" + "'", str49, "Fri");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese" + "'", str50, "Chinese");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese" + "'", str54, "Chinese");
    }

    @Test
    public void test12319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12319");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        int int23 = property22.getMinimumValue();
        int int24 = property22.get();
        boolean boolean25 = property22.isLeap();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test12320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12320");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.minusMillis(734);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime63.withWeekyear(748);
        int int72 = localDateTime63.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime63.plusYears(0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusHours(808);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 407 + "'", int8 == 407);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test12321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12321");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = property8.getAsText(locale9);
        org.joda.time.Interval interval11 = property8.toInterval();
        org.joda.time.LocalDateTime localDateTime12 = property8.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str14 = copticChronology13.toString();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = copticChronology13.add(readablePeriod15, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField19 = copticChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology13.secondOfDay();
        boolean boolean22 = localDateTime12.equals((java.lang.Object) dateTimeField21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMaximumValue();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = property32.getAsText(locale33);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale33.getDisplayName(locale36);
        java.lang.String str42 = locale33.getDisplayName();
        java.lang.String str43 = locale26.getDisplayName(locale33);
        java.lang.String str44 = locale26.getDisplayVariant();
        java.lang.String str45 = locale26.getDisplayScript();
        java.lang.String str46 = locale26.getCountry();
        java.lang.String str47 = property23.getAsShortText(locale26);
        java.lang.String str48 = locale26.getDisplayLanguage();
        java.lang.String str51 = nameProvider0.getName(locale26, "1738-06-04T09:48:17.783", "37542-06-04T09:46:36.565");
        java.util.Set<java.lang.String> strSet52 = locale26.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "502" + "'", str10, "502");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "503" + "'", str34, "503");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English (Canada)" + "'", str37, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English" + "'", str42, "English");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Italian" + "'", str43, "Italian");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "38" + "'", str47, "38");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Italian" + "'", str48, "Italian");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strSet52);
    }

    @Test
    public void test12322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12322");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("35395630");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=35395630");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12323");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str10 = copticChronology9.toString();
        long long15 = copticChronology9.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone16 = copticChronology9.getZone();
        int int18 = dateTimeZone16.getOffset(1644572675517L);
        boolean boolean19 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology20 = copticChronology0.withZone(dateTimeZone16);
        java.lang.String str22 = dateTimeZone16.getNameKey((long) 35168173);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-50149497600000L) + "'", long15 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
    }

    @Test
    public void test12324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12324");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("163", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=163");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12325");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        int int28 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime2.plusMonths(915);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks(67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime30.toString(dateTimeFormatter33);
        int int35 = localDateTime30.size();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1808-11-04T09:51:10.613" + "'", str34, "1808-11-04T09:51:10.613");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
    }

    @Test
    public void test12326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12326");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = nameProvider0.getName(locale2, "38", "493");
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str9 = locale6.getExtension('a');
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale6.getDisplayName(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "239", "750");
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("119");
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getScript();
        java.lang.String str20 = locale18.getISO3Country();
        boolean boolean21 = locale18.hasExtensions();
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale18.getDisplayLanguage(locale23);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale32.getDisplayVariant(locale34);
        java.util.Locale locale39 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str40 = locale34.getDisplayName(locale39);
        java.lang.String str41 = locale23.getDisplayVariant(locale39);
        java.lang.String str42 = locale17.getDisplayLanguage(locale23);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property61 = localDateTime45.millisOfDay();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = property61.getAsShortText(locale62);
        java.lang.String str66 = locale62.getDisplayVariant();
        java.lang.String str67 = locale62.getDisplayName();
        java.lang.String str68 = locale23.getDisplayLanguage(locale62);
        java.lang.String str71 = nameProvider0.getName(locale62, "104", "1737-06-04T09:45:24.184Z");
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("1737-06-04T09:44:24.302+10:00");
        java.lang.String str74 = locale62.getDisplayScript(locale73);
        java.lang.String str76 = locale73.getUnicodeLocaleType("36");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KOR" + "'", str20, "KOR");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u671d\u9c9c\u6587" + "'", str25, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "642" + "'", str33, "642");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale39.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English (Canada)" + "'", str64, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "35470642" + "'", str65, "35470642");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (Canada)" + "'", str67, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese" + "'", str68, "Chinese");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test12327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12327");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(102);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek(660);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 660 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test12328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12328");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plusDays(49);
        int int68 = localDateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.minuteOfHour();
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.secondOfMinute();
        org.joda.time.LocalDateTime.Property property71 = localDateTime67.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.minusMonths(50);
        int int74 = localDateTime67.getEra();
        java.lang.String str76 = localDateTime67.toString("722");
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 684 + "'", int8 == 684);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 18 + "'", int68 == 18);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "722" + "'", str76, "722");
    }

    @Test
    public void test12329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12329");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minus(readableDuration21);
        int int23 = localDateTime17.getEra();
        int int24 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusHours(919);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12330");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(113);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusYears(884);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime26.plusSeconds((int) 'x');
        int int42 = localDateTime26.getMillisOfSecond();
        int int43 = localDateTime26.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.plusDays(375);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.minusWeeks(0);
        boolean boolean48 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        boolean boolean49 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime16.plusMonths(428);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str53 = copticChronology52.toString();
        org.joda.time.DurationField durationField54 = copticChronology52.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        long long61 = copticChronology52.set((org.joda.time.ReadablePartial) localDateTime57, (long) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.minusMinutes(10);
        int int64 = localDateTime63.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withPeriodAdded(readablePeriod65, 999);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.minusDays(580);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.withPeriodAdded(readablePeriod74, 207);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property79.getFieldType();
        boolean boolean81 = localDateTime51.isSupported(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 741 + "'", int42 == 741);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "CopticChronology[UTC]" + "'", str53, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1644573070741L + "'", long61 == 1644573070741L);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 38 + "'", int64 == 38);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test12331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12331");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getLanguage();
        java.lang.String str3 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko" + "'", str2, "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test12332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12332");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property19.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfEvenCopy();
        org.joda.time.DurationField durationField24 = property19.getRangeDurationField();
        org.joda.time.Interval interval25 = property19.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property19.getFieldType();
        int int27 = localDateTime11.get(dateTimeFieldType26);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str29 = copticChronology28.toString();
        org.joda.time.DurationField durationField30 = copticChronology28.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        long long37 = copticChronology28.set((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.minusMinutes(10);
        int int40 = localDateTime39.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withPeriodAdded(readablePeriod41, 999);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.minusDays(580);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withPeriodAdded(readablePeriod50, 207);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology64 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.withFields((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime58.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime58.plusSeconds((int) 'x');
        int int74 = localDateTime58.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property75 = localDateTime58.era();
        org.joda.time.LocalDateTime.Property property76 = localDateTime58.yearOfEra();
        int int77 = property55.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime58.minusMillis(141);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime58.withYearOfEra(238);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime58.minusMinutes(957);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime11.withMillisOfDay(870);
        int int87 = localDateTime11.getMinuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573070819L + "'", long9 == 1644573070819L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 819 + "'", int27 == 819);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644573070819L + "'", long37 == 1644573070819L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 38 + "'", int40 == 38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(copticChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 819 + "'", int74 == 819);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 41 + "'", int87 == 41);
    }

    @Test
    public void test12333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12333");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond(283);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond(422);
        int int23 = localDateTime20.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusHours(943);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plusYears(239);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1737 + "'", int23 == 1737);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test12334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12334");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusMonths(755);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = localDateTime30.getValue(636);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 636");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test12335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12335");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str18 = copticChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute(43);
        int[] intArray28 = copticChronology17.get((org.joda.time.ReadablePartial) localDateTime26, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime12, intArray28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundFloorCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573070887L + "'", long9 == 1644573070887L);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CopticChronology[UTC]" + "'", str18, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test12336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12336");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property16.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusMillis(319);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime23.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withWeekyear(923);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMinutes(29);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test12337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12337");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 579);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        int int9 = dateTimeZone6.getOffset((long) 404);
        java.util.TimeZone timeZone10 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime3.toDateTime(dateTimeZone6);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("709");
        java.lang.String str15 = locale14.getISO3Country();
        java.util.Locale locale18 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale14.getDisplayCountry(locale18);
        java.lang.String str21 = dateTimeZone6.getName((long) 93, locale14);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.lang.String str28 = locale25.getDisplayScript();
        java.lang.String str29 = locale22.getDisplayVariant(locale25);
        java.lang.String str31 = locale25.getExtension('a');
        java.lang.String str32 = locale14.getDisplayName(locale25);
        java.lang.String str33 = locale0.getDisplayName(locale14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale18.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en" + "'", str23, "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "English (Canada)" + "'", str26, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "French" + "'", str33, "French");
    }

    @Test
    public void test12338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12338");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        boolean boolean5 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        int int7 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test12339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12339");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekyear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale9.getExtension('u');
        java.lang.String str13 = property8.getAsShortText(locale9);
        java.lang.String str14 = locale9.getDisplayVariant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1738" + "'", str13, "1738");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test12340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12340");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("fra");
        java.util.TimeZone.setDefault(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test12341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12341");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("476");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setExtension('#', "662");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12342");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        long long8 = dateTimeZone6.convertUTCToLocal(38L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str10 = localDateTime9.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 38L + "'", long8 == 38L);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:51:11.044" + "'", str10, "2022-02-11T09:51:11.044");
    }

    @Test
    public void test12343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12343");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale7.getDisplayVariant(locale9);
        java.util.Locale locale14 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str15 = locale9.getDisplayName(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getDisplayName();
        java.lang.String str20 = nameProvider0.getName(locale14, "917", "965");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = locale14.getUnicodeLocaleType("715");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 715");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "61" + "'", str8, "61");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale14.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str17, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test12344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12344");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField6 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test12345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12345");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField3 = copticChronology0.days();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 884);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test12346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12346");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale.Builder builder9 = builder7.setRegion("566");
        java.util.Locale.Builder builder11 = builder7.addUnicodeLocaleAttribute("159");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test12347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12347");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        int int8 = localDateTime6.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusWeeks(102);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(0);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime15.getFieldTypes();
        int int30 = localDateTime15.getYear();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.year();
        int int34 = property33.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property33.getFieldType();
        boolean boolean36 = localDateTime15.isSupported(dateTimeFieldType35);
        int int37 = localDateTime12.get(dateTimeFieldType35);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str47 = copticChronology46.toString();
        org.joda.time.DurationField durationField48 = copticChronology46.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        long long55 = copticChronology46.set((org.joda.time.ReadablePartial) localDateTime51, (long) 100);
        org.joda.time.DurationField durationField56 = copticChronology46.hours();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology46.year();
        boolean boolean59 = localDateTime45.equals((java.lang.Object) copticChronology46);
        long long65 = copticChronology46.getDateTimeMillis((long) '4', 22, 44, 4, 710);
        org.joda.time.DateTimeZone dateTimeZone66 = copticChronology46.getZone();
        long long68 = dateTimeZone66.convertUTCToLocal(1794735862697L);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone66.isLocalDateTimeGap(localDateTime69);
        org.joda.time.DateTime dateTime71 = localDateTime12.toDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime12.plusMinutes(940);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1738 + "'", int30 == 1738);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-292275054) + "'", int34 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2020 + "'", int37 == 2020);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CopticChronology[UTC]" + "'", str47, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1644573071110L + "'", long55 == 1644573071110L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 81844710L + "'", long65 == 81844710L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1794735862697L + "'", long68 == 1794735862697L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test12348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12348");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone1.setRawOffset(799);
        timeZone1.setRawOffset(0);
        int int7 = timeZone1.getOffset((long) 747);
        boolean boolean8 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12349");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        int int24 = property23.get();
        int int25 = property23.getMaximumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 257 + "'", int18 == 257);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 154 + "'", int24 == 154);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 365 + "'", int25 == 365);
    }

    @Test
    public void test12350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12350");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology5.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology5.add(readablePeriod16, (long) 922, 181);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology5.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 922L + "'", long19 == 922L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test12351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12351");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekOfWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime9.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property25 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property26 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.withMillisOfDay(375);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime9.withMillisOfDay(778);
        long long32 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime30, 1644572974706L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644537600778L + "'", long32 == 1644537600778L);
    }

    @Test
    public void test12352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12352");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = copticChronology0.getDateTimeMillis(143, 594, 577, 35307704, 435, 1743, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35307704 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test12353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12353");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withHourOfDay(22);
        int int29 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withMillisOfSecond(283);
        int int32 = localDateTime31.getSecondOfMinute();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.Chronology chronology35 = copticChronology1.withZone(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(1644572717259L, dateTimeZone34);
        long long39 = dateTimeZone34.convertLocalToUTC((long) 681, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone34, 882);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 882");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 681L + "'", long39 == 681L);
    }

    @Test
    public void test12354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12354");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property16.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(656);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYearOfEra(249);
        int int28 = localDateTime21.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
    }

    @Test
    public void test12355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12355");
        java.util.Locale locale2 = new java.util.Locale("1738-06-04T09:49:19.078", "324");
        org.junit.Assert.assertEquals(locale2.toString(), "1738-06-04t09:49:19.078_324");
    }

    @Test
    public void test12356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12356");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime12.toString(dateTimeFormatter18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withDurationAdded(readableDuration20, 799);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        int int25 = localDateTime22.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusDays(454);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1738-06-04T09:51:11.410" + "'", str19, "1738-06-04T09:51:11.410");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 154 + "'", int25 == 154);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test12357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setRegion("");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder9 = builder7.setLanguage("eng");
        java.util.Locale locale10 = builder9.build();
        java.lang.String str11 = locale10.getDisplayScript();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "eng__#x-709");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test12358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12358");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology5.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology5.add(readablePeriod16, (long) 922, 181);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology5.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = copticChronology5.weeks();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology5.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 922L + "'", long19 == 922L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test12359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12359");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone1);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale8 = locale6.stripExtensions();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = dateTimeZone1.getShortName(1644572654500L, locale6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.toString();
        boolean boolean17 = dateTimeZone12.isStandardOffset((long) 213);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        int int22 = localDateTime21.getDayOfWeek();
        boolean boolean23 = dateTimeZone12.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, 0L);
        java.lang.String str27 = dateTimeZone1.getShortName((long) 335);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str29 = copticChronology28.toString();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = copticChronology28.add(readablePeriod30, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField34 = copticChronology28.halfdays();
        org.joda.time.DurationField durationField35 = copticChronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology28.millisOfDay();
        org.joda.time.DurationField durationField37 = copticChronology28.halfdays();
        org.joda.time.DateTimeZone dateTimeZone38 = copticChronology28.getZone();
        long long40 = dateTimeZone1.getMillisKeepLocal(dateTimeZone38, 1644572923989L);
        long long43 = dateTimeZone38.convertLocalToUTC((long) 927, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-36000000L) + "'", long25 == (-36000000L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572923989L + "'", long40 == 1644572923989L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 927L + "'", long43 == 927L);
    }

    @Test
    public void test12360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12360");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology3);
        org.joda.time.Chronology chronology5 = copticChronology3.withUTC();
        java.lang.String str6 = copticChronology3.toString();
        org.joda.time.DurationField durationField7 = copticChronology3.seconds();
        java.lang.String str8 = copticChronology3.toString();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = copticChronology9.hours();
        int int11 = copticChronology9.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology17 = copticChronology9.withZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone13.isLocalDateTimeGap(localDateTime18);
        int int21 = dateTimeZone13.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfSecond();
        int[] intArray25 = copticChronology3.get((org.joda.time.ReadablePartial) localDateTime22, 1644572636078L);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology3.secondOfDay();
        org.joda.time.DurationField durationField27 = copticChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology3.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[+01:03]" + "'", str6, "CopticChronology[+01:03]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+01:03]" + "'", str8, "CopticChronology[+01:03]");
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1738, 6, 4, 38816078]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test12361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12361");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        boolean boolean43 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        boolean boolean64 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int66 = property22.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int67 = property16.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DurationField durationField68 = property16.getLeapDurationField();
        long long69 = property16.remainder();
        java.util.Locale locale70 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.util.Locale.Category category72 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale73.getDisplayName();
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str78 = locale73.getDisplayName(locale77);
        java.util.Locale.setDefault(category72, locale73);
        java.util.Locale locale80 = java.util.Locale.getDefault(category72);
        java.lang.String str81 = locale70.getDisplayLanguage(locale80);
        int int82 = property16.getMaximumShortTextLength(locale80);
        java.lang.String str83 = locale80.getISO3Language();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 103981 + "'", int67 == 103981);
        org.junit.Assert.assertNull(durationField68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 35471503L + "'", long69 == 35471503L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.FORMAT + "'", category72.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Chinese (China)" + "'", str75, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Chinese (China)" + "'", str78, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u6587" + "'", str81, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zho" + "'", str83, "zho");
    }

    @Test
    public void test12362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12362");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str5 = timeZone3.getID();
        int int6 = timeZone3.getRawOffset();
        java.time.ZoneId zoneId7 = timeZone3.toZoneId();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone9.setID("");
        int int13 = timeZone9.getOffset(1644572672473L);
        int int14 = timeZone9.getRawOffset();
        int int15 = timeZone9.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 126, dateTimeZone18);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone.setDefault(timeZone23);
        boolean boolean26 = timeZone9.hasSameRules(timeZone23);
        boolean boolean27 = timeZone3.hasSameRules(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test12363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12363");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays(580);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 207);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(701);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(326);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDayOfYear(945);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 945 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573071562L + "'", long9 == 1644573071562L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test12364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12364");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.Interval interval8 = property7.toInterval();
        java.lang.String str9 = property7.getAsShortText();
        int int10 = property7.get();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 22);
        long long17 = dateTimeZone12.adjustOffset(1152845405211956L, false);
        boolean boolean19 = dateTimeZone12.isStandardOffset(0L);
        boolean boolean20 = property7.equals((java.lang.Object) 0L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "49" + "'", str9, "49");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 49 + "'", int10 == 49);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1152845405211956L + "'", long17 == 1152845405211956L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12365");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withDayOfYear(191);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime20.toString(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1738-07-11T09:51:11.593" + "'", str22, "1738-07-11T09:51:11.593");
    }

    @Test
    public void test12366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12366");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readableDuration3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        java.util.Locale locale10 = new java.util.Locale("China", "817", "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        org.joda.time.DurationField durationField13 = copticChronology11.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        long long20 = copticChronology11.set((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DurationField durationField21 = copticChronology11.hours();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology11.secondOfDay();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        boolean boolean25 = copticChronology11.equals((java.lang.Object) locale24);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale32.getDisplayVariant(locale34);
        java.util.Locale locale39 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str40 = locale34.getDisplayName(locale39);
        java.lang.String str41 = locale24.getDisplayName(locale34);
        java.lang.String str42 = locale10.getDisplayLanguage(locale24);
        java.lang.String str43 = locale10.getDisplayName();
        java.lang.String str44 = property5.getAsText(locale10);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644573071612L + "'", long20 == 1644573071612L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "612" + "'", str33, "612");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale39.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587" + "'", str41, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "china" + "'", str42, "china");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4)" + "'", str43, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "154" + "'", str44, "154");
    }

    @Test
    public void test12367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12367");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("595");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test12368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12368");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("gmt", strMap1);
        org.joda.time.tz.Provider provider3 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone5 = provider3.getZone("1738-06-04T09:44:49.900");
        org.joda.time.DateTimeZone dateTimeZone7 = provider3.getZone("1738");
        java.util.Set<java.lang.String> strSet8 = provider3.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider3);
        java.util.Set<java.lang.String> strSet10 = provider3.getAvailableIDs();
        java.lang.String str11 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet10);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = property17.roundHalfCeilingCopy();
        org.joda.time.Interval interval22 = property17.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.millisOfSecond();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = property28.getAsText(locale29);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale29.getDisplayVariant(locale31);
        java.util.Locale locale36 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str37 = locale31.getDisplayName(locale36);
        java.lang.String str38 = locale36.getScript();
        java.lang.String str39 = locale36.getDisplayName();
        java.lang.String str40 = locale36.getDisplayLanguage();
        java.lang.String str41 = property17.getAsText(locale36);
        java.util.Set<java.lang.String> strSet42 = locale36.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet42);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(provider3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gmt" + "'", str11, "gmt");
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "650" + "'", str30, "650");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale36.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str39, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1738-06-04t09:43:28.618" + "'", str40, "1738-06-04t09:43:28.618");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "650" + "'", str41, "650");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test12369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12369");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.joda.time.DurationField durationField11 = copticChronology0.seconds();
        java.lang.String str12 = copticChronology0.toString();
        org.joda.time.Chronology chronology13 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test12370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12370");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekyear(700);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        boolean boolean28 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.millisOfSecond();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsText(locale57);
        long long59 = property56.remainder();
        org.joda.time.LocalDateTime localDateTime60 = property56.roundHalfFloorCopy();
        java.lang.String str61 = property56.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property56.getFieldType();
        boolean boolean63 = dateTime38.isSupported(dateTimeFieldType62);
        int int64 = localDateTime2.indexOf(dateTimeFieldType62);
        org.joda.time.LocalDateTime.Property property65 = localDateTime2.year();
        org.joda.time.DurationFieldType durationFieldType66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime68 = localDateTime2.withFieldAdded(durationFieldType66, 350);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "692" + "'", str58, "692");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Property[millisOfSecond]" + "'", str61, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test12371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12371");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology4 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = copticChronology0.getDateTimeMillis(1644572862171L, 614, 0, 35424496, 405);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 614 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test12372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12372");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(473L);
        org.joda.time.LocalTime localTime2 = localDateTime1.toLocalTime();
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test12373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12373");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField15 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsText(locale25);
        long long27 = property24.remainder();
        org.joda.time.LocalDateTime localDateTime28 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays(999);
        int int31 = localDateTime30.size();
        int[] intArray33 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime30, (long) 14800);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "764" + "'", str26, "764");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1686, 4, 23, 14800]");
    }

    @Test
    public void test12374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12374");
        java.util.Locale locale2 = new java.util.Locale("\uc911\uad6d\uc5b4\uc911\uad6d)", "946");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("1738-06-04T09:44:49.900");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1738-06-04T09:44:49.900");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)_946");
    }

    @Test
    public void test12375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12375");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime51 = property5.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withSecondOfMinute(43);
        java.lang.String str60 = localDateTime54.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property61 = localDateTime54.hourOfDay();
        boolean boolean62 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime54.plusYears(723);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime54.plusMinutes(733);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u82f1\u8a9e" + "'", str60, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test12376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12376");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.time.ZoneId zoneId9 = timeZone8.toZoneId();
        java.time.ZoneId zoneId10 = timeZone8.toZoneId();
        int int11 = timeZone8.getRawOffset();
        timeZone8.setRawOffset(711);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test12377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12377");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = copticChronology0.getDateTimeMillis(2020, 330, 152, 252, 663, 678, 300);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test12378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12378");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int2 = localDateTime1.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays(687);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMillis((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = localDateTime25.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.lang.String str32 = dateTimeZone28.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int34 = localDateTime33.getDayOfMonth();
        int int35 = localDateTime33.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusWeeks(102);
        int int38 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 38 + "'", int26 == 38);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test12379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12379");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        boolean boolean24 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.year();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        boolean boolean68 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime57);
        long long70 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        java.util.Locale locale72 = new java.util.Locale("GMT");
        int int73 = property26.getMaximumTextLength(locale72);
        java.lang.String str74 = locale72.getISO3Country();
        java.util.Set<java.lang.String> strSet75 = locale72.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 284L + "'", long70 == 284L);
        org.junit.Assert.assertEquals(locale72.toString(), "gmt");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test12380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12380");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField8 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test12381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12381");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 4, dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal(1644572857101L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test12382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12382");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfHalfday();
        java.lang.String str14 = copticChronology0.toString();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = copticChronology0.weeks();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfEra(713);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfEra(35077641);
        org.joda.time.DateTime dateTime42 = localDateTime39.toDateTime();
        long long44 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime39, 1613047547283L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573072001L + "'", long9 == 1644573072001L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-30701945327999L) + "'", long44 == (-30701945327999L));
    }

    @Test
    public void test12383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12383");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.DurationField durationField16 = copticChronology14.millis();
        org.joda.time.DurationField durationField17 = copticChronology14.minutes();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology14.year();
        boolean boolean20 = copticChronology0.equals((java.lang.Object) copticChronology14);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = copticChronology0.get(readablePeriod21, 10597168263441L, (-2479197599186L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573072024L + "'", long9 == 1644573072024L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test12384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12384");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.era();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = copticChronology0.add(readablePeriod5, (long) 955, 98);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 955L + "'", long8 == 955L);
    }

    @Test
    public void test12385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12385");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime2.getFieldTypes();
        int int17 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getISO3Country();
        int int25 = property21.getMaximumTextLength(locale22);
        java.lang.String str26 = localDateTime2.toString("293", locale22);
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale22.getDisplayScript(locale27);
        java.util.Set<java.lang.String> strSet29 = locale22.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        boolean boolean34 = strSet30.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.util.Locale.setDefault(locale40);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale38, locale39, locale40, locale44, locale46, locale49, locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.Locale locale54 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap56);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags(languageRangeList57, (java.util.Collection<java.lang.String>) strSet60, filteringMode61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.parse("eng", strMap64);
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        boolean boolean70 = strSet66.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet71);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList65, (java.util.Collection<java.lang.String>) strList72, filteringMode73);
        java.lang.String str75 = java.util.Locale.lookupTag(languageRangeList57, (java.util.Collection<java.lang.String>) strList74);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream76 = languageRangeList57.parallelStream();
        boolean boolean77 = strSet29.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList57, strMap78);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "293" + "'", str26, "293");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English (Canada)" + "'", str42, "English (Canada)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "English (Canada)" + "'", str47, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(locale54);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode61.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode73.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(languageRangeStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(languageRangeList79);
    }

    @Test
    public void test12386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12386");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology0.add(readablePeriod9, 1644572630964L, 0);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str14 = copticChronology13.toString();
        org.joda.time.DurationField durationField15 = copticChronology13.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        long long22 = copticChronology13.set((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology13.dayOfMonth();
        org.joda.time.DurationField durationField28 = copticChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone29 = copticChronology13.getZone();
        long long32 = dateTimeZone29.convertLocalToUTC(52L, true);
        org.joda.time.Chronology chronology33 = copticChronology0.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644572630964L + "'", long12 == 1644572630964L);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644573072110L + "'", long22 == 1644573072110L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test12387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12387");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str8 = copticChronology7.toString();
        org.joda.time.DurationField durationField9 = copticChronology7.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        long long16 = copticChronology7.set((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology7.dayOfMonth();
        org.joda.time.DurationField durationField22 = copticChronology7.months();
        org.joda.time.DateTimeZone dateTimeZone23 = copticChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology7.clockhourOfDay();
        org.joda.time.DurationField durationField25 = copticChronology7.minutes();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology7.hourOfDay();
        boolean boolean27 = languageRange1.equals((java.lang.Object) dateTimeField26);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644573072124L + "'", long16 == 1644573072124L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12388");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        int int9 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusYears(478);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.minuteOfHour();
        org.joda.time.ReadableInstant readableInstant14 = null;
        long long15 = property13.getDifferenceAsLong(readableInstant14);
        org.joda.time.LocalDateTime localDateTime17 = property13.addWrapFieldToCopy(276);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(75);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35472141]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1737 + "'", int9 == 1737);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-525600L) + "'", long15 == (-525600L));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test12389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12389");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime24.getFieldTypes();
        int int39 = localDateTime24.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getISO3Country();
        int int47 = property43.getMaximumTextLength(locale44);
        java.lang.String str48 = localDateTime24.toString("293", locale44);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        java.util.Set<java.lang.String> strSet51 = locale44.getUnicodeLocaleKeys();
        java.lang.String str52 = localDateTime2.toString("572", locale44);
        int int53 = localDateTime2.size();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime2.plus(readablePeriod54);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "293" + "'", str48, "293");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "572" + "'", str52, "572");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test12390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12390");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T19:48:51.892", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12391");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.halfdayOfDay();
        java.lang.String str15 = copticChronology0.toString();
        org.joda.time.Chronology chronology16 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.clockhourOfHalfday();
        long long21 = copticChronology0.add(0L, 1644572730586L, 372);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology0.year();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573072206L + "'", long9 == 1644573072206L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 611781055777992L + "'", long21 == 611781055777992L);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test12392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12392");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.lang.String str13 = locale10.getDisplayScript();
        java.lang.String str14 = locale7.getDisplayVariant(locale10);
        java.lang.String str16 = locale10.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale10.getUnicodeLocaleKeys();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("eng", strMap19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        boolean boolean25 = strSet21.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23);
        java.util.Set<java.lang.String> strSet26 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList27, filteringMode28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap30);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream32 = languageRangeList20.parallelStream();
        boolean boolean33 = strSet17.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.parse("French");
        java.util.Set<java.lang.String> strSet36 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        boolean boolean40 = strSet36.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.util.Locale.setDefault(locale46);
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale44, locale45, locale46, locale50, locale52, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Locale locale61 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList35, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList58);
        boolean boolean64 = strSet6.equals((java.lang.Object) languageRangeList20);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream65 = languageRangeList20.parallelStream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream66 = languageRangeList20.stream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en" + "'", str8, "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (Canada)" + "'", str48, "English (Canada)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(locale60);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(languageRangeStream65);
        org.junit.Assert.assertNotNull(languageRangeStream66);
    }

    @Test
    public void test12393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12393");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDateTime2.toDateTime(dateTimeZone17);
        int int19 = localDateTime2.size();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withHourOfDay(22);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours(760);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime33.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDateTime30.toDateTime(dateTimeZone36);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime42.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime42.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property58 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime.Property property59 = localDateTime42.minuteOfHour();
        int int60 = localDateTime42.getEra();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        java.util.TimeZone timeZone65 = dateTimeZone62.toTimeZone();
        long long67 = dateTimeZone62.nextTransition((-1L));
        java.lang.String str69 = dateTimeZone62.getShortName((long) 100);
        org.joda.time.DateTime dateTime70 = localDateTime42.toDateTime(dateTimeZone62);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = property76.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = property76.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime80 = property76.roundHalfEvenCopy();
        org.joda.time.DurationField durationField81 = property76.getRangeDurationField();
        org.joda.time.Interval interval82 = property76.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property76.getFieldType();
        int int84 = dateTime70.get(dateTimeFieldType83);
        int int85 = dateTime39.get(dateTimeFieldType83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime2.withField(dateTimeFieldType83, 875);
        int int88 = localDateTime87.getYearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+10:00" + "'", str69, "+10:00");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 275 + "'", int84 == 275);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 275 + "'", int85 == 275);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1738 + "'", int88 == 1738);
    }

    @Test
    public void test12394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12394");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField8 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12395");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property16.addToCopy(28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(437, 987, 283);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 987 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test12396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12396");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(222, 2486793, 332, 0, 141, 181, 191);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 141 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12397");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-35999031L));
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        boolean boolean5 = localDateTime1.isSupported(durationFieldType4);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12398");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = copticChronology0.withUTC();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMillis(3);
        long long16 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime14, (long) 748);
        org.joda.time.DurationField durationField17 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1643709072398L + "'", long16 == 1643709072398L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test12399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12399");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        java.lang.String str12 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        int int22 = localDateTime20.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minus(readablePeriod23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = copticChronology0.withZone(dateTimeZone27);
        java.lang.String str30 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = copticChronology0.add(readablePeriod33, 10597239993881L, 1814);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573072419L + "'", long9 == 1644573072419L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37 + "'", int22 == 37);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CopticChronology[UTC]" + "'", str30, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10597239993881L + "'", long36 == 10597239993881L);
    }

    @Test
    public void test12400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12400");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int17 = localDateTime16.getDayOfMonth();
        int int18 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks(102);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(854);
        int[] intArray24 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime22, (long) 404);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str26 = copticChronology25.toString();
        org.joda.time.DurationField durationField27 = copticChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = copticChronology25.getZone();
        int int31 = dateTimeZone29.getStandardOffset((long) 946);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsText(locale39);
        long long41 = property38.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.year();
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale44.getVariant();
        int int48 = property43.getMaximumShortTextLength(locale44);
        boolean boolean49 = locale44.hasExtensions();
        java.lang.String str50 = dateTimeZone29.getShortName(1644572672473L, locale44);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        boolean boolean71 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime70);
        int int72 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = localDateTime22.toDateTime(dateTimeZone29);
        org.joda.time.Instant instant74 = dateTime73.toInstant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1686, 4, 23, 404]");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CopticChronology[UTC]" + "'", str26, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "444" + "'", str40, "444");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(instant74);
    }

    @Test
    public void test12401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12401");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        int[] intArray13 = localDateTime12.getValues();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        int[] intArray46 = localDateTime45.getValues();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        int[] intArray57 = localDateTime56.getValues();
        copticChronology34.validate((org.joda.time.ReadablePartial) localDateTime48, intArray57);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime33, intArray57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 710, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withDayOfYear(81);
        org.joda.time.DurationFieldType durationFieldType63 = null;
        boolean boolean64 = localDateTime62.isSupported(durationFieldType63);
        int int65 = localDateTime62.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType66 = null;
        boolean boolean67 = localDateTime62.isSupported(durationFieldType66);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1737, 6, 4, 35472493]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35472493]");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1737, 6, 4, 35472493]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1737, 6, 4, 35472493]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test12402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12402");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        int int28 = localDateTime27.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withCenturyOfEra(975);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology31.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        int[] intArray43 = localDateTime42.getValues();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        int[] intArray54 = localDateTime53.getValues();
        copticChronology31.validate((org.joda.time.ReadablePartial) localDateTime45, intArray54);
        int int56 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.minusDays(782);
        boolean boolean59 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime30.plusMonths(521);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime30.plus(readablePeriod62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 38 + "'", int28 == 38);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1737, 6, 4, 35472532]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1737, 6, 4, 35472532]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test12403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12403");
        java.util.Locale locale2 = new java.util.Locale("269", "405");
        org.junit.Assert.assertEquals(locale2.toString(), "269_405");
    }

    @Test
    public void test12404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12404");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        int int15 = localDateTime13.getWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1738 + "'", int15 == 1738);
    }

    @Test
    public void test12405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12405");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1737-06-04T09:45:26.507+10:00");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2, 1181);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 1181");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test12406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12406");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("French");
        java.util.Set<java.lang.String> strSet2 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        boolean boolean6 = strSet2.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale.setDefault(locale12);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale10, locale11, locale12, locale16, locale18, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("eng", strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.parse("eng", strMap33);
        java.util.Set<java.lang.String> strSet35 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        boolean boolean39 = strSet35.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        java.util.Set<java.lang.String> strSet40 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strList41, filteringMode42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList34, strMap44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.parse("eng", strMap47);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream49 = languageRangeList48.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.parse("eng", strMap51);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.millisOfSecond();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = property60.getAsText(locale61);
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleKeys();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = locale70.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology73 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.millisOfSecond();
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str80 = property78.getAsText(locale79);
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale53, locale54, locale61, locale63, locale64, locale65, locale67, locale70, locale72, locale79, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter(languageRangeList52, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList48, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale locale88 = java.util.Locale.lookup(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList87);
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList87);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList89);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode42.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeStream49);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "597" + "'", str62, "597");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "English (Canada)" + "'", str68, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "eng" + "'", str71, "eng");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "597" + "'", str80, "597");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNull(locale88);
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(localeList90);
    }

    @Test
    public void test12407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12407");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        long long21 = dateTime19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime29.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        boolean boolean70 = dateTime59.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.hourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        org.joda.time.chrono.CopticChronology copticChronology81 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology81.dayOfYear();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property86 = localDateTime83.hourOfDay();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime83.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = localDateTime88.toDateTime(readableInstant89);
        boolean boolean91 = dateTime80.isEqual((org.joda.time.ReadableInstant) dateTime90);
        int int92 = dateTime59.compareTo((org.joda.time.ReadableInstant) dateTime80);
        int int93 = property49.compareTo((org.joda.time.ReadableInstant) dateTime80);
        int int94 = property43.getDifference((org.joda.time.ReadableInstant) dateTime80);
        int int95 = property25.compareTo((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean96 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.ReadableInstant readableInstant97 = null;
        boolean boolean98 = dateTime19.isEqual(readableInstant97);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-7339421327333L) + "'", long21 == (-7339421327333L));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(copticChronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 103981 + "'", int94 == 103981);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12408");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream3 = languageRangeList2.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("eng", strMap5);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsText(locale15);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getISO3Language();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = property32.getAsText(locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale7, locale8, locale15, locale17, locale18, locale19, locale21, locale24, locale26, locale33, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Set<java.lang.String> strSet42 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        boolean boolean46 = strSet42.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strMap47);
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = java.util.Locale.lookupTag(languageRangeList48, (java.util.Collection<java.lang.String>) strSet50);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet50);
        java.util.Collection<java.util.Locale> localeCollection53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale54 = java.util.Locale.lookup(languageRangeList2, localeCollection53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeStream3);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "729" + "'", str16, "729");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eng" + "'", str25, "eng");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "729" + "'", str34, "729");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strList52);
    }

    @Test
    public void test12409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12409");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays(580);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 207);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime30.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime30.plusSeconds((int) 'x');
        int int46 = localDateTime30.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property47 = localDateTime30.era();
        org.joda.time.LocalDateTime.Property property48 = localDateTime30.yearOfEra();
        int int49 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withHourOfDay(22);
        int int68 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime52.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime52.withYear(42);
        int int72 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        int int73 = localDateTime30.getMinuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573072759L + "'", long9 == 1644573072759L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 759 + "'", int46 == 759);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 51 + "'", int73 == 51);
    }

    @Test
    public void test12410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12410");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(71423796);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test12411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12411");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField24 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test12412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12412");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        int int18 = localDateTime15.getWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology19.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        int[] intArray42 = localDateTime41.getValues();
        copticChronology19.validate((org.joda.time.ReadablePartial) localDateTime33, intArray42);
        int int44 = localDateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime33.minusDays(782);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(49);
        int int49 = localDateTime46.getYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withWeekOfWeekyear(955);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 955 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1738 + "'", int18 == 1738);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35472813]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1737, 6, 4, 35472813]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1735 + "'", int49 == 1735);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test12413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12413");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.time.ZoneId zoneId10 = timeZone8.toZoneId();
        int int11 = timeZone8.getRawOffset();
        boolean boolean12 = timeZone8.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test12414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12414");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder3.setRegion("293");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder7.setRegion("409");
        java.util.Locale.Builder builder11 = builder7.setRegion("812");
        java.util.Locale locale12 = builder7.build();
        boolean boolean13 = locale12.hasExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_293_#x-709");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "_812");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test12415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12415");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusMonths(1636);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str36 = copticChronology35.toString();
        long long41 = copticChronology35.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = copticChronology35.getZone();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) 1644537600010L, dateTimeZone44);
        int int46 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime28.year();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.DurationField durationField49 = property47.getDurationField();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        int int51 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CopticChronology[UTC]" + "'", str36, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-50149497600000L) + "'", long41 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test12416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12416");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(102);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusYears(415);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.millisOfSecond();
        int int24 = localDateTime17.getSecondOfMinute();
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localDateTime17.getFields();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test12417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12417");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy(250);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(817);
        int int7 = localDateTime4.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12418");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusMonths(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime2.withMillisOfSecond(301);
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.year();
        int int20 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minusMillis(35118515);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime2.minusMillis(0);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime2.minus(readablePeriod25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withSecondOfMinute(860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 860 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35472911 + "'", int20 == 35472911);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12419");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusHours(22);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours(375);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime19.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusYears(100);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property31.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = property31.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = property31.roundHalfEvenCopy();
        org.joda.time.DurationField durationField36 = property31.getRangeDurationField();
        org.joda.time.Interval interval37 = property31.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property31.getFieldType();
        int int39 = localDateTime25.get(dateTimeFieldType38);
        int int40 = localDateTime16.get(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime16.withMillisOfDay(801);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = localDateTime42.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -199 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1738-06-04T09:51:12.947" + "'", str23, "1738-06-04T09:51:12.947");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 947 + "'", int39 == 947);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 947 + "'", int40 == 947);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test12420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12420");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        int[] intArray16 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfDay(253);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime25.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        boolean boolean66 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        org.joda.time.chrono.CopticChronology copticChronology77 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.hourOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localDateTime84.toDateTime(readableInstant85);
        boolean boolean87 = dateTime76.isEqual((org.joda.time.ReadableInstant) dateTime86);
        int int88 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime76);
        int int89 = property45.compareTo((org.joda.time.ReadableInstant) dateTime76);
        int int90 = property39.getDifference((org.joda.time.ReadableInstant) dateTime76);
        int int91 = property21.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime92 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.LocalDateTime localDateTime95 = localDateTime15.withPeriodAdded(readablePeriod93, 363);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime97 = localDateTime95.withEra(492);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 492 for era must be in the range [1,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573072964L + "'", long9 == 1644573072964L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1738, 6, 4, 34872964]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(copticChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 103981 + "'", int90 == 103981);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test12421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12421");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 126, dateTimeZone2);
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str18 = locale13.getDisplayName(locale17);
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = locale20.stripExtensions();
        java.util.Locale.setDefault(category12, locale20);
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.lang.String str31 = locale28.getDisplayScript();
        java.lang.String str32 = locale25.getDisplayVariant(locale28);
        java.lang.String str33 = locale24.getDisplayVariant(locale28);
        java.util.Locale.setDefault(category12, locale28);
        java.util.Locale locale35 = java.util.Locale.getDefault(category12);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder36.setExtension('x', "811");
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.lang.String str44 = locale41.getDisplayScript();
        java.lang.String str45 = locale41.getDisplayVariant();
        java.lang.String str46 = locale41.getDisplayScript();
        java.util.Locale.Builder builder47 = builder39.setLocale(locale41);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.lang.String str49 = locale48.getScript();
        java.lang.String str50 = locale48.getISO3Country();
        boolean boolean51 = locale48.hasExtensions();
        java.util.Locale.Builder builder52 = builder39.setLocale(locale48);
        java.util.Locale.setDefault(category12, locale48);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = property59.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = property59.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime63 = property59.roundHalfCeilingCopy();
        org.joda.time.Interval interval64 = property59.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.millisOfSecond();
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = property70.getAsText(locale71);
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale71.getDisplayVariant(locale73);
        java.util.Locale locale78 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str79 = locale73.getDisplayName(locale78);
        java.lang.String str80 = locale78.getScript();
        java.lang.String str81 = locale78.getDisplayName();
        java.lang.String str82 = locale78.getDisplayLanguage();
        java.lang.String str83 = property59.getAsText(locale78);
        java.lang.String str84 = locale78.getDisplayScript();
        java.util.Locale.setDefault(category12, locale78);
        java.util.Locale locale86 = locale78.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = timeZone7.getDisplayName(false, 103985, locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 103985");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English (Canada)" + "'", str42, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "KOR" + "'", str50, "KOR");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "987" + "'", str72, "987");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals(locale78.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Chinese (China)" + "'", str79, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str81, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1738-06-04t09:43:28.618" + "'", str82, "1738-06-04t09:43:28.618");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "987" + "'", str83, "987");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "1738-06-04t09:43:28.618_539");
    }

    @Test
    public void test12422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12422");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test12423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12423");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        int int8 = localDateTime4.getYearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMaximumValue();
        int int19 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime4.hourOfDay();
        int int21 = localDateTime4.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 38 + "'", int8 == 38);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test12424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12424");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withSecondOfMinute(244);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 244 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1738-06-04T00:00:00.100" + "'", str16, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12425");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusMonths((int) (byte) 0);
        int int29 = localDateTime28.size();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.era();
        boolean boolean31 = copticChronology0.equals((java.lang.Object) property30);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test12426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12426");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField7 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField10 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test12427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12427");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        long long4 = dateTimeZone2.convertUTCToLocal(0L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone2);
        long long7 = dateTimeZone2.previousTransition((long) 1838);
        long long9 = dateTimeZone2.convertUTCToLocal(1644572754889L);
        int int11 = dateTimeZone2.getOffsetFromLocal(10597203920016L);
        int int13 = dateTimeZone2.getStandardOffset(1644572089105L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 2486794, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 432000000L + "'", long4 == 432000000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1838L + "'", long7 == 1838L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645004754889L + "'", long9 == 1645004754889L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 432000000 + "'", int11 == 432000000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 432000000 + "'", int13 == 432000000);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test12428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12428");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDurationAdded(readableDuration5, (int) ' ');
        int int8 = localDateTime4.getMillisOfSecond();
        java.lang.String str10 = localDateTime4.toString("494");
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime13.getFieldTypes();
        int int28 = localDateTime13.getDayOfMonth();
        org.joda.time.Chronology chronology29 = localDateTime13.getChronology();
        boolean boolean30 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str32 = copticChronology31.toString();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = copticChronology31.add(readablePeriod33, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField37 = copticChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology31.year();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology31.minuteOfHour();
        org.joda.time.DurationField durationField41 = copticChronology31.minutes();
        java.lang.String str42 = copticChronology31.toString();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology31.year();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology31.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusMinutes(35048859);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMonths(42);
        int[] intArray64 = copticChronology31.get((org.joda.time.ReadablePartial) localDateTime62, 1644573035045L);
        boolean boolean65 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime62);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 149 + "'", int8 == 149);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "494" + "'", str10, "494");
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CopticChronology[UTC]" + "'", str32, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CopticChronology[UTC]" + "'", str42, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1738, 6, 4, 35435045]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test12429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12429");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        int int5 = dateTimeZone2.getStandardOffset(0L);
        boolean boolean7 = dateTimeZone2.isStandardOffset((long) (short) 1);
        long long10 = dateTimeZone2.adjustOffset(1644572630512L, false);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.centuryOfEra();
        int int20 = localDateTime18.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minus(readablePeriod21);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTime dateTime26 = localDateTime18.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        long long29 = dateTimeZone2.getMillisKeepLocal(dateTimeZone25, (-7307885724435L));
        int int31 = dateTimeZone2.getStandardOffset(1644572905497L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572630512L + "'", long10 == 1644572630512L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 37 + "'", int20 == 37);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-7307885724435L) + "'", long29 == (-7307885724435L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test12430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12430");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("35021141");
        java.util.Date date2 = localDateTime1.toDate();
        int int3 = localDateTime1.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Wed Jan 01 00:00:00 GMT 35021141");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test12431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12431");
        java.util.Locale locale1 = new java.util.Locale("1737-06-04T09:45:29.093+10:00");
        java.lang.String str2 = locale1.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "1737-06-04t09:45:29.093+10:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test12432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12432");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 579);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone4);
        int int7 = dateTimeZone4.getOffset((long) 404);
        java.util.TimeZone timeZone8 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone4);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("709");
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale16 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.String str19 = dateTimeZone4.getName((long) 93, locale12);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getDisplayScript();
        java.lang.String str27 = locale20.getDisplayVariant(locale23);
        java.lang.String str29 = locale23.getExtension('a');
        java.lang.String str30 = locale12.getDisplayName(locale23);
        java.lang.String str31 = locale23.getLanguage();
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale16.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en" + "'", str21, "en");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
    }

    @Test
    public void test12433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12433");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, 5431484632041L);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = copticChronology11.get(readablePeriod13, 1644572980375L, (long) 605);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5431448632041L + "'", long10 == 5431448632041L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12434");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology18.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test12435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12435");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withHourOfDay(22);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withEra(1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMillis(431);
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.hourOfDay();
        int int24 = property23.get();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
    }

    @Test
    public void test12436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12436");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        java.lang.String str6 = locale3.getDisplayScript();
        java.lang.String str7 = locale0.getDisplayVariant(locale3);
        java.lang.String str9 = locale3.getExtension('a');
        java.lang.String str10 = locale3.getDisplayScript();
        java.util.Locale locale11 = locale3.stripExtensions();
        java.lang.String str12 = locale11.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "English (Canada)" + "'", str4, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CA" + "'", str12, "CA");
    }

    @Test
    public void test12437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12437");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.halfdayOfDay();
        long long36 = copticChronology0.add(1644572635634L, (long) 467, 625);
        java.lang.String[] strArray46 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.util.Locale locale49 = java.util.Locale.CANADA;
        boolean boolean50 = strSet47.equals((java.lang.Object) locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        boolean boolean54 = copticChronology0.equals((java.lang.Object) strSet53);
        org.joda.time.DateTimeField dateTimeField55 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573073334L + "'", long9 == 1644573073334L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485073334L + "'", long31 == 5431485073334L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1644572927509L + "'", long36 == 1644572927509L);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English" + "'", str52, "English");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test12438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12438");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology1.add(readablePeriod9, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology15 = copticChronology1.withZone(dateTimeZone14);
        long long17 = dateTimeZone14.previousTransition((long) 103981);
        java.util.TimeZone timeZone18 = dateTimeZone14.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        boolean boolean39 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        boolean boolean60 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime59);
        int int61 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime28.getZone();
        int int63 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.chrono.CopticChronology copticChronology64 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField65 = copticChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 946, (org.joda.time.Chronology) copticChronology64);
        org.joda.time.DateTimeField dateTimeField67 = copticChronology64.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 103981L + "'", long17 == 103981L);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 432000000 + "'", int63 == 432000000);
        org.junit.Assert.assertNotNull(copticChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test12439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12439");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35239426, 106);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 106");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder5 = builder0.setRegion("301");
        java.util.Locale locale6 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setUnicodeLocaleKeyword("CopticChronology[+120:00]", "686");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: CopticChronology[+120:00] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_301_#x-811");
    }

    @Test
    public void test12441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12441");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long10 = copticChronology0.add(1644572616856L, 1644572617993L, 700);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        org.joda.time.DurationField durationField13 = copticChronology11.millis();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime40.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime40.plus(readablePeriod56);
        int int58 = localDateTime57.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.yearOfEra();
        boolean boolean60 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        int[] intArray61 = localDateTime57.getValues();
        copticChronology11.validate((org.joda.time.ReadablePartial) localDateTime21, intArray61);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime65.withFields((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withMillisOfDay(10);
        int[] intArray79 = localDateTime76.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray79);
        org.joda.time.DateTimeField dateTimeField81 = copticChronology0.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long86 = copticChronology0.getDateTimeMillis(35333279, 164, 333, 480);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 164 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1152845405211956L + "'", long10 == 1152845405211956L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 413 + "'", int58 == 413);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1738, 6, 4, 35473413]");
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1738, 6, 4, 35473413]");
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test12442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12442");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder3.setRegion("293");
        java.util.Locale.Builder builder8 = builder5.setExtension('x', "2");
        java.util.Locale.Builder builder11 = builder8.setExtension('a', "485");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.addUnicodeLocaleAttribute("86");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 86 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12443");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        int[] intArray25 = localDateTime24.getValues();
        boolean boolean26 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property27 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property28 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property29 = localDateTime2.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1737, 6, 4, 35473462]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test12444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12444");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale8, locale9, locale10, locale14, locale16, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap26);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet30, filteringMode31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str34 = copticChronology33.toString();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology33.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withSecondOfMinute(43);
        int[] intArray44 = copticChronology33.get((org.joda.time.ReadablePartial) localDateTime42, (long) 43);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str46 = copticChronology45.toString();
        org.joda.time.DurationField durationField47 = copticChronology45.weekyears();
        org.joda.time.DateTimeZone dateTimeZone48 = copticChronology45.getZone();
        org.joda.time.DurationField durationField49 = copticChronology45.days();
        org.joda.time.DurationField durationField50 = copticChronology45.weekyears();
        boolean boolean51 = copticChronology33.equals((java.lang.Object) copticChronology45);
        org.joda.time.DurationField durationField52 = copticChronology33.halfdays();
        org.joda.time.DurationField durationField53 = copticChronology33.seconds();
        boolean boolean54 = strSet30.contains((java.lang.Object) copticChronology33);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CopticChronology[UTC]" + "'", str34, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CopticChronology[UTC]" + "'", str46, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test12445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12445");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = copticChronology0.withUTC();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMillis(3);
        long long16 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime14, (long) 748);
        org.joda.time.DurationField durationField17 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        boolean boolean41 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime44.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime44.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property60 = localDateTime44.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime44);
        int[] intArray63 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime61, 972L);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = copticChronology0.getDateTimeMillis((long) 749, 924, 803, 129, 71358998);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 924 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1643709073535L + "'", long16 == 1643709073535L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1686, 4, 23, 972]");
    }

    @Test
    public void test12446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12446");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573073556L + "'", long9 == 1644573073556L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485073556L + "'", long31 == 5431485073556L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test12447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12447");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays(580);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 207);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime30.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime30.plusSeconds((int) 'x');
        int int46 = localDateTime30.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property47 = localDateTime30.era();
        org.joda.time.LocalDateTime.Property property48 = localDateTime30.yearOfEra();
        int int49 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withHourOfDay(22);
        int int68 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime52.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime52.withYear(42);
        int int72 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property73 = localDateTime52.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573073605L + "'", long9 == 1644573073605L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 605 + "'", int46 == 605);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test12448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12448");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy(250);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(989);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.plus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime39.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime26.isSupported(dateTimeFieldType48);
        int int50 = localDateTime6.get(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime4.property(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime52 = property51.roundFloorCopy();
        int int53 = property51.getMinimumValueOverall();
        java.lang.String str54 = property51.getName();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "dayOfWeek" + "'", str54, "dayOfWeek");
    }

    @Test
    public void test12449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12449");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test12450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12450");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35305535, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12451");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.secondOfMinute();
        org.joda.time.Chronology chronology4 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField5 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test12452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12452");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField9 = copticChronology8.hours();
        int int10 = copticChronology8.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.minuteOfHour();
        org.joda.time.DurationField durationField13 = copticChronology8.days();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str16 = dateTimeZone15.getID();
        boolean boolean18 = dateTimeZone15.isStandardOffset(10L);
        org.joda.time.Chronology chronology19 = copticChronology8.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        long long28 = dateTimeZone23.nextTransition((-1L));
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone23, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone23);
        org.joda.time.Chronology chronology33 = copticChronology8.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology34 = copticChronology0.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999031L) + "'", long30 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test12453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12453");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1738-06-04T09:43:55.176");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(113);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusYears(884);
        boolean boolean19 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays(249);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        int int25 = localDateTime21.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
    }

    @Test
    public void test12454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12454");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(54, 35218126);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 35218126");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12455");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = copticChronology3.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology3.millis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test12456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12456");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        boolean boolean37 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        boolean boolean58 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime47);
        int int60 = property16.compareTo((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean61 = strSet9.remove((java.lang.Object) property16);
        org.joda.time.LocalDateTime localDateTime63 = property16.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = property16.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusMonths(734);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime68 = property67.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = localDateTime68.withTime(91, 484, 494, 632);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test12457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12457");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.centuryOfEra();
        long long12 = copticChronology0.add(1644572579020L, 1644572639605L, 648);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays(687);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.monthOfYear();
        int int19 = localDateTime14.getYearOfCentury();
        int[] intArray21 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime14, 1644572701420L);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str23 = copticChronology22.toString();
        long long28 = copticChronology22.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology22.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = copticChronology22.add(readablePeriod31, 0L, 304);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology22.yearOfCentury();
        org.joda.time.DurationField durationField36 = copticChronology22.eras();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) 1644572701420L, (org.joda.time.Chronology) copticChronology22);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1067327643043060L + "'", long12 == 1067327643043060L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1738, 6, 4, 35101420]");
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CopticChronology[UTC]" + "'", str23, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-50149497600000L) + "'", long28 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test12458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12458");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long15 = dateTimeZone1.previousTransition(1644572610881L);
        long long18 = dateTimeZone1.convertLocalToUTC((long) (short) 1, true);
        java.util.TimeZone timeZone19 = dateTimeZone1.toTimeZone();
        long long22 = dateTimeZone1.convertLocalToUTC(1644572616856L, false);
        long long25 = dateTimeZone1.adjustOffset(1644572627006L, true);
        int int27 = dateTimeZone1.getOffset(1613036704506L);
        long long30 = dateTimeZone1.adjustOffset(1644572980444L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572610881L + "'", long15 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-35999999L) + "'", long18 == (-35999999L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644536616856L + "'", long22 == 1644536616856L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644572627006L + "'", long25 == 1644572627006L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572980444L + "'", long30 == 1644572980444L);
    }

    @Test
    public void test12459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12459");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.clockhourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfDay((int) (byte) 100);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str25 = copticChronology24.toString();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = copticChronology24.add(readablePeriod26, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField30 = copticChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology24.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        java.lang.String str39 = dateTimeZone35.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone35);
        int int41 = localDateTime40.getDayOfMonth();
        int int42 = localDateTime40.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.minusWeeks(102);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMillisOfDay(854);
        int[] intArray48 = copticChronology24.get((org.joda.time.ReadablePartial) localDateTime46, (long) 404);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime21, intArray48);
        org.joda.time.DateTimeField dateTimeField50 = copticChronology1.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 614, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays(806);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1738-06-04T00:00:00.100" + "'", str22, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[UTC]" + "'", str25, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1686, 4, 23, 404]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test12460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12460");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        boolean boolean43 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        boolean boolean64 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int66 = property22.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int67 = property16.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.hourOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDateTime75.toDateTime(readableInstant76);
        org.joda.time.chrono.CopticChronology copticChronology78 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = copticChronology78.dayOfYear();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.hourOfDay();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime80.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime(readableInstant86);
        boolean boolean88 = dateTime77.isEqual((org.joda.time.ReadableInstant) dateTime87);
        java.lang.String str89 = dateTime87.toString();
        long long90 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime87);
        int int91 = property16.getMaximumValueOverall();
        org.joda.time.DurationField durationField92 = property16.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime93 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime94 = property16.withMaximumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 103981 + "'", int67 == 103981);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(copticChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1737-06-04T09:51:13.948+10:00" + "'", str89, "1737-06-04T09:51:13.948+10:00");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 103981L + "'", long90 == 103981L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 30 + "'", int91 == 30);
        org.junit.Assert.assertNull(durationField92);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test12461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12461");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.era();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 2, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField6 = copticChronology1.weeks();
        org.joda.time.DurationField durationField7 = copticChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.centuryOfEra();
        long long12 = copticChronology1.add(1644536841403L, (long) 1735, 491);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644537693288L + "'", long12 == 1644537693288L);
    }

    @Test
    public void test12462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12462");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(44);
        int int23 = dateTimeZone21.getOffsetFromLocal(1644572632040L);
        boolean boolean24 = localDateTime2.equals((java.lang.Object) dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime2.plus(readablePeriod25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.centuryOfEra();
        int int47 = localDateTime45.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.minus(readablePeriod48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        boolean boolean55 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        int int57 = localDateTime26.size();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 158400000 + "'", int23 == 158400000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1737-06-04T09:51:14.084+10:00" + "'", str37, "1737-06-04T09:51:14.084+10:00");
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 37 + "'", int47 == 37);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1737-06-04T09:51:14.084Z" + "'", str54, "1737-06-04T09:51:14.084Z");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
    }

    @Test
    public void test12463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12463");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        boolean boolean28 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime38);
        int int51 = property7.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime52 = property7.roundHalfCeilingCopy();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusSeconds(154);
        int[] intArray57 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime55, (long) 844);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField59 = copticChronology1.centuries();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1738 + "'", int53 == 1738);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1686, 4, 23, 36000844]");
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test12464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12464");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str9 = dateTimeZone1.getNameKey((long) 113);
        long long11 = dateTimeZone1.nextTransition((-7339421331651L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7339421331651L) + "'", long11 == (-7339421331651L));
    }

    @Test
    public void test12465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12465");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.months();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 0L, 847);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField15 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test12466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12466");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(178, 695, 823, 667, 493, 501, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 667 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12467");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.halfdays();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 833, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfSecond();
        java.lang.String str7 = property6.toString();
        java.lang.String str8 = property6.getName();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[millisOfSecond]" + "'", str7, "Property[millisOfSecond]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfSecond" + "'", str8, "millisOfSecond");
    }

    @Test
    public void test12468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12468");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDateTime19.getValue(35375112);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35375112");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test12469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12469");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDayOfYear(22);
        java.lang.String str36 = localDateTime34.toString("442");
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusHours(16);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573074218L + "'", long9 == 1644573074218L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485074218L + "'", long31 == 5431485074218L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "442" + "'", str36, "442");
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test12470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12470");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test12471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12471");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        int int3 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.Chronology chronology9 = copticChronology1.withZone(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone5.isLocalDateTimeGap(localDateTime10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(1644572746456L, dateTimeZone5);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.Chronology chronology17 = copticChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test12472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12472");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField15 = copticChronology0.months();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology0.add(readablePeriod16, 0L, 856);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology0.minuteOfHour();
        int int22 = copticChronology0.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573074299L + "'", long9 == 1644573074299L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test12473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12473");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 35028711, dateTimeZone1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDurationAdded(readableDuration4, 0);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test12474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12474");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "709");
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder18 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder15.setExtension('u', "35026152");
        java.util.Locale locale22 = builder21.build();
        java.lang.String str23 = property9.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime24 = property9.roundHalfCeilingCopy();
        java.util.Locale locale25 = null;
        int int26 = property9.getMaximumTextLength(locale25);
        org.joda.time.Interval interval27 = property9.toInterval();
        org.joda.time.LocalDateTime localDateTime29 = property9.addToCopy(271);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField31 = copticChronology30.hours();
        int int32 = copticChronology30.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology30.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime37.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime37.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property53 = localDateTime37.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDateTime37.getFieldTypes();
        org.joda.time.LocalDateTime.Property property55 = localDateTime37.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime59.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = localDateTime59.getFieldTypes();
        int int74 = localDateTime59.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.hourOfDay();
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        java.lang.String str81 = locale79.getISO3Country();
        int int82 = property78.getMaximumTextLength(locale79);
        java.lang.String str83 = localDateTime59.toString("293", locale79);
        java.util.Locale locale84 = java.util.Locale.ITALY;
        java.lang.String str85 = locale79.getDisplayScript(locale84);
        java.util.Set<java.lang.String> strSet86 = locale79.getUnicodeLocaleKeys();
        java.lang.String str87 = localDateTime37.toString("572", locale79);
        int[] intArray89 = copticChronology30.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime37.minusMinutes(1970);
        int int92 = localDateTime37.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property93 = localDateTime37.era();
        int int94 = property9.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35474345]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "293" + "'", str83, "293");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "572" + "'", str87, "572");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35474345 + "'", int92 == 35474345);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test12475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12475");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getDayOfWeek();
        int int15 = localDateTime2.getYearOfCentury();
        int int16 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime2.withWeekyear(81);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.plusMillis(198);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 38 + "'", int15 == 38);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 400 + "'", int16 == 400);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test12476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12476");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        java.util.Locale locale13 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str14 = locale8.getDisplayName(locale13);
        java.lang.String str15 = locale13.getScript();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.String str18 = locale13.getDisplayName();
        java.lang.String str19 = locale13.getDisplayLanguage();
        java.lang.String str20 = locale13.getCountry();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "417" + "'", str7, "417");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "539" + "'", str17, "539");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str18, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1738-06-04t09:43:28.618" + "'", str19, "1738-06-04t09:43:28.618");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "539" + "'", str20, "539");
    }

    @Test
    public void test12477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12477");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.halfdays();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 833, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withTime(23, 4, 9, 0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minus(readableDuration18);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfDay((int) (byte) 100);
        java.lang.String str36 = localDateTime35.toString();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = property37.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfCentury();
        int int41 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        int[] intArray43 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime39, 1644572920416L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withMinuteOfHour(743);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 743 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1738-06-04T00:00:00.100" + "'", str36, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1738, 6, 4, 71320416]");
    }

    @Test
    public void test12478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12478");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.nextTransition((-1L));
        java.lang.String str8 = dateTimeZone1.getShortName((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = copticChronology9.eras();
        int int13 = copticChronology9.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField14 = copticChronology9.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test12479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12479");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withWeekyear(671);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property22 = localDateTime6.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime6.getFieldTypes();
        boolean boolean24 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = localDateTime6.toString("1738-06-04T09:46:42.883");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 14 + "'", int1 == 14);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12480");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String str4 = nameProvider0.getName(locale1, "fr", "572");
        java.util.Locale locale8 = new java.util.Locale("eng", "153", "English (Canada)");
        java.lang.String str11 = nameProvider0.getName(locale8, "1738", "35035387");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale14.getDisplayVariant(locale17);
        java.lang.String str22 = locale13.getDisplayVariant(locale17);
        java.lang.String str25 = nameProvider0.getShortName(locale13, "550", "0");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.hourOfDay();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale30.getISO3Country();
        int int33 = property29.getMaximumTextLength(locale30);
        java.lang.String str36 = nameProvider0.getShortName(locale30, "1737-06-04T09:45:26.507+10:00", "");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale8.toString(), "eng_153_English (Canada)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test12481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12481");
        java.util.Locale locale3 = new java.util.Locale("889", "4", "580");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getDisplayVariant();
        java.lang.String str8 = locale4.getISO3Country();
        java.lang.String str9 = locale3.getDisplayScript(locale4);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsText(locale17);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale20.getDisplayCountry(locale23);
        java.lang.String str25 = locale17.getDisplayName(locale20);
        java.lang.String str26 = locale17.getDisplayName();
        java.lang.String str27 = locale10.getDisplayName(locale17);
        java.lang.String str28 = locale10.getDisplayVariant();
        java.lang.String str29 = locale10.getDisplayName();
        java.lang.String str31 = locale10.getExtension('a');
        java.lang.String str32 = locale4.getDisplayLanguage(locale10);
        java.util.Locale.setDefault(locale4);
        org.junit.Assert.assertEquals(locale3.toString(), "889_4_580");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CAN" + "'", str8, "CAN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "516" + "'", str18, "516");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Canada" + "'", str24, "Canada");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English" + "'", str25, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "English" + "'", str26, "English");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Italian" + "'", str29, "Italian");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "inglese" + "'", str32, "inglese");
    }

    @Test
    public void test12482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12482");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField16 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField18 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField19 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int[] intArray23 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime21, 3289145227800L);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1790, 7, 15, 70027800]");
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test12483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12483");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        long long21 = dateTime19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime29.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        boolean boolean70 = dateTime59.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.hourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        org.joda.time.chrono.CopticChronology copticChronology81 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology81.dayOfYear();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property86 = localDateTime83.hourOfDay();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime83.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = localDateTime88.toDateTime(readableInstant89);
        boolean boolean91 = dateTime80.isEqual((org.joda.time.ReadableInstant) dateTime90);
        int int92 = dateTime59.compareTo((org.joda.time.ReadableInstant) dateTime80);
        int int93 = property49.compareTo((org.joda.time.ReadableInstant) dateTime80);
        int int94 = property43.getDifference((org.joda.time.ReadableInstant) dateTime80);
        int int95 = property25.compareTo((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean96 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Instant instant97 = dateTime80.toInstant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-7339421325451L) + "'", long21 == (-7339421325451L));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(copticChronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 103981 + "'", int94 == 103981);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(instant97);
    }

    @Test
    public void test12484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12484");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        org.joda.time.DurationField durationField3 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test12485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12485");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology18.era();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(1738);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
        int int39 = localDateTime37.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        boolean boolean66 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        org.joda.time.chrono.CopticChronology copticChronology77 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.hourOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localDateTime84.toDateTime(readableInstant85);
        boolean boolean87 = dateTime76.isEqual((org.joda.time.ReadableInstant) dateTime86);
        int int88 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime76);
        int int89 = property45.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property45.getFieldType();
        boolean boolean91 = localDateTime37.isSupported(dateTimeFieldType90);
        org.joda.time.LocalDateTime.Property property92 = localDateTime37.dayOfYear();
        long long94 = copticChronology18.set((org.joda.time.ReadablePartial) localDateTime37, 1644572629025L);
        org.joda.time.DateTimeZone dateTimeZone95 = copticChronology18.getZone();
        org.joda.time.chrono.CopticChronology copticChronology96 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone95);
        org.joda.time.LocalDateTime localDateTime97 = org.joda.time.LocalDateTime.now(dateTimeZone95);
        int int98 = localDateTime97.getMillisOfDay();
        int int99 = localDateTime97.getWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 639 + "'", int39 == 639);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(copticChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(property92);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1794736274639L + "'", long94 == 1794736274639L);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(copticChronology96);
        org.junit.Assert.assertNotNull(localDateTime97);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 35474639 + "'", int98 == 35474639);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2022 + "'", int99 == 2022);
    }

    @Test
    public void test12486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "811");
        java.util.Locale.Builder builder12 = builder8.clear();
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder14 = builder8.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.setRegion("947");
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = new java.util.Locale("889", "4", "580");
        java.lang.String str25 = locale18.getDisplayScript(locale24);
        java.util.Locale.Builder builder26 = builder17.setLocale(locale18);
        boolean boolean27 = locale18.hasExtensions();
        java.util.Locale.Builder builder28 = builder7.setLocale(locale18);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str30 = copticChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology29.weekyearOfCentury();
        org.joda.time.DurationField durationField32 = copticChronology29.minutes();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology29.weekyearOfCentury();
        org.joda.time.DurationField durationField36 = copticChronology29.hours();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology29.secondOfDay();
        boolean boolean38 = locale18.equals((java.lang.Object) copticChronology29);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals(locale24.toString(), "889_4_580");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CopticChronology[UTC]" + "'", str30, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test12487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12487");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 22);
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = dateTimeZone1.getName(1644572630789L, locale5);
        boolean boolean8 = locale5.hasExtensions();
        java.util.Locale locale11 = new java.util.Locale("35150933", "369");
        java.lang.String str12 = locale5.getDisplayName(locale11);
        java.lang.String str13 = locale11.getDisplayLanguage();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = locale11.getDisplayCountry(locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "German (Germany)" + "'", str6, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "35150933_369");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "German (Germany)" + "'", str12, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "35150933" + "'", str13, "35150933");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "369" + "'", str14, "369");
    }

    @Test
    public void test12488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12488");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DurationField durationField7 = copticChronology5.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        long long14 = copticChronology5.set((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology5.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withPeriodAdded(readablePeriod25, 723);
        long long29 = copticChronology5.set((org.joda.time.ReadablePartial) localDateTime27, (long) 999);
        boolean boolean30 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.lang.String[] strArray42 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        boolean boolean46 = strSet43.equals((java.lang.Object) locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = locale32.getDisplayVariant(locale45);
        java.lang.String str49 = dateTimeZone1.getName(10L, locale45);
        java.util.Locale locale53 = new java.util.Locale("1738-06-04t09:43:28.618 (539)", "306", "35026152");
        java.lang.String str54 = locale45.getDisplayScript(locale53);
        java.util.Set<java.lang.Character> charSet55 = locale45.getExtensionKeys();
        java.lang.Object obj56 = locale45.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644573074728L + "'", long14 == 1644573074728L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572974728L + "'", long29 == 1644572974728L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:00" + "'", str49, "+10:00");
        org.junit.Assert.assertEquals(locale53.toString(), "1738-06-04t09:43:28.618 (539)_306_35026152");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "en_CA");
    }

    @Test
    public void test12489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12489");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder3 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguage("957");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 957 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test12490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12490");
        java.util.Locale locale1 = new java.util.Locale("108");
        java.lang.String str2 = locale1.getScript();
        java.lang.Object obj3 = locale1.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "108");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "108");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "108");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "108");
    }

    @Test
    public void test12491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12491");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime3.plus(readablePeriod19);
        int int21 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMonths(3);
        int int24 = localDateTime20.getYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.secondOfMinute();
        int int26 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        long long34 = dateTimeZone29.nextTransition((-1L));
        int int36 = dateTimeZone29.getStandardOffset((long) 'x');
        java.lang.String str37 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime38 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone29);
        java.util.Locale locale43 = new java.util.Locale("1738-06-04t09:43:28.618 (539)", "306", "35026152");
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = locale46.getLanguage();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getDisplayScript();
        java.lang.String str53 = locale46.getDisplayVariant(locale49);
        java.lang.String str54 = locale45.getDisplayVariant(locale49);
        boolean boolean55 = locale49.hasExtensions();
        java.lang.String str56 = locale43.getDisplayCountry(locale49);
        boolean boolean57 = dateTimeZone29.equals((java.lang.Object) locale49);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 768 + "'", int21 == 768);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1738 + "'", int24 == 1738);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals(locale43.toString(), "1738-06-04t09:43:28.618 (539)_306_35026152");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "306" + "'", str44, "306");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English (Canada)" + "'", str50, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "306" + "'", str56, "306");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test12492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12492");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Chronology chronology22 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusSeconds(458);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        int int26 = property25.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test12493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12493");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        long long13 = copticChronology8.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone14 = copticChronology8.getZone();
        long long18 = dateTimeZone14.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 292272708, dateTimeZone14);
        org.joda.time.Chronology chronology20 = copticChronology0.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone21 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1136091124375922418L + "'", long13 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test12494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12494");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        java.lang.String str8 = dateTimeZone6.getID();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
    }

    @Test
    public void test12495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12495");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology3.centuries();
        org.joda.time.DurationField durationField6 = copticChronology3.weeks();
        org.joda.time.DurationField durationField7 = copticChronology3.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology3.add(readablePeriod8, 1644572692491L, 566);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology3.monthOfYear();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644572692491L + "'", long11 == 1644572692491L);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12496");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology18.era();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology18.era();
        org.joda.time.DurationField durationField32 = copticChronology18.millis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology36);
        org.joda.time.Chronology chronology38 = copticChronology36.withUTC();
        java.lang.String str39 = copticChronology36.toString();
        boolean boolean40 = copticChronology18.equals((java.lang.Object) copticChronology36);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology36.year();
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime54);
        int int56 = localDateTime44.getMinuteOfHour();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = localDateTime44.toDateTime(dateTimeZone59);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology69.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withMillisOfDay((int) (byte) 100);
        java.lang.String str77 = localDateTime76.toString();
        org.joda.time.LocalDateTime.Property property78 = localDateTime76.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.minusMillis(0);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.plus(readablePeriod81);
        org.joda.time.DateTime dateTime83 = localDateTime76.toDateTime();
        boolean boolean84 = dateTimeZone59.isLocalDateTimeGap(localDateTime76);
        java.lang.String str85 = dateTimeZone59.getID();
        org.joda.time.Chronology chronology86 = copticChronology36.withZone(dateTimeZone59);
        long long88 = dateTimeZone59.convertUTCToLocal((long) 100);
        java.lang.String str89 = dateTimeZone59.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CopticChronology[+01:03]" + "'", str39, "CopticChronology[+01:03]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 51 + "'", int56 == 51);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1738-06-04T00:00:00.100" + "'", str77, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "UTC" + "'", str85, "UTC");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 100L + "'", long88 == 100L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
    }

    @Test
    public void test12497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12497");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1737-06-04T09:43:32.299+10:00");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        timeZone5.setID("798");
        timeZone5.setRawOffset(540);
        timeZone5.setID("838");
        java.lang.Object obj12 = timeZone5.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "sun.util.calendar.ZoneInfo[id=\"838\",offset=540,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "sun.util.calendar.ZoneInfo[id=\"838\",offset=540,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "sun.util.calendar.ZoneInfo[id=\"838\",offset=540,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test12498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12498");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, (long) 313, 2);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 313L + "'", long13 == 313L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test12499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12499");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        int int21 = property19.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 987 + "'", int18 == 987);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test12500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12500");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withMillisOfDay((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology14.add(readablePeriod16, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField20 = copticChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology14.era();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime23.getFieldTypes();
        boolean boolean25 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusMonths(406);
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusYears(35440365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573075005L + "'", long9 == 1644573075005L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }
}

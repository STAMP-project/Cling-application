import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest34 {

    public static boolean debug = false;

    @Test
    public void test17001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17001");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0, 781);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 781");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17002");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder64.setExtension('x', "811");
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.util.Set<java.lang.String> strSet71 = locale69.getUnicodeLocaleKeys();
        java.lang.String str72 = locale69.getDisplayScript();
        java.lang.String str73 = locale69.getDisplayVariant();
        java.lang.String str74 = locale69.getDisplayScript();
        java.util.Locale.Builder builder75 = builder67.setLocale(locale69);
        java.util.Locale locale76 = java.util.Locale.KOREA;
        java.lang.String str77 = locale76.getScript();
        java.lang.String str78 = locale76.getISO3Country();
        boolean boolean79 = locale76.hasExtensions();
        java.util.Locale.Builder builder80 = builder67.setLocale(locale76);
        java.util.Locale locale81 = locale76.stripExtensions();
        java.lang.String str82 = property61.getAsText(locale76);
        java.util.Locale locale83 = locale76.stripExtensions();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 926 + "'", int8 == 926);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English (Canada)" + "'", str70, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "KOR" + "'", str78, "KOR");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "66" + "'", str82, "66");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko_KR");
    }

    @Test
    public void test17003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17003");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology3.centuries();
        org.joda.time.DurationField durationField6 = copticChronology3.weeks();
        org.joda.time.DurationField durationField7 = copticChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology3.dayOfWeek();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17004");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(607);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone2);
        boolean boolean4 = timeZone2.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17005");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        boolean boolean23 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField27 = property25.getDurationField();
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.util.Locale.setDefault(locale31);
        java.lang.String str37 = nameProvider29.getName(locale31, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        java.lang.String str38 = locale31.getDisplayVariant();
        org.joda.time.LocalDateTime localDateTime39 = property25.setCopy("782", locale31);
        org.joda.time.LocalDateTime localDateTime40 = property25.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        java.lang.String str42 = property41.getAsText();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English (Canada)" + "'", str33, "English (Canada)");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Sunday" + "'", str42, "Sunday");
    }

    @Test
    public void test17006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17006");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        boolean boolean41 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean44 = dateTime30.equals((java.lang.Object) 0L);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime30.getZone();
        long long46 = dateTime30.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        long long68 = dateTime66.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology69.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.millisOfSecond();
        org.joda.time.LocalDateTime.Property property75 = localDateTime71.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime76 = property75.roundHalfFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology77 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.hourOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.plusYears((int) (short) -1);
        int[] intArray85 = localDateTime84.getValues();
        org.joda.time.LocalDateTime.Property property86 = localDateTime84.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray87 = localDateTime84.getFieldTypes();
        int int88 = localDateTime84.getMonthOfYear();
        org.joda.time.DateTime dateTime89 = localDateTime84.toDateTime();
        int int90 = property75.compareTo((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Chronology chronology92 = dateTime66.getChronology();
        boolean boolean93 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-7339385218997L) + "'", long46 == (-7339385218997L));
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-7339385218997L) + "'", long68 == (-7339385218997L));
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(copticChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(intArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1737, 6, 4, 35581003]");
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(chronology92);
// flaky:         org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test17007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17007");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology0.centuries();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfYear();
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17008");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(955);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime5.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property21 = localDateTime5.millisOfDay();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = property21.getAsShortText(locale22);
        java.lang.String str26 = locale22.getDisplayVariant();
        java.lang.String str27 = locale22.getDisplayName();
        java.lang.String str28 = dateTimeZone1.getName(74690L, locale22);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        boolean boolean30 = locale29.hasExtensions();
        java.util.Set<java.lang.Character> charSet31 = locale29.getExtensionKeys();
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale22.getDisplayLanguage(locale29);
        java.util.Locale locale34 = locale29.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("1737-06-04T09:44:05.259+10:00");
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setExtension('x', "811");
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getDisplayScript();
        java.lang.String str46 = locale42.getDisplayVariant();
        java.lang.String str47 = locale42.getDisplayScript();
        java.util.Locale.Builder builder48 = builder40.setLocale(locale42);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale49.getScript();
        java.lang.String str51 = locale49.getISO3Country();
        boolean boolean52 = locale49.hasExtensions();
        java.util.Locale.Builder builder53 = builder40.setLocale(locale49);
        java.lang.String str54 = locale36.getDisplayVariant(locale49);
        java.lang.String str55 = locale36.getDisplayLanguage();
        java.lang.String str56 = locale36.getDisplayVariant();
        java.lang.String str57 = locale29.getDisplayName(locale36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "35581066" + "'", str25, "35581066");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.955" + "'", str28, "+00:00:00.955");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale36.toString(), "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English (Canada)" + "'", str43, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "KOR" + "'", str51, "KOR");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1737-06-04t09:44:05.259+10:00" + "'", str55, "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English (Canada)" + "'", str57, "English (Canada)");
    }

    @Test
    public void test17009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17009");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology0.add(readablePeriod3, (long) 625, 635);
        org.joda.time.DurationField durationField7 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 625L + "'", long6 == 625L);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test17010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17010");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays(580);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withPeriodAdded(readablePeriod22, 207);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes(292272708);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573181100L + "'", long9 == 1644573181100L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test17011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17011");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long10 = copticChronology0.add(1644572616856L, 1644572617993L, 700);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property29 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime.Property property30 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withHourOfDay(22);
        int int50 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withMillisOfSecond(283);
        int int53 = localDateTime52.getSecondOfMinute();
        org.joda.time.Chronology chronology54 = localDateTime52.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime57.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property71 = localDateTime57.dayOfMonth();
        int int72 = property71.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime74 = property71.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plus(readableDuration75);
        int[] intArray78 = chronology54.get((org.joda.time.ReadablePartial) localDateTime76, 1644572639605L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime31, intArray78);
        org.joda.time.DurationField durationField80 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1152845405211956L + "'", long10 == 1152845405211956L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 30 + "'", int72 == 30);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1738, 6, 4, 35039605]");
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test17012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17012");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withPeriodAdded(readablePeriod20, 478);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.withDurationAdded(readableDuration23, 0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test17013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17013");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime4 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = property2.setCopy(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = property12.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = property12.roundHalfEvenCopy();
        int int17 = localDateTime16.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusSeconds(697);
        boolean boolean20 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime6.monthOfYear();
        java.lang.String str22 = property21.toString();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[monthOfYear]" + "'", str22, "Property[monthOfYear]");
    }

    @Test
    public void test17014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17014");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(416);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        java.lang.String str11 = localDateTime7.toString("760");
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusSeconds(934);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        long long22 = dateTimeZone17.nextTransition((-1L));
        long long24 = dateTimeZone15.getMillisKeepLocal(dateTimeZone17, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime7.withWeekOfWeekyear(1108800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1108800000 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "760" + "'", str11, "760");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999031L) + "'", long24 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17015");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDateTime2.toDateTime(dateTimeZone17);
        int int19 = localDateTime2.size();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        int[] intArray28 = localDateTime27.getValues();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusDays(4);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withDurationAdded(readableDuration32, 948);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localDateTime34.getValue(150);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 150");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1737, 6, 4, 35581189]");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test17016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17016");
        java.util.Locale locale2 = new java.util.Locale("Canada", "273");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "canada_273");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17017");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withWeekyear(514);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(441);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test17018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17018");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime7.minusHours(366);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusHours(269);
        int int64 = localDateTime61.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property65 = localDateTime61.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 38 + "'", int64 == 38);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test17019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17019");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withPeriodAdded(readablePeriod9, 723);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        boolean boolean35 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.year();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfCeilingCopy();
        boolean boolean39 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime4.minusMillis((int) 'u');
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusDays(918);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        long long50 = dateTimeZone46.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        java.lang.String str53 = dateTimeZone46.getShortName(1644572969563L);
        org.joda.time.DateTime dateTime54 = localDateTime44.toDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property55 = localDateTime44.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1738 + "'", int42 == 1738);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 36000000L + "'", long50 == 36000000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test17020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17020");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getDisplayVariant();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test17021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17021");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "709");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder15 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder18 = builder12.setExtension('u', "35026152");
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = builder18.build();
        java.util.Locale.Builder builder21 = builder7.setLocale(locale20);
        java.util.Locale.Builder builder23 = builder7.setRegion("878");
        java.util.Locale locale24 = builder23.build();
        java.util.Locale.Builder builder26 = builder23.addUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder27 = builder23.clear();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale.Builder builder30 = builder23.setLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("1738-06-04T09:43:43.700");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1738-06-04T09:43:43.700 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "_878");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test17022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17022");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField15 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField17 = copticChronology0.weekyears();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test17023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17023");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str10 = copticChronology9.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = copticChronology9.add(readablePeriod11, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField15 = copticChronology9.halfdays();
        org.joda.time.DurationField durationField16 = copticChronology9.millis();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = copticChronology9.add(readablePeriod17, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField22 = copticChronology9.millis();
        boolean boolean23 = languageRange1.equals((java.lang.Object) copticChronology9);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test17024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17024");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusDays(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes(36000000);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        boolean boolean42 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime41);
        long long43 = dateTime41.getMillis();
        org.joda.time.Chronology chronology44 = dateTime41.getChronology();
        int int45 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str47 = copticChronology46.toString();
        org.joda.time.DurationField durationField48 = copticChronology46.millis();
        org.joda.time.DurationField durationField49 = copticChronology46.months();
        long long53 = copticChronology46.add(1644572688615L, 1644572685076L, 30);
        org.joda.time.Chronology chronology54 = copticChronology46.withUTC();
        org.joda.time.DurationField durationField55 = chronology54.centuries();
        boolean boolean56 = dateTime20.equals((java.lang.Object) durationField55);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35581322]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-7339421218678L) + "'", long43 == (-7339421218678L));
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CopticChronology[UTC]" + "'", str47, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 50981753240895L + "'", long53 == 50981753240895L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test17025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17025");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("527");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test17026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17026");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology64 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.millisOfSecond();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = property69.getAsText(locale70);
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.lang.String str74 = locale70.getDisplayLanguage(locale72);
        java.lang.String str75 = locale70.getISO3Language();
        java.lang.String str76 = property61.getAsShortText(locale70);
        long long77 = property61.remainder();
        org.joda.time.LocalDateTime localDateTime79 = property61.addWrapFieldToCopy(35145906);
        org.joda.time.chrono.CopticChronology copticChronology80 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField81 = copticChronology80.dayOfYear();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.hourOfDay();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime82.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime82.withTime(23, 4, 9, 0);
        int int93 = property61.compareTo((org.joda.time.ReadablePartial) localDateTime82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = null;
        java.lang.String str95 = localDateTime82.toString(dateTimeFormatter94);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 360 + "'", int8 == 360);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(copticChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "360" + "'", str71, "360");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u82f1\u8a9e" + "'", str74, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "eng" + "'", str75, "eng");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "66" + "'", str76, "66");
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 35581360L + "'", long77 == 35581360L);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(copticChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1738-06-04T09:53:01.360" + "'", str95, "1738-06-04T09:53:01.360");
    }

    @Test
    public void test17027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17027");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withHourOfDay(22);
        int int29 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withMillisOfSecond(283);
        int int32 = localDateTime31.getSecondOfMinute();
        org.joda.time.Chronology chronology33 = localDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.Chronology chronology35 = copticChronology1.withZone(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(1644572717259L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readableDuration37);
        int int39 = localDateTime38.size();
        int int40 = localDateTime38.getHourOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
    }

    @Test
    public void test17028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17028");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime51 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = property52.setCopy(30375);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30375 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test17029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17029");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone4.isLocalDateTimeGap(localDateTime9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str13 = dateTimeZone4.getID();
        long long15 = dateTimeZone4.nextTransition((-7339385506286L));
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-7339385506286L) + "'", long15 == (-7339385506286L));
    }

    @Test
    public void test17030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17030");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 387);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test17031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17031");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy(10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str8 = dateTimeZone7.getID();
        boolean boolean10 = dateTimeZone7.isStandardOffset(10L);
        java.lang.String str11 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Country();
        int int21 = property17.getMaximumTextLength(locale18);
        java.util.Locale locale24 = new java.util.Locale("1737-06-03T23:43:36.994Z", "German (Germany)");
        java.lang.String str25 = property17.getAsText(locale24);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "709");
        java.util.Locale locale30 = builder29.build();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.millisOfSecond();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = property36.getAsText(locale37);
        java.lang.String str39 = locale30.getDisplayVariant(locale37);
        java.lang.String str40 = locale24.getDisplayLanguage(locale37);
        java.util.Locale locale44 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.lang.String str52 = property50.getAsText(locale51);
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale51.getDisplayVariant(locale53);
        java.util.Locale locale58 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str59 = locale53.getDisplayName(locale58);
        java.lang.String str60 = locale58.getCountry();
        java.lang.String str61 = locale44.getDisplayScript(locale58);
        java.lang.String str62 = locale24.getDisplayLanguage(locale58);
        java.lang.String str63 = dateTimeZone7.getName(1644572732446L, locale24);
        java.lang.String str64 = locale24.getScript();
        java.lang.String str65 = locale24.getLanguage();
        java.lang.String str66 = property3.getAsText(locale24);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals(locale24.toString(), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10" + "'", str25, "10");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "460" + "'", str38, "460");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1737-06-03t23:43:36.994z" + "'", str40, "1737-06-03t23:43:36.994z");
        org.junit.Assert.assertEquals(locale44.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "460" + "'", str52, "460");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(locale58.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (China)" + "'", str59, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "539" + "'", str60, "539");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1737-06-03t23:43:36.994z" + "'", str62, "1737-06-03t23:43:36.994z");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1737-06-03t23:43:36.994z" + "'", str65, "1737-06-03t23:43:36.994z");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "19" + "'", str66, "19");
    }

    @Test
    public void test17032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17032");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str10 = locale7.getExtension('u');
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FRA" + "'", str8, "FRA");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test17033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17033");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(331, 583, 843, 628, 1736, 334, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 628 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17034");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("eng", strMap2);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream4 = languageRangeList3.stream();
        boolean boolean5 = strSet0.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3);
        java.util.Iterator<java.lang.String> strItor6 = strSet0.iterator();
        boolean boolean8 = strSet0.add("358");
        java.util.Iterator<java.lang.String> strItor9 = strSet0.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("eng", strMap11);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfSecond();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsText(locale39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale13, locale14, locale21, locale23, locale24, locale25, locale27, locale30, locale32, locale39, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList44);
        boolean boolean47 = strSet0.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap48);
        java.util.Set<java.lang.String> strSet50 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        boolean boolean54 = strSet50.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, strMap55);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream57 = languageRangeList52.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.parse("eng", strMap59);
        java.util.Set<java.lang.String> strSet61 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        boolean boolean65 = strSet61.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63);
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strSet66);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strList67, filteringMode68);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList67);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        boolean boolean75 = strSet71.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.util.Locale locale81 = java.util.Locale.CANADA;
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.lang.String str83 = locale81.getDisplayName(locale82);
        java.util.Locale.setDefault(locale81);
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.util.Locale locale86 = java.util.Locale.CANADA;
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.lang.String str88 = locale86.getDisplayName(locale87);
        java.util.Set<java.lang.String> strSet89 = locale87.getUnicodeLocaleKeys();
        java.util.Locale locale90 = java.util.Locale.KOREAN;
        java.util.Locale locale91 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray92 = new java.util.Locale[] { locale79, locale80, locale81, locale85, locale87, locale90, locale91 };
        java.util.ArrayList<java.util.Locale> localeList93 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList93, localeArray92);
        java.util.Locale locale95 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale locale96 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale locale97 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale locale98 = java.util.Locale.lookup(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList93);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "505" + "'", str22, "505");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "505" + "'", str40, "505");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(languageRangeStream57);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode68.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "English (Canada)" + "'", str83, "English (Canada)");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "English (Canada)" + "'", str88, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ko");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(locale95);
        org.junit.Assert.assertNull(locale96);
        org.junit.Assert.assertNull(locale97);
        org.junit.Assert.assertNull(locale98);
    }

    @Test
    public void test17035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17035");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1738-06-04T09:44:38.374");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
    }

    @Test
    public void test17036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17036");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder10 = builder8.setRegion("912");
        java.util.Locale.Builder builder12 = builder8.addUnicodeLocaleAttribute("408");
        java.util.Locale locale13 = builder8.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "_912_#u-408");
    }

    @Test
    public void test17037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17037");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond(283);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusDays(52);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.lang.String str27 = dateTimeZone24.toString();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str29 = copticChronology28.toString();
        long long33 = copticChronology28.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology28.weekOfWeekyear();
        boolean boolean35 = dateTimeZone24.equals((java.lang.Object) copticChronology28);
        boolean boolean37 = dateTimeZone24.isStandardOffset(1644572616432L);
        java.lang.String str39 = dateTimeZone24.getNameKey((long) 812);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime41 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime22.minusDays(2020);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date44 = localDateTime22.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -542 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1136091124375922418L + "'", long33 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test17038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17038");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeZone dateTimeZone10 = copticChronology0.getZone();
        org.joda.time.DurationField durationField11 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test17039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17039");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekyear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale9.getExtension('u');
        java.lang.String str13 = property8.getAsShortText(locale9);
        int int14 = property8.getMinimumValue();
        java.lang.String str15 = property8.getAsText();
        org.joda.time.LocalDateTime localDateTime16 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1738" + "'", str13, "1738");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292269337) + "'", int14 == (-292269337));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1738" + "'", str15, "1738");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17040");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test17041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17041");
        java.lang.String[] strArray18 = new java.lang.String[] { "93", "171", "93", "93", "en", "160", "hi!", "Greenwich Mean Time", "449", "eng", "449", "527", "Chinese (China)", "en", "Chinese (China)", "en_CA", "+10:00", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "+10:00", "en" };
        java.lang.CharSequence[] charSequenceArray24 = strSet19.toArray(charSequenceArray23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField26 = copticChronology25.hours();
        int int27 = copticChronology25.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology25.era();
        org.joda.time.DurationField durationField29 = copticChronology25.days();
        boolean boolean30 = strSet19.remove((java.lang.Object) copticChronology25);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology25.year();
        org.joda.time.DurationField durationField33 = copticChronology25.seconds();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology25.weekOfWeekyear();
        org.joda.time.Chronology chronology35 = copticChronology25.withUTC();
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime48);
        int int50 = localDateTime38.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime38.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.hourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.plusYears((int) (short) -1);
        int[] intArray61 = localDateTime60.getValues();
        boolean boolean62 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.DateTime dateTime63 = localDateTime60.toDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.minusHours(9736);
        org.joda.time.chrono.CopticChronology copticChronology66 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = property71.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.plusHours(22);
        int[] intArray81 = localDateTime80.getValues();
        copticChronology25.validate((org.joda.time.ReadablePartial) localDateTime60, intArray81);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(copticChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1737, 6, 4, 35581628]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(copticChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(intArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1738, 5, 25, 28381628]");
    }

    @Test
    public void test17042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17042");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        int int8 = localDateTime7.getYearOfCentury();
        int int9 = localDateTime7.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.Object[] objArray15 = strSet14.toArray();
        boolean boolean16 = property10.equals((java.lang.Object) objArray15);
        int int17 = property10.getLeapAmount();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property10.getFieldType();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 38 + "'", int8 == 38);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (Canada)" + "'", str13, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test17043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17043");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology35.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        int[] intArray47 = localDateTime46.getValues();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusYears((int) (short) -1);
        int[] intArray58 = localDateTime57.getValues();
        copticChronology35.validate((org.joda.time.ReadablePartial) localDateTime49, intArray58);
        int int60 = localDateTime49.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime49.minus(readablePeriod61);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        int int73 = localDateTime70.getDayOfYear();
        int[] intArray74 = localDateTime70.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime62, intArray74);
        org.joda.time.DateTimeField dateTimeField76 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField77 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573181680L + "'", long9 == 1644573181680L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485181680L + "'", long31 == 5431485181680L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1737, 6, 4, 35581680]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1737, 6, 4, 35581680]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 154 + "'", int73 == 154);
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1737, 6, 4, 35581680]");
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test17044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17044");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfEra(7);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay(154);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str28 = copticChronology27.toString();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = copticChronology27.add(readablePeriod29, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField33 = copticChronology27.halfdays();
        org.joda.time.DurationField durationField34 = copticChronology27.millis();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology27.millisOfDay();
        org.joda.time.DurationField durationField36 = copticChronology27.centuries();
        org.joda.time.DurationField durationField37 = copticChronology27.months();
        org.joda.time.DurationField durationField38 = copticChronology27.halfdays();
        org.joda.time.DurationField durationField39 = copticChronology27.months();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 946, (org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears(113);
        int int43 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime46.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime46.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property62 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime46.withWeekyear(514);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.hourOfDay();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime(readableInstant73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.yearOfCentury();
        boolean boolean76 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.plusWeeks(814);
        boolean boolean79 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.chrono.CopticChronology copticChronology80 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField81 = copticChronology80.dayOfYear();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.millisOfSecond();
        java.util.Locale locale86 = java.util.Locale.ENGLISH;
        java.lang.String str87 = property85.getAsText(locale86);
        long long88 = property85.remainder();
        org.joda.time.LocalDateTime localDateTime89 = property85.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.withDayOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime89.minusMonths(1);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.LocalDateTime.Property property95 = localDateTime94.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = property95.getFieldType();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CopticChronology[UTC]" + "'", str28, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(copticChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "710" + "'", str87, "710");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
    }

    @Test
    public void test17045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17045");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.year();
        org.joda.time.DurationField durationField9 = copticChronology0.seconds();
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17046");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder3.setRegion("293");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder7.setRegion("409");
        java.util.Locale.Builder builder11 = builder7.setRegion("812");
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = builder11.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_293_#x-709");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "_812");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "_812");
    }

    @Test
    public void test17047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17047");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        int int7 = timeZone1.getOffset((long) 52);
        boolean boolean8 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test17048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17048");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone2);
        boolean boolean8 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(1644572629286L, dateTimeZone2);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.DurationField durationField22 = chronology20.centuries();
        boolean boolean23 = dateTimeZone2.equals((java.lang.Object) chronology20);
        java.lang.String str24 = dateTimeZone2.getID();
        org.joda.time.tz.Provider provider25 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider25);
        org.joda.time.DateTimeZone.setProvider(provider25);
        org.joda.time.DateTimeZone dateTimeZone29 = provider25.getZone("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.joda.time.DateTimeZone.setProvider(provider25);
        boolean boolean31 = dateTimeZone2.equals((java.lang.Object) provider25);
        org.joda.time.DateTimeZone.setProvider(provider25);
        org.joda.time.DateTimeZone dateTimeZone34 = provider25.getZone("385");
        org.joda.time.DateTimeZone dateTimeZone36 = provider25.getZone("1738-06-04T09:48:12.305");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(dateTimeZone34);
        org.junit.Assert.assertNull(dateTimeZone36);
    }

    @Test
    public void test17049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17049");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField3 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test17050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17050");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        int int5 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(35050512);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-292275054) + "'", int3 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-292275054) + "'", int5 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test17051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17051");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.era();
        org.joda.time.DurationField durationField7 = copticChronology5.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test17052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17052");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String str4 = nameProvider0.getName(locale1, "fr", "572");
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale6.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet11 = locale6.getExtensionKeys();
        java.lang.String str12 = locale6.getDisplayVariant();
        java.lang.String str13 = locale6.toLanguageTag();
        java.lang.String str16 = nameProvider0.getShortName(locale6, "653", "84");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-CA" + "'", str13, "en-CA");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test17053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17053");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("813");
        java.util.Locale locale10 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.setScript("Property[centuryOfEra]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Property[centuryOfEra] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
    }

    @Test
    public void test17054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17054");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYearOfEra(278);
        int int28 = localDateTime27.size();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDurationAdded(readableDuration29, 35491175);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35581847]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35581847]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test17055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17055");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        java.lang.String str10 = property5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property5.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property5.addWrapFieldToCopy(414);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology14.add(readablePeriod16, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField20 = copticChronology14.eras();
        org.joda.time.Chronology chronology21 = copticChronology14.withUTC();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology22.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        int[] intArray34 = localDateTime33.getValues();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        int[] intArray45 = localDateTime44.getValues();
        copticChronology22.validate((org.joda.time.ReadablePartial) localDateTime36, intArray45);
        int int47 = localDateTime36.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime36.minus(readablePeriod48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.hourOfDay();
        int[] intArray52 = chronology21.get((org.joda.time.ReadablePartial) localDateTime49, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.year();
        int int56 = property55.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property55.getFieldType();
        boolean boolean58 = localDateTime49.isSupported(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime13.withField(dateTimeFieldType57, 486);
        int int61 = localDateTime60.getDayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "869" + "'", str7, "869");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[millisOfSecond]" + "'", str10, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1737, 6, 4, 35581869]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1737, 6, 4, 35581869]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-292275054) + "'", int56 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
    }

    @Test
    public void test17056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17056");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        boolean boolean41 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean44 = dateTime30.equals((java.lang.Object) 0L);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime30.getZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str49 = dateTimeZone48.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        java.lang.String str52 = dateTimeZone48.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone48);
        boolean boolean54 = dateTimeZone48.isFixed();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(1644572629286L, dateTimeZone48);
        long long57 = dateTimeZone45.getMillisKeepLocal(dateTimeZone48, 5431484671424L);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusHours(760);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.minuteOfHour();
        boolean boolean63 = dateTimeZone48.isLocalDateTimeGap(localDateTime61);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:00" + "'", str49, "+10:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 5431484671424L + "'", long57 == 5431484671424L);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test17057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17057");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.year();
        org.joda.time.DurationField durationField9 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str13 = copticChronology12.toString();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = copticChronology12.add(readablePeriod14, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField18 = copticChronology12.halfdays();
        org.joda.time.DurationField durationField19 = copticChronology12.millis();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology12.add(readablePeriod20, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology12.weekyearOfCentury();
        int int25 = copticChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology12.halfdayOfDay();
        boolean boolean27 = copticChronology0.equals((java.lang.Object) copticChronology12);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology28.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        int[] intArray51 = localDateTime50.getValues();
        copticChronology28.validate((org.joda.time.ReadablePartial) localDateTime42, intArray51);
        int int53 = localDateTime42.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime42.minusDays(782);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(49);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.dayOfYear();
        long long60 = copticChronology12.set((org.joda.time.ReadablePartial) localDateTime55, (long) 877);
        org.joda.time.DateTimeField dateTimeField61 = copticChronology12.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CopticChronology[UTC]" + "'", str13, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 35L + "'", long23 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1737, 6, 4, 35581930]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1737, 6, 4, 35581930]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1545126781930L + "'", long60 == 1545126781930L);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test17058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17058");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(332);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 332 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17059");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        boolean boolean19 = property9.equals((java.lang.Object) property17);
        org.joda.time.DurationField durationField20 = property17.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.lang.String[] strArray32 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        boolean boolean36 = strSet33.equals((java.lang.Object) locale35);
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.lang.String str38 = locale22.getDisplayVariant(locale35);
        java.lang.String str39 = property17.getAsText(locale35);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfSecond();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = property45.getAsText(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale49.getDisplayCountry(locale52);
        java.lang.String str54 = locale46.getDisplayName(locale49);
        java.lang.String str55 = locale46.getDisplayName();
        boolean boolean56 = locale46.hasExtensions();
        java.lang.String str57 = locale35.getDisplayScript(locale46);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder58.setExtension('x', "811");
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleKeys();
        java.lang.String str66 = locale63.getDisplayScript();
        java.lang.String str67 = locale63.getDisplayVariant();
        java.lang.String str68 = locale63.getDisplayScript();
        java.util.Locale.Builder builder69 = builder61.setLocale(locale63);
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = locale35.getDisplayScript(locale70);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35581968]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "968" + "'", str39, "968");
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "968" + "'", str47, "968");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English (Canada)" + "'", str50, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Canada" + "'", str53, "Canada");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English (Canada)" + "'", str64, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test17060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17060");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        long long6 = copticChronology0.add((long) (byte) -1, (long) 43, 1737);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withTime(23, 4, 9, 0);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str22 = copticChronology21.toString();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = copticChronology21.add(readablePeriod23, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField27 = copticChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology21.centuryOfEra();
        long long33 = copticChronology21.add(1644572579020L, 1644572639605L, 648);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int36 = localDateTime35.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusDays(687);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.monthOfYear();
        int int40 = localDateTime35.getYearOfCentury();
        int[] intArray42 = copticChronology21.get((org.joda.time.ReadablePartial) localDateTime35, 1644572701420L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime10, intArray42);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusYears(684);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withHourOfDay(171);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 171 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 74690L + "'", long6 == 74690L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CopticChronology[UTC]" + "'", str22, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1067327643043060L + "'", long33 == 1067327643043060L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1738, 6, 4, 35101420]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test17061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17061");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(102);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        int int22 = property20.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test17062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17062");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField36 = copticChronology0.seconds();
        org.joda.time.DurationField durationField37 = copticChronology0.halfdays();
        org.joda.time.DateTimeZone dateTimeZone38 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573182029L + "'", long9 == 1644573182029L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485182029L + "'", long31 == 5431485182029L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
    }

    @Test
    public void test17063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17063");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 22);
        long long6 = dateTimeZone2.convertUTCToLocal(1L);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = dateTimeZone2.getName(1644572692240L, locale8);
        boolean boolean11 = dateTimeZone2.isStandardOffset(128L);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        boolean boolean32 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        boolean boolean53 = dateTime42.isEqual((org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean56 = dateTime42.equals((java.lang.Object) 0L);
        int int57 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime42.getZone();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 423, dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000001L + "'", long6 == 36000001L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 36000000 + "'", int57 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test17064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17064");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) '#');
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('x', "709");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder20 = builder17.setLocale(locale19);
        java.util.Locale.Builder builder23 = builder17.setExtension('u', "35026152");
        java.util.Locale.Builder builder26 = builder23.setExtension('a', "196");
        boolean boolean27 = localDateTime11.equals((java.lang.Object) builder26);
        java.util.Locale.Builder builder28 = builder26.clear();
        java.util.Locale.Builder builder30 = builder28.addUnicodeLocaleAttribute("328");
        java.util.Locale.Builder builder33 = builder28.setExtension('x', "kor");
        java.util.Locale.Builder builder34 = builder28.clearExtensions();
        java.util.Locale.Builder builder36 = builder34.setScript("");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test17065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17065");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        boolean boolean37 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        boolean boolean58 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime47);
        int int60 = property16.compareTo((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean61 = strSet9.remove((java.lang.Object) property16);
        org.joda.time.LocalDateTime localDateTime63 = property16.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = property16.withMinimumValue();
        int int65 = property16.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime67 = property16.setCopy("267");
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfEra();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 999 + "'", int65 == 999);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test17066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17066");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder60.setExtension('x', "709");
        java.util.Locale locale64 = builder63.build();
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        boolean boolean66 = copticChronology0.equals((java.lang.Object) locale64);
        java.lang.String str67 = copticChronology0.toString();
        org.joda.time.Chronology chronology68 = copticChronology0.withUTC();
        long long72 = copticChronology0.add(1644572738555L, (long) 1670, 16);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "CopticChronology[UTC]" + "'", str67, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1644572765275L + "'", long72 == 1644572765275L);
    }

    @Test
    public void test17067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17067");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.withYear(42);
        int int22 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test17068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17068");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getDisplayLanguage(locale8);
        java.lang.String str11 = locale6.getISO3Language();
        java.lang.String str12 = locale6.getScript();
        java.lang.String str13 = locale6.getCountry();
        java.lang.String str14 = locale6.getCountry();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = null;
        java.lang.String str19 = nameProvider15.getShortName(locale16, "976", "493");
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale21.getDisplayCountry(locale24);
        java.lang.String str28 = nameProvider15.getShortName(locale21, "152", "878");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider15);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getDisplayVariant();
        java.util.Locale locale35 = new java.util.Locale("Greenwich Mean Time");
        java.lang.String str36 = locale30.getDisplayVariant(locale35);
        java.lang.String str39 = nameProvider15.getShortName(locale35, "508", "1737-06-04T09:45:14.832+10:00");
        java.lang.String str40 = locale6.getDisplayLanguage(locale35);
        java.lang.String str41 = locale6.getDisplayLanguage();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "189" + "'", str7, "189");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u82f1\u8a9e" + "'", str10, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Canada" + "'", str25, "Canada");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale35.toString(), "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English" + "'", str40, "English");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
    }

    @Test
    public void test17069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17069");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusDays(999);
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test17070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17070");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 22);
        java.lang.String str5 = dateTimeZone1.getShortName(1644572624742L);
        long long7 = dateTimeZone1.convertUTCToLocal(1644572611311L);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury(870);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 870 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644608611311L + "'", long7 == 1644608611311L);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test17071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17071");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.util.TimeZone timeZone6 = dateTimeZone3.toTimeZone();
        long long8 = dateTimeZone3.nextTransition((-1L));
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999031L) + "'", long10 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test17072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17072");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.time.ZoneId zoneId9 = timeZone8.toZoneId();
        java.time.ZoneId zoneId10 = timeZone8.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId10);
        int int12 = timeZone11.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17073");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayScript();
        java.lang.String str8 = locale1.getDisplayVariant(locale4);
        java.lang.String str9 = locale0.getDisplayVariant(locale4);
        java.lang.String str10 = locale4.toLanguageTag();
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray12 = strSet11.toArray();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("eng", strMap14);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        boolean boolean20 = strSet16.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList22, filteringMode23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList15, strMap25);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream27 = languageRangeList15.parallelStream();
        boolean boolean28 = strSet11.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15);
        int int29 = strSet11.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-CA" + "'", str10, "en-CA");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test17074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17074");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(44);
        int int3 = dateTimeZone1.getOffsetFromLocal(1644572632040L);
        java.lang.String str4 = dateTimeZone1.getID();
        java.lang.String str6 = dateTimeZone1.getNameKey((long) 33);
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone1.equals(obj7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 158400000 + "'", int3 == 158400000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+44:00" + "'", str4, "+44:00");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test17075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17075");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYearOfEra(278);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMinutes(404);
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.minus(readableDuration31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime25.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35582285]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35582285]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test17076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17076");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfDay();
        long long11 = copticChronology0.add(1647164948020L, (long) 34898236, 675);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1670721257320L + "'", long11 == 1670721257320L);
    }

    @Test
    public void test17077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17077");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1738-06-04T09:44:57.293+120:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17078");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("1737-06-04T09:45:46.246+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1737-06-04t09:45:46.246+10:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17079");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.plus(readablePeriod34);
        int int36 = localDateTime35.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        boolean boolean38 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int[] intArray39 = localDateTime35.getValues();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("35268120");
        boolean boolean42 = localDateTime35.equals((java.lang.Object) locale41);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 321 + "'", int36 == 321);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1738, 6, 4, 35582321]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17080");
        java.util.Locale locale1 = new java.util.Locale("35042331");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str5 = dateTimeZone4.getID();
        boolean boolean7 = dateTimeZone4.isStandardOffset(10L);
        java.lang.String str9 = dateTimeZone4.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone4);
        java.lang.String str12 = dateTimeZone4.getNameKey((long) 113);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone4);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField17 = copticChronology16.hours();
        int int18 = copticChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology16.era();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 2, (org.joda.time.Chronology) copticChronology16);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology16.millisOfDay();
        boolean boolean22 = dateTimeZone4.equals((java.lang.Object) copticChronology16);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withHourOfDay(22);
        int int41 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime25.era();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(44);
        int int46 = dateTimeZone44.getOffsetFromLocal(1644572632040L);
        boolean boolean47 = localDateTime25.equals((java.lang.Object) dateTimeZone44);
        long long49 = copticChronology16.set((org.joda.time.ReadablePartial) localDateTime25, (long) 59);
        org.joda.time.DateTimeField dateTimeField50 = copticChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology16.minuteOfDay();
        boolean boolean52 = strSet2.equals((java.lang.Object) copticChronology16);
        org.junit.Assert.assertEquals(locale1.toString(), "35042331");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 158400000 + "'", int46 == 158400000);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644573182343L + "'", long49 == 1644573182343L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test17081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17081");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17082");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean5 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(0);
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.String str9 = timeZone1.getID();
        timeZone1.setRawOffset(481);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
    }

    @Test
    public void test17083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17083");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = localDateTime15.toString(dateTimeFormatter16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusYears(35121391);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withWeekOfWeekyear(35444633);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35444633 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1738-06-04T09:53:02.387" + "'", str17, "1738-06-04T09:53:02.387");
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17084");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField10 = copticChronology0.millis();
        org.joda.time.DurationField durationField11 = copticChronology0.days();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17085");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        int int8 = dateTimeZone2.getOffset(0L);
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1644572611311L, dateTimeZone2);
        long long14 = dateTimeZone2.convertLocalToUTC(1644573016098L, false, 35077641L);
        int int16 = dateTimeZone2.getOffsetFromLocal(5431485150066L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644537016098L + "'", long14 == 1644537016098L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
    }

    @Test
    public void test17086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17086");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        long long7 = copticChronology3.add(1152845405211956L, (long) 710, 744);
        org.joda.time.DurationField durationField8 = copticChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology3.dayOfYear();
        org.joda.time.DurationField durationField10 = copticChronology3.millis();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1152845405740196L + "'", long7 == 1152845405740196L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17087");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = copticChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone2 = copticChronology0.getZone();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray6 = copticChronology0.get(readablePeriod3, 1644572965657L, (long) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test17088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17088");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.lang.String[] strArray14 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        boolean boolean18 = strSet15.equals((java.lang.Object) locale17);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Set<java.lang.String> strSet20 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        boolean boolean24 = strSet20.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet25);
        boolean boolean27 = strSet15.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("eng", strMap29);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream31 = languageRangeList30.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.parse("eng", strMap33);
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.millisOfSecond();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = property42.getAsText(locale43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Locale locale54 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.millisOfSecond();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = property60.getAsText(locale61);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray65 = new java.util.Locale[] { locale35, locale36, locale43, locale45, locale46, locale47, locale49, locale52, locale54, locale61, locale63, locale64 };
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList34, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.Locale locale69 = java.util.Locale.lookup(languageRangeList30, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream70 = languageRangeList30.stream();
        boolean boolean71 = strSet15.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30);
        java.util.Spliterator<java.lang.String> strSpliterator72 = strSet15.spliterator();
        java.util.Set<java.lang.String> strSet73 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        boolean boolean77 = strSet73.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, strMap78);
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        java.lang.String str82 = java.util.Locale.lookupTag(languageRangeList79, (java.util.Collection<java.lang.String>) strSet81);
        boolean boolean83 = strSet15.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList79, strMap84);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeStream31);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "467" + "'", str44, "467");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English (Canada)" + "'", str50, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "467" + "'", str62, "467");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(languageRangeStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(languageRangeList85);
    }

    @Test
    public void test17089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17089");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("340");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test17090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17090");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField10 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(1644572662845L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.era();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17091");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = nameProvider0.getName(locale2, "38", "493");
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str9 = locale6.getExtension('a');
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale6.getDisplayName(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "239", "750");
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("119");
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getScript();
        java.lang.String str20 = locale18.getISO3Country();
        boolean boolean21 = locale18.hasExtensions();
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale18.getDisplayLanguage(locale23);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale32.getDisplayVariant(locale34);
        java.util.Locale locale39 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str40 = locale34.getDisplayName(locale39);
        java.lang.String str41 = locale23.getDisplayVariant(locale39);
        java.lang.String str42 = locale17.getDisplayLanguage(locale23);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property61 = localDateTime45.millisOfDay();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = property61.getAsShortText(locale62);
        java.lang.String str66 = locale62.getDisplayVariant();
        java.lang.String str67 = locale62.getDisplayName();
        java.lang.String str68 = locale23.getDisplayLanguage(locale62);
        java.lang.String str71 = nameProvider0.getName(locale62, "104", "1737-06-04T09:45:24.184Z");
        java.util.Locale locale74 = new java.util.Locale("35097201", "1737-06-04T09:44:52.347+10:00");
        java.lang.String str75 = locale62.getDisplayVariant(locale74);
        java.lang.String str76 = locale74.getDisplayVariant();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KOR" + "'", str20, "KOR");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u671d\u9c9c\u6587" + "'", str25, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "560" + "'", str33, "560");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale39.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English (Canada)" + "'", str64, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "35582560" + "'", str65, "35582560");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (Canada)" + "'", str67, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese" + "'", str68, "Chinese");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals(locale74.toString(), "35097201_1737-06-04T09:44:52.347+10:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test17092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17092");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusDays(974);
        java.lang.String str66 = localDateTime65.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 591 + "'", int8 == 591);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1745-11-09T09:53:02.591" + "'", str66, "1745-11-09T09:53:02.591");
    }

    @Test
    public void test17093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17093");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property16.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(656);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minus(readableDuration24);
        int int26 = localDateTime21.getWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1738 + "'", int26 == 1738);
    }

    @Test
    public void test17094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17094");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str3 = copticChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = copticChronology2.add(readablePeriod4, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField8 = copticChronology2.halfdays();
        org.joda.time.DurationField durationField9 = copticChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology2.millisOfDay();
        org.joda.time.DurationField durationField11 = copticChronology2.centuries();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology2.add(readablePeriod12, 35L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology2.year();
        org.joda.time.DurationField durationField18 = copticChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone19 = copticChronology2.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(1644572968174L, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 966, dateTimeZone19);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35L + "'", long15 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test17095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17095");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYearOfEra(5);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        boolean boolean12 = property10.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property10.setCopy(971);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 971 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17096");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, 605);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.era();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMonthOfYear(505);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 505 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17097");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime6.minusMonths(7);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        int[] intArray29 = localDateTime28.getValues();
        boolean boolean30 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime6.plusSeconds(846);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = property38.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = property38.roundHalfEvenCopy();
        int int43 = localDateTime42.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusSeconds(697);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.year();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withCenturyOfEra(1738);
        int int51 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        boolean boolean52 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime45.minus(readablePeriod53);
        int int55 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        java.lang.String str56 = property2.getName();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1737, 6, 4, 35582686]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "dayOfWeek" + "'", str56, "dayOfWeek");
    }

    @Test
    public void test17098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17098");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("1738-06-04T09:43:50.656");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.base.AbstractInstant[] abstractInstantArray4 = new org.joda.time.base.AbstractInstant[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.base.AbstractInstant[] abstractInstantArray5 = strSet3.toArray(abstractInstantArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(abstractInstantArray4);
    }

    @Test
    public void test17099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17099");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("1738-06-04T09:48:13.468");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '1738-06-04T09:48:13.468' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17100");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology0.withZone(dateTimeZone9);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsText(locale17);
        long long19 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = property16.withMaximumValue();
        int[] intArray24 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime22, (long) 30);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = copticChronology0.add(readablePeriod26, 1644572722078L, 632);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology0.year();
        org.joda.time.DurationField durationField31 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "734" + "'", str18, "734");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1686, 4, 23, 30]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572722078L + "'", long29 == 1644572722078L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test17101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17101");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("591");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=591");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17102");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str9 = dateTimeZone1.getNameKey((long) 113);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        int[] intArray20 = localDateTime19.getValues();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        int int23 = localDateTime19.getMonthOfYear();
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        boolean boolean48 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        int int52 = localDateTime19.indexOf(dateTimeFieldType51);
        boolean boolean53 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        java.util.TimeZone timeZone54 = dateTimeZone1.toTimeZone();
        java.lang.String str55 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1737, 6, 4, 35582765]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:00" + "'", str55, "+10:00");
    }

    @Test
    public void test17103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17103");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDayOfYear(100);
        boolean boolean28 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        int int29 = localDateTime14.getMinuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = property35.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfSecond(4);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readablePeriod39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusMonths(28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.millisOfSecond();
        int int45 = localDateTime38.getHourOfDay();
        boolean boolean46 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        int int47 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime38.minusSeconds(852);
        int[] intArray50 = localDateTime38.getValues();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime38.minusMinutes(756);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573182806L + "'", long9 == 1644573182806L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1738 + "'", int47 == 1738);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1738, 6, 4, 35582004]");
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test17104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17104");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("1738-06-04T09:44:49.900");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("1738-06-04T09:45:52.076");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("UTC");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test17105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17105");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusMonths(755);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = property40.getAsText(locale41);
        long long43 = property40.remainder();
        org.joda.time.LocalDateTime localDateTime44 = property40.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusYears(197);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.centuryOfEra();
        org.joda.time.DurationField durationField52 = property51.getDurationField();
        org.joda.time.LocalDateTime localDateTime54 = property51.addToCopy(0L);
        boolean boolean55 = localDateTime34.isEqual((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withYearOfEra(35235957);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "846" + "'", str42, "846");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test17106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17106");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekyear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale9.getExtension('u');
        java.lang.String str13 = property8.getAsShortText(locale9);
        java.lang.String str14 = property8.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property8.getFieldType();
        org.joda.time.LocalDateTime localDateTime16 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = property8.getLocalDateTime();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1738" + "'", str13, "1738");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1738" + "'", str14, "1738");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17107");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        java.lang.String str8 = localDateTime2.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(0);
        int int12 = property9.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u82f1\u8a9e" + "'", str8, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test17108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17108");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        boolean boolean19 = property9.equals((java.lang.Object) property17);
        org.joda.time.LocalDateTime localDateTime21 = property9.addWrapFieldToCopy(126);
        org.joda.time.DateTimeField dateTimeField22 = property9.getField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35582909]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test17109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17109");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        long long9 = copticChronology0.add(0L, (long) 7, 35187164);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = copticChronology0.getDateTimeMillis(128, 0, 680, 631);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 246310148L + "'", long9 == 246310148L);
    }

    @Test
    public void test17110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17110");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField13 = copticChronology0.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = copticChronology0.getDateTimeMillis(35204035, 36083869, 789, 35327442, 471, (int) 'u', 900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35327442 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test17111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17111");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYearOfEra(278);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime31.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime31.getFieldTypes();
        int int46 = localDateTime31.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.hourOfDay();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale51.getISO3Country();
        int int54 = property50.getMaximumTextLength(locale51);
        java.lang.String str55 = localDateTime31.toString("293", locale51);
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale51.getDisplayScript(locale56);
        java.lang.String str58 = locale56.getVariant();
        int int59 = property28.getMaximumShortTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property28.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readableDuration61);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35582957]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35582957]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "293" + "'", str55, "293");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test17112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17112");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.withTime(23, 4, 9, 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(0);
        int int15 = localDateTime12.getMonthOfYear();
        int int16 = localDateTime12.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
    }

    @Test
    public void test17113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17113");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.year();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField9 = copticChronology8.hours();
        int int10 = copticChronology8.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.era();
        boolean boolean12 = strSet7.remove((java.lang.Object) copticChronology8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = copticChronology8.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        java.util.TimeZone timeZone20 = dateTimeZone16.toTimeZone();
        long long22 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 128);
        boolean boolean23 = dateTimeZone13.isFixed();
        boolean boolean25 = dateTimeZone13.isStandardOffset(1136020407753600097L);
        org.joda.time.Chronology chronology26 = copticChronology1.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField27 = copticChronology1.weeks();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField29 = copticChronology28.hours();
        int int30 = copticChronology28.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology28.minuteOfHour();
        org.joda.time.DurationField durationField33 = copticChronology28.days();
        org.joda.time.DurationField durationField34 = copticChronology28.millis();
        org.joda.time.DateTimeZone dateTimeZone35 = copticChronology28.getZone();
        org.joda.time.Chronology chronology36 = copticChronology1.withZone(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(1644536807580L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField38 = copticChronology1.months();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 128L + "'", long22 == 128L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test17114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17114");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        boolean boolean21 = dateTimeZone18.isStandardOffset(10L);
        java.util.TimeZone timeZone22 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime15.toDateTime(dateTimeZone18);
        int int25 = dateTimeZone18.getStandardOffset((long) 11);
        java.lang.String str26 = dateTimeZone18.toString();
        java.util.TimeZone timeZone27 = dateTimeZone18.toTimeZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test17115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17115");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField13 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test17116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17116");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long10 = copticChronology0.add(1644572616856L, 1644572617993L, 700);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.era();
        long long15 = copticChronology0.add((long) 30, (long) 153, 0);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = copticChronology0.get(readablePeriod17, 1644572760101L, (long) 35026103);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1152845405211956L + "'", long10 == 1152845405211956L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 30L + "'", long15 == 30L);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test17117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17117");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.minuteOfHour();
        int int20 = localDateTime2.getEra();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusDays(1738);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        int int29 = localDateTime27.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        boolean boolean77 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime76);
        int int78 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime66);
        int int79 = property35.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property35.getFieldType();
        boolean boolean81 = localDateTime27.isSupported(dateTimeFieldType80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime84 = property82.addToCopy((int) (byte) 0);
        int int85 = localDateTime84.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property86 = localDateTime84.hourOfDay();
        int int87 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime84.minusHours((int) (byte) 100);
        java.lang.String str91 = localDateTime84.toString("602");
        org.joda.time.LocalDateTime localDateTime93 = localDateTime84.minusWeeks(662);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.withYear(422);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 83 + "'", int29 == 83);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "602" + "'", str91, "602");
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test17118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17118");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfCentury();
        int int28 = localDateTime24.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusYears(700);
        int int31 = localDateTime30.size();
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusYears((int) (short) -1);
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.hourOfDay();
        boolean boolean42 = property41.isLeap();
        org.joda.time.LocalDateTime localDateTime43 = property41.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.getLocalDateTime();
        boolean boolean51 = property41.equals((java.lang.Object) property49);
        org.joda.time.DurationField durationField52 = property49.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property49.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property49.getFieldType();
        boolean boolean55 = localDateTime30.isSupported(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime12.withField(dateTimeFieldType54, 625);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withMillisOfDay((int) '#');
        boolean boolean71 = dateTimeZone60.isLocalDateTimeGap(localDateTime70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone60);
        long long74 = dateTimeZone60.previousTransition(1644572610881L);
        long long77 = dateTimeZone60.convertLocalToUTC((long) (short) 1, true);
        java.util.TimeZone timeZone78 = dateTimeZone60.toTimeZone();
        long long81 = dateTimeZone60.convertLocalToUTC(1644572616856L, false);
        boolean boolean83 = dateTimeZone60.isStandardOffset((long) 113);
        org.joda.time.DateTime dateTime84 = localDateTime57.toDateTime(dateTimeZone60);
        long long85 = dateTime84.getMillis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1737, 6, 4, 35583175]");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1644572610881L + "'", long74 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-35999999L) + "'", long77 == (-35999999L));
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1644536616856L + "'", long81 == 1644536616856L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1644537183625L + "'", long85 == 1644537183625L);
    }

    @Test
    public void test17119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17119");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime62.withFields((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime62.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime62.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusMillis((int) (byte) 100);
        int[] intArray81 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime77, 5431484632041L);
        org.joda.time.DateTimeField dateTimeField82 = copticChronology0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.year();
        org.joda.time.LocalDateTime.Property property85 = localDateTime83.monthOfYear();
        org.joda.time.LocalDateTime.Property property86 = localDateTime83.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1858, 6, 4, 35032041]");
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test17120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17120");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        int int11 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMillis((-292269337));
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "273" + "'", str7, "273");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test17121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17121");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.minusMillis(758);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(181);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test17122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17122");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getISO3Country();
        int int15 = property11.getMaximumTextLength(locale12);
        java.util.Locale locale18 = new java.util.Locale("1737-06-03T23:43:36.994Z", "German (Germany)");
        java.lang.String str19 = property11.getAsText(locale18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('x', "709");
        java.util.Locale locale24 = builder23.build();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = property30.getAsText(locale31);
        java.lang.String str33 = locale24.getDisplayVariant(locale31);
        java.lang.String str34 = locale18.getDisplayLanguage(locale31);
        java.util.Locale locale38 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.millisOfSecond();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale45.getDisplayVariant(locale47);
        java.util.Locale locale52 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str53 = locale47.getDisplayName(locale52);
        java.lang.String str54 = locale52.getCountry();
        java.lang.String str55 = locale38.getDisplayScript(locale52);
        java.lang.String str56 = locale18.getDisplayLanguage(locale52);
        java.lang.String str57 = dateTimeZone1.getName(1644572732446L, locale18);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str60 = dateTimeZone59.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        java.util.TimeZone timeZone62 = dateTimeZone59.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone59);
        java.lang.String str65 = dateTimeZone59.getNameKey(1067327643043060L);
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.lang.String str70 = locale69.toLanguageTag();
        java.lang.String str71 = locale69.getLanguage();
        java.lang.String str72 = locale67.getDisplayScript(locale69);
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str74 = dateTimeZone59.getShortName(1644572767614L, locale69);
        java.lang.String str75 = locale18.getDisplayCountry(locale69);
        java.lang.Object obj76 = locale18.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals(locale18.toString(), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10" + "'", str19, "10");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "305" + "'", str32, "305");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1737-06-03t23:43:36.994z" + "'", str34, "1737-06-03t23:43:36.994z");
        org.junit.Assert.assertEquals(locale38.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "305" + "'", str46, "305");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals(locale52.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese (China)" + "'", str53, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "539" + "'", str54, "539");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1737-06-03t23:43:36.994z" + "'", str56, "1737-06-03t23:43:36.994z");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fr" + "'", str70, "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fr" + "'", str71, "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+10:00" + "'", str74, "+10:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "GERMAN (GERMANY)" + "'", str75, "GERMAN (GERMANY)");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
    }

    @Test
    public void test17123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17123");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getDayOfWeek();
        int int15 = localDateTime2.getYearOfCentury();
        int int16 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime2.withDayOfYear((int) (short) 100);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.plusSeconds((int) 'x');
        int int37 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property38 = localDateTime21.era();
        org.joda.time.LocalDateTime.Property property39 = localDateTime21.yearOfEra();
        int int40 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str42 = copticChronology41.toString();
        org.joda.time.DurationField durationField43 = copticChronology41.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        long long50 = copticChronology41.set((org.joda.time.ReadablePartial) localDateTime46, (long) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minusMinutes(10);
        int int53 = localDateTime52.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withPeriodAdded(readablePeriod54, 999);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusDays(580);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.withPeriodAdded(readablePeriod63, 207);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        org.joda.time.LocalDateTime.Property property70 = localDateTime21.property(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime21.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 38 + "'", int15 == 38);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 335 + "'", int16 == 335);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 335 + "'", int37 == 335);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CopticChronology[UTC]" + "'", str42, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644573183335L + "'", long50 == 1644573183335L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 38 + "'", int53 == 38);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test17124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17124");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology0.halfdays();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.plus(readablePeriod24);
        int int26 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMonths(3);
        int int29 = localDateTime25.getMillisOfSecond();
        int[] intArray31 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime25, (long) 316);
        org.joda.time.DurationField durationField32 = copticChronology0.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) durationField32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.LimitChronology$LimitDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 370 + "'", int26 == 370);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 370 + "'", int29 == 370);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1686, 4, 23, 316]");
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test17125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17125");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus(readablePeriod18);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths(3);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plus(readableDuration23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(308);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        org.joda.time.Chronology chronology28 = localDateTime26.getChronology();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 383 + "'", int20 == 383);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test17126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17126");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        long long26 = dateTimeZone19.convertLocalToUTC(1644572701362L, false);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone19.getName(1644572660027L, locale28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField31 = copticChronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology30.millisOfSecond();
        org.joda.time.DurationField durationField33 = copticChronology30.days();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology30.dayOfYear();
        org.joda.time.DurationField durationField36 = copticChronology30.months();
        java.lang.String str37 = copticChronology30.toString();
        boolean boolean38 = dateTimeZone19.equals((java.lang.Object) copticChronology30);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572701362L + "'", long26 == 1644572701362L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CopticChronology[UTC]" + "'", str37, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test17127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17127");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology1.add(readablePeriod9, (long) '#', 43);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(2101362L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology1.year();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test17128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17128");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyearOfCentury();
        int int13 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.millisOfSecond();
        java.lang.String str17 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(397);
        long long23 = dateTimeZone21.previousTransition(1644572752986L);
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime(dateTimeZone21);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CopticChronology[UTC]" + "'", str17, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644572752986L + "'", long23 == 1644572752986L);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test17129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17129");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = copticChronology0.getDateTimeMillis(195, 35484819, 141, 34919455);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35484819 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test17130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17130");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.DurationField durationField3 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = copticChronology0.seconds();
        org.joda.time.DurationField durationField8 = copticChronology0.hours();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17131");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.withMaximumValue();
        int int12 = property5.get();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfCentury();
        int int26 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusYears(700);
        int int29 = localDateTime28.size();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.centuryOfEra();
        int int31 = localDateTime28.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime28);
        int int33 = localDateTime28.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.withPeriodAdded(readablePeriod34, 790);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "464" + "'", str7, "464");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 464 + "'", int12 == 464);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 154 + "'", int33 == 154);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test17132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17132");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DurationField durationField5 = copticChronology0.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(394);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.Chronology chronology9 = copticChronology0.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17133");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("35048744");
        java.util.TimeZone.setDefault(timeZone1);
        int int4 = timeZone1.getOffset(294680318L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test17134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17134");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("284");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test17135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17135");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay((int) '#');
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone2);
        long long16 = dateTimeZone2.previousTransition(1644572610881L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1644572637142L, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.centuryOfEra();
        org.joda.time.DurationField durationField20 = property19.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property19.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = property19.addToCopy(35180417);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -776923574 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572610881L + "'", long16 == 1644572610881L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test17136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17136");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(82003918, 1181, 629, 699, 826, 534);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 699 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17137");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime13.getFieldTypes();
        int int28 = localDateTime13.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.hourOfDay();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getISO3Country();
        int int36 = property32.getMaximumTextLength(locale33);
        java.lang.String str37 = localDateTime13.toString("293", locale33);
        java.lang.String str38 = locale33.getScript();
        java.lang.String str39 = locale8.getDisplayName(locale33);
        java.lang.String str40 = locale33.getDisplayVariant();
        java.util.Set<java.lang.String> strSet41 = locale33.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str44 = dateTimeZone43.getID();
        long long47 = dateTimeZone43.adjustOffset((long) 'x', true);
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str53 = nameProvider49.getShortName(locale50, "977", "FR");
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str57 = nameProvider49.getShortName(locale54, "406", "1737-06-04T10:00:00.000");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider49);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.util.Locale locale65 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.lang.String str66 = locale60.getDisplayCountry(locale65);
        java.lang.String str67 = locale65.toLanguageTag();
        java.lang.String str70 = nameProvider49.getName(locale65, "669", "Fri");
        java.lang.String str71 = dateTimeZone43.getName((long) '#', locale65);
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.lang.String str75 = locale73.getDisplayName(locale74);
        java.util.Set<java.lang.String> strSet76 = locale74.getUnicodeLocaleKeys();
        java.lang.String str77 = locale74.getDisplayScript();
        java.lang.String str78 = locale74.getDisplayVariant();
        java.util.Locale locale79 = java.util.Locale.CHINA;
        java.lang.String str80 = locale74.getDisplayScript(locale79);
        java.util.Set<java.lang.String> strSet81 = locale79.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet82 = locale79.getUnicodeLocaleKeys();
        java.lang.String str83 = dateTimeZone43.getName((long) 2038738, locale79);
        java.util.Locale.setDefault(locale79);
        java.lang.String str85 = locale33.getDisplayLanguage(locale79);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "528" + "'", str7, "528");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "293" + "'", str37, "293");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str39, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 120L + "'", long47 == 120L);
        org.junit.Assert.assertNotNull(nameProvider49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
        org.junit.Assert.assertEquals(locale65.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Canada" + "'", str66, "Canada");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "und-976" + "'", str67, "und-976");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "English (Canada)" + "'", str75, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+10:00" + "'", str83, "+10:00");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u65e5\u6587" + "'", str85, "\u65e5\u6587");
    }

    @Test
    public void test17138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17138");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusMinutes(674);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withHourOfDay(22);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours(760);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime25.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11, dateTimeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.lang.String str35 = dateTimeZone28.getShortName(1644573085633L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
    }

    @Test
    public void test17139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17139");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(3);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17140");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(166, 249);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 249");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17141");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.days();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField7 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField9 = copticChronology0.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test17142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17142");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        java.lang.String str4 = property3.getName();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str7 = copticChronology6.toString();
        org.joda.time.DurationField durationField8 = copticChronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology6.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(1643708669699L, (org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(659);
        int int14 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.yearOfCentury();
        int int16 = localDateTime13.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfYear(654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 654 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "millisOfDay" + "'", str4, "millisOfDay");
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[UTC]" + "'", str7, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
    }

    @Test
    public void test17143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17143");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale4.getISO3Language();
        boolean boolean6 = copticChronology0.equals((java.lang.Object) locale4);
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField8 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology0.centuries();
        org.joda.time.DurationField durationField12 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField14 = copticChronology0.hours();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean19 = dateTimeZone16.isStandardOffset(10L);
        java.lang.String str21 = dateTimeZone16.getShortName((long) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.minusYears((int) (short) 0);
        int[] intArray35 = copticChronology23.get((org.joda.time.ReadablePartial) localDateTime33, 0L);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = null;
        java.lang.String str41 = nameProvider37.getName(locale38, "fr", "572");
        java.util.Locale locale45 = new java.util.Locale("eng", "153", "English (Canada)");
        java.lang.String str48 = nameProvider37.getName(locale45, "1738", "35035387");
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.millisOfSecond();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = property54.getAsText(locale55);
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str59 = locale55.getDisplayVariant(locale57);
        java.util.Locale locale62 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str63 = locale57.getDisplayName(locale62);
        java.lang.String str64 = locale62.getCountry();
        java.lang.String str67 = nameProvider37.getShortName(locale62, "1737-06-04T09:45:17.021+10:00", "");
        java.lang.String str68 = locale62.getDisplayName();
        java.util.Set<java.lang.String> strSet69 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str70 = property36.getAsShortText(locale62);
        java.lang.String str71 = dateTimeZone16.getShortName((long) 514, locale62);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.Chronology chronology73 = copticChronology0.withZone(dateTimeZone16);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jpn" + "'", str5, "jpn");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals(locale45.toString(), "eng_153_English (Canada)");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "627" + "'", str56, "627");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale62.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (China)" + "'", str63, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "539" + "'", str64, "539");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str68, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "35483627" + "'", str70, "35483627");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(chronology73);
    }

    @Test
    public void test17144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17144");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DurationField durationField12 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573183660L + "'", long9 == 1644573183660L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test17145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17145");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(266, 940, 158400000, 394, 458);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 394 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17146");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        int int5 = dateTimeZone2.getStandardOffset(0L);
        boolean boolean7 = dateTimeZone2.isStandardOffset((long) (short) 1);
        long long10 = dateTimeZone2.adjustOffset(1644572630512L, false);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.centuryOfEra();
        int int20 = localDateTime18.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minus(readablePeriod21);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTime dateTime26 = localDateTime18.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        long long29 = dateTimeZone2.getMillisKeepLocal(dateTimeZone25, (-7307885724435L));
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime32.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property48 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime32.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime32.plus(readablePeriod51);
        boolean boolean53 = dateTimeZone2.isLocalDateTimeGap(localDateTime32);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str55 = copticChronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology54.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusDays(1738);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.dayOfYear();
        int int66 = localDateTime64.getMillisOfSecond();
        long long68 = copticChronology54.set((org.joda.time.ReadablePartial) localDateTime64, 0L);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.minusMillis(478);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.plusHours(107);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime72);
        int int74 = localDateTime72.getEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.plusMonths(35202883);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572630512L + "'", long10 == 1644572630512L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 37 + "'", int20 == 37);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-7307885724435L) + "'", long29 == (-7307885724435L));
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CopticChronology[UTC]" + "'", str55, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 682 + "'", int66 == 682);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1794736383682L + "'", long68 == 1794736383682L);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test17147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17147");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DurationField durationField32 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        boolean boolean77 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Chronology chronology79 = dateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime45.getZone();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        org.joda.time.Chronology chronology82 = copticChronology0.withZone(dateTimeZone80);
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573183726L + "'", long9 == 1644573183726L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485183726L + "'", long31 == 5431485183726L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test17148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17148");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = copticChronology0.add(readablePeriod21, 389L, 854);
        java.lang.String str25 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = copticChronology0.add(readablePeriod26, 1644573081925L, 318);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 389L + "'", long24 == 389L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[UTC]" + "'", str25, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644573081925L + "'", long29 == 1644573081925L);
    }

    @Test
    public void test17149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17149");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.centuries();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.secondOfDay();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property27 = localDateTime14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime14.plusMinutes(253);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime14.plus(readableDuration30);
        long long33 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime31, 5431485013187L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35583776 + "'", int26 == 35583776);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644573183776L + "'", long33 == 1644573183776L);
    }

    @Test
    public void test17150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17150");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField3 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test17151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17151");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfCeilingCopy();
        java.lang.String str5 = property3.getName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
    }

    @Test
    public void test17152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17152");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) 989, 264);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfYear();
        long long18 = copticChronology0.add(1644572683170L, (long) 545, 324);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 989L + "'", long11 == 989L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572859750L + "'", long18 == 1644572859750L);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17153");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(207);
        java.lang.String str3 = dateTimeZone1.getShortName(1644572638561L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfCentury();
        java.lang.String[] strArray25 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        java.util.Locale locale28 = java.util.Locale.CANADA;
        boolean boolean29 = strSet26.equals((java.lang.Object) locale28);
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.lang.String str31 = property15.getAsText(locale28);
        org.joda.time.LocalDateTime localDateTime33 = property15.addToCopy(35145906);
        boolean boolean34 = dateTimeZone1.isLocalDateTimeGap(localDateTime33);
        java.util.TimeZone timeZone35 = dateTimeZone1.toTimeZone();
        int int37 = dateTimeZone1.getOffsetFromLocal(13254551361L);
        long long41 = dateTimeZone1.convertLocalToUTC(1644572776545L, false, 1644572894820L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.207" + "'", str3, "+00:00:00.207");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "37" + "'", str31, "37");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 207 + "'", int37 == 207);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644572776338L + "'", long41 == 1644572776338L);
    }

    @Test
    public void test17154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17154");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str17 = locale12.getDisplayName(locale16);
        java.lang.String str18 = property10.getAsText(locale16);
        org.joda.time.Interval interval19 = property10.toInterval();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = locale20.stripExtensions();
        java.lang.String str23 = property10.getAsText(locale22);
        int int24 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str14, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (China)" + "'", str17, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
    }

    @Test
    public void test17155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17155");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test17156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17156");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.removeUnicodeLocaleAttribute("35110530");
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("579");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test17157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17157");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy(250);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(989);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.plus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime39.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime26.isSupported(dateTimeFieldType48);
        int int50 = localDateTime6.get(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime4.property(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime54 = property51.addToCopy(85456696);
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime57.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusMonths((int) (byte) 100);
        java.lang.String str73 = localDateTime72.toString();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundCeilingCopy();
        int int76 = property51.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime75.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1732-09-03T09:53:03.892" + "'", str73, "1732-09-03T09:53:03.892");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test17158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17158");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        long long6 = copticChronology0.add(1644572852589L, 294364441L, 0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572852589L + "'", long6 == 1644572852589L);
    }

    @Test
    public void test17159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17159");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        timeZone1.setRawOffset(154);
        int int7 = timeZone1.getRawOffset();
        boolean boolean8 = timeZone1.observesDaylightTime();
        int int9 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        timeZone1.setID("658");
        java.lang.Object obj13 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 154 + "'", int7 == 154);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 154 + "'", int9 == 154);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "sun.util.calendar.ZoneInfo[id=\"658\",offset=154,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "sun.util.calendar.ZoneInfo[id=\"658\",offset=154,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "sun.util.calendar.ZoneInfo[id=\"658\",offset=154,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test17160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17160");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology5.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology5.getZone();
        org.joda.time.DurationField durationField16 = copticChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology5.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone19);
        boolean boolean25 = dateTimeZone19.isFixed();
        java.lang.String str27 = dateTimeZone19.getShortName(1644572706656L);
        org.joda.time.Chronology chronology28 = copticChronology5.withZone(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test17161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17161");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology0.add(readablePeriod7, (long) 770, (int) (short) 10);
        org.joda.time.DurationField durationField11 = copticChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 770L + "'", long10 == 770L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17162");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology0.withZone(dateTimeZone9);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsText(locale17);
        long long19 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = property16.withMaximumValue();
        int[] intArray24 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime22, (long) 30);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField26 = copticChronology0.months();
        org.joda.time.Chronology chronology27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) durationField26, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.LimitChronology$LimitDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "987" + "'", str18, "987");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1686, 4, 23, 30]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test17163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17163");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getLeapAmount();
        org.joda.time.DurationField durationField11 = property5.getLeapDurationField();
        int int12 = property5.getMaximumValueOverall();
        org.joda.time.DurationField durationField13 = property5.getRangeDurationField();
        int int14 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
    }

    @Test
    public void test17164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17164");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.year();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = copticChronology0.add(readablePeriod9, (long) 244, 299);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 244L + "'", long12 == 244L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17165");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int14 = localDateTime2.getMinuteOfHour();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDateTime2.toDateTime(dateTimeZone17);
        int int19 = localDateTime2.size();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        int[] intArray28 = localDateTime27.getValues();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusDays(4);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withDurationAdded(readableDuration32, 948);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.getLocalDateTime();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        boolean boolean59 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField71 = copticChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.hourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        boolean boolean80 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Chronology chronology82 = dateTime48.getChronology();
        int int83 = property37.getDifference((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime84 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        int int85 = localDateTime31.getYearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1737, 6, 4, 35584051]");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2038738 + "'", int83 == 2038738);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 37 + "'", int85 == 37);
    }

    @Test
    public void test17166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17166");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str3 = locale0.getExtension('a');
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale0.getDisplayName(locale5);
        java.lang.String str7 = locale0.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale17 = new java.util.Locale("1737-06-04T09:44:05.259+10:00");
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('x', "811");
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getDisplayScript();
        java.lang.String str27 = locale23.getDisplayVariant();
        java.lang.String str28 = locale23.getDisplayScript();
        java.util.Locale.Builder builder29 = builder21.setLocale(locale23);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale30.getScript();
        java.lang.String str32 = locale30.getISO3Country();
        boolean boolean33 = locale30.hasExtensions();
        java.util.Locale.Builder builder34 = builder21.setLocale(locale30);
        java.lang.String str35 = locale17.getDisplayVariant(locale30);
        java.lang.String str36 = locale8.getDisplayVariant(locale30);
        java.lang.String str37 = locale30.getVariant();
        java.lang.String str39 = locale30.getExtension('a');
        java.lang.String str40 = locale0.getDisplayName(locale30);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str6, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko-KR" + "'", str7, "ko-KR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale17.toString(), "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "KOR" + "'", str32, "KOR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str40, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
    }

    @Test
    public void test17167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17167");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale5.getDisplayScript();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale.Builder builder15 = builder3.setLocale(locale13);
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale locale17 = builder15.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
    }

    @Test
    public void test17168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17168");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getLanguage();
        java.lang.String str15 = locale12.getCountry();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CA" + "'", str15, "CA");
    }

    @Test
    public void test17169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17169");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-3780000L));
    }

    @Test
    public void test17170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17170");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        java.util.Locale.Builder builder5 = builder0.setRegion("301");
        java.util.Locale locale6 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setUnicodeLocaleKeyword("1737-06-04T09:43:52.900+10:00", "2022-02-11T19:50:36.079");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1737-06-04T09:43:52.900+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_301_#x-811");
    }

    @Test
    public void test17171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17171");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField5 = copticChronology0.weekyears();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17172");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("811");
        java.util.Locale.Builder builder3 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("68", "1737-06-04T09:48:21.733+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: 1737-06-04T09:48:21.733+10:00 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test17173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17173");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.withMaximumValue();
        int int12 = property5.get();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(324);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay(36083869);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str20 = copticChronology19.toString();
        org.joda.time.DurationField durationField21 = copticChronology19.millis();
        org.joda.time.DurationField durationField22 = copticChronology19.minutes();
        org.joda.time.DurationField durationField23 = copticChronology19.halfdays();
        org.joda.time.DurationField durationField24 = copticChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology19.clockhourOfDay();
        boolean boolean26 = localDateTime18.equals((java.lang.Object) copticChronology19);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "198" + "'", str7, "198");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 198 + "'", int12 == 198);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CopticChronology[UTC]" + "'", str20, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test17174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17174");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        boolean boolean14 = dateTimeZone1.isStandardOffset(1644572616432L);
        int int16 = dateTimeZone1.getOffsetFromLocal((long) 6);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField21 = copticChronology20.hours();
        int int22 = copticChronology20.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.era();
        boolean boolean24 = strSet19.remove((java.lang.Object) copticChronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = copticChronology20.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        long long34 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 128);
        boolean boolean35 = dateTimeZone25.isFixed();
        long long37 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, 1644572652334L);
        java.util.Locale locale42 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        java.lang.String str43 = dateTimeZone25.getShortName(5431484682905L, locale42);
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.lang.String str47 = dateTimeZone25.getName((long) 492, locale45);
        boolean boolean48 = dateTimeZone25.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 128L + "'", long34 == 128L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572652334L + "'", long37 == 1644572652334L);
        org.junit.Assert.assertEquals(locale42.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u56fd" + "'", str46, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test17175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17175");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfHalfday();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str17 = copticChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology16.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withSecondOfMinute(43);
        int[] intArray27 = copticChronology16.get((org.joda.time.ReadablePartial) localDateTime25, (long) 43);
        copticChronology11.validate((org.joda.time.ReadablePartial) localDateTime15, intArray27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone30);
        org.joda.time.Chronology chronology34 = copticChronology11.withZone(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.DurationField durationField36 = copticChronology11.seconds();
        boolean boolean37 = copticChronology0.equals((java.lang.Object) durationField36);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CopticChronology[UTC]" + "'", str17, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17176");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDurationAdded(readableDuration5, (int) ' ');
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsText(locale15);
        java.lang.String str17 = property14.getAsText();
        java.lang.String str18 = property14.toString();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        long long26 = property24.remainder();
        int int27 = property24.getMinimumValueOverall();
        int int28 = property24.getLeapAmount();
        java.lang.String[] strArray38 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        java.util.Locale locale41 = java.util.Locale.CANADA;
        boolean boolean42 = strSet39.equals((java.lang.Object) locale41);
        java.lang.String str43 = locale41.getLanguage();
        int int44 = property24.getMaximumTextLength(locale41);
        java.lang.String str45 = property14.getAsText(locale41);
        java.lang.String str46 = localDateTime4.toString("372", locale41);
        java.util.Set<java.lang.String> strSet47 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getDisplayScript();
        java.lang.String str53 = locale49.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet54 = locale49.getExtensionKeys();
        java.util.Locale locale55 = locale49.stripExtensions();
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = locale41.getDisplayLanguage(locale49);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "286" + "'", str16, "286");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "286" + "'", str17, "286");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[millisOfSecond]" + "'", str18, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en" + "'", str43, "en");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "286" + "'", str45, "286");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "372" + "'", str46, "372");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English (Canada)" + "'", str50, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English" + "'", str57, "English");
    }

    @Test
    public void test17177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17177");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str10 = localDateTime2.toString("93", locale9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusWeeks(416);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.minusMinutes(0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "93" + "'", str10, "93");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test17178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17178");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale6.getDisplayVariant();
        java.lang.String str11 = locale6.getDisplayScript();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.millisOfSecond();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale22.getDisplayVariant(locale24);
        java.util.Locale.setDefault(locale24);
        boolean boolean28 = locale24.hasExtensions();
        java.util.Locale.setDefault(category0, locale24);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale30.getScript();
        java.lang.String str33 = locale30.getExtension('a');
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale30.getDisplayName(locale35);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = locale30.getDisplayScript(locale37);
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = locale43.getDisplayCountry(locale46);
        java.util.Locale.setDefault(category0, locale46);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "323" + "'", str23, "323");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str36, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (Canada)" + "'", str44, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Canada" + "'", str47, "Canada");
    }

    @Test
    public void test17179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17179");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("501");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test17180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17180");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        boolean boolean43 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        boolean boolean64 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int66 = property22.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int67 = property16.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.hourOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDateTime75.toDateTime(readableInstant76);
        org.joda.time.chrono.CopticChronology copticChronology78 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = copticChronology78.dayOfYear();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.hourOfDay();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime80.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime(readableInstant86);
        boolean boolean88 = dateTime77.isEqual((org.joda.time.ReadableInstant) dateTime87);
        java.lang.String str89 = dateTime87.toString();
        long long90 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.tz.Provider provider91 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider91);
        org.joda.time.DateTimeZone.setProvider(provider91);
        java.util.Set<java.lang.String> strSet94 = provider91.getAvailableIDs();
        boolean boolean95 = property16.equals((java.lang.Object) strSet94);
        org.joda.time.LocalDateTime localDateTime96 = property16.roundHalfCeilingCopy();
        int int97 = property16.getMaximumValueOverall();
        int int98 = property16.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime99 = property16.roundFloorCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 103981 + "'", int67 == 103981);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(copticChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1737-06-04T09:53:04.359+10:00" + "'", str89, "1737-06-04T09:53:04.359+10:00");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 103981L + "'", long90 == 103981L);
        org.junit.Assert.assertNotNull(provider91);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 30 + "'", int97 == 30);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertNotNull(localDateTime99);
    }

    @Test
    public void test17181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17181");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test17182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17182");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        org.joda.time.DurationField durationField3 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfYear();
        org.joda.time.DurationField durationField5 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17183");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyear();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.era();
        org.joda.time.DurationField durationField14 = copticChronology0.eras();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17184");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str17 = locale12.getDisplayName(locale16);
        java.lang.String str18 = property10.getAsText(locale16);
        org.joda.time.Interval interval19 = property10.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property10.roundFloorCopy();
        int int21 = localDateTime20.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str14, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (China)" + "'", str17, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 18 + "'", int21 == 18);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test17185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17185");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField5 = copticChronology0.years();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8);
        int[] intArray14 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime8, 473L);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.minusWeeks(18);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plusMinutes(35218126);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime21.dayOfMonth();
        java.util.Locale locale36 = java.util.Locale.US;
        java.lang.String str37 = property35.getAsShortText(locale36);
        org.joda.time.LocalDateTime localDateTime38 = property35.roundCeilingCopy();
        int int39 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1686, 4, 23, 473]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "4" + "'", str37, "4");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test17186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17186");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField12 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        java.lang.String str15 = copticChronology0.toString();
        org.joda.time.DurationField durationField16 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573184490L + "'", long9 == 1644573184490L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17187");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1644572627999L, (org.joda.time.Chronology) copticChronology1);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("1737-06-04T09:43:32.299+10:00");
        java.time.ZoneId zoneId7 = timeZone6.toZoneId();
        java.time.ZoneId zoneId8 = timeZone6.toZoneId();
        boolean boolean9 = copticChronology1.equals((java.lang.Object) zoneId8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone(zoneId8);
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId11);
    }

    @Test
    public void test17188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17188");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(43);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17189");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 387);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str3 = copticChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(10);
        long long24 = copticChronology2.set((org.joda.time.ReadablePartial) localDateTime22, (long) 'a');
        boolean boolean26 = localDateTime22.equals((java.lang.Object) 1613000665015L);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.minus(readablePeriod27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime40 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = localDateTime28.toDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime28.plusYears(814);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusHours(35134004);
        boolean boolean46 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644537600010L + "'", long24 == 1644537600010L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-7339421215477L) + "'", long39 == (-7339421215477L));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test17190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17190");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test17191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17191");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572688372L);
    }

    @Test
    public void test17192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17192");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long5 = dateTimeZone1.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getShortName(1644572969563L);
        java.lang.String str10 = dateTimeZone1.getNameKey(1644573043232L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000000L + "'", long5 == 36000000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test17193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17193");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        int[] intArray13 = localDateTime12.getValues();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        int[] intArray24 = localDateTime23.getValues();
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime15, intArray24);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        int[] intArray46 = localDateTime45.getValues();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        int[] intArray57 = localDateTime56.getValues();
        copticChronology34.validate((org.joda.time.ReadablePartial) localDateTime48, intArray57);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime33, intArray57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 710, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy(993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = property61.setCopy("316");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 316 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1737, 6, 4, 35584579]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1737, 6, 4, 35584579]");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1737, 6, 4, 35584579]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1737, 6, 4, 35584579]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test17194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17194");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("533");
        java.util.Locale.Builder builder8 = builder3.setVariant("");
        java.util.Locale.Builder builder10 = builder3.setRegion("576");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test17195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17195");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDayOfYear(100);
        boolean boolean28 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        int int29 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime14.minusYears(562);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withHourOfDay(22);
        int int51 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = localDateTime35.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime35.minusMillis(758);
        boolean boolean55 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime54);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573184661L + "'", long9 == 1644573184661L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test17196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17196");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField4 = copticChronology3.hours();
        int int5 = copticChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.era();
        boolean boolean7 = strSet2.remove((java.lang.Object) copticChronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = copticChronology3.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int12 = localDateTime11.getYearOfEra();
        boolean boolean13 = dateTimeZone8.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds(207);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekyear(0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withPeriodAdded(readablePeriod18, 683);
        int int21 = localDateTime15.getDayOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test17197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17197");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test17198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17198");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.weekOfWeekyear();
        long long15 = copticChronology0.add(36000004L, 1644572685264L, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.hourOfHalfday();
        java.lang.Object obj17 = null;
        boolean boolean18 = copticChronology0.equals(obj17);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644608685268L + "'", long15 == 1644608685268L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17199");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfDay();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.parse("eng", strMap12);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        boolean boolean18 = strSet14.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strList20, filteringMode21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.parse("eng", strMap24);
        java.util.Set<java.lang.String> strSet26 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        boolean boolean30 = strSet26.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet31);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags(languageRangeList25, (java.util.Collection<java.lang.String>) strList32, filteringMode33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList25, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.parse("eng", strMap38);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.millisOfSecond();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.lang.String str49 = property47.getAsText(locale48);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale57.getISO3Language();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.millisOfSecond();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = property65.getAsText(locale66);
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale40, locale41, locale48, locale50, locale51, locale52, locale54, locale57, locale59, locale66, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter(languageRangeList39, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList25, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.parse("eng", strMap76);
        java.util.Set<java.lang.String> strSet78 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        boolean boolean82 = strSet78.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80);
        java.util.Set<java.lang.String> strSet83 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet83);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList77, (java.util.Collection<java.lang.String>) strList84, filteringMode85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList74, filteringMode85);
        boolean boolean88 = copticChronology0.equals((java.lang.Object) localeList74);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = copticChronology0.get(readablePeriod89, 1644572747204L, (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "733" + "'", str49, "733");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English (Canada)" + "'", str55, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "eng" + "'", str58, "eng");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "733" + "'", str67, "733");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test17200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17200");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DurationField durationField12 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField14 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime34);
        int int36 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.weekOfWeekyear();
        int[] intArray38 = localDateTime34.getValues();
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.weekOfWeekyear();
        long long41 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime34, 1644572731732L);
        java.lang.Object obj42 = null;
        boolean boolean43 = copticChronology0.equals(obj42);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = copticChronology0.getDateTimeMillis(1794735982861L, (-24634), 433, 239, 221);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -24634 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573184761L + "'", long9 == 1644573184761L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1738, 6, 4, 35584761]");
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644573184761L + "'", long41 == 1644573184761L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test17201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17201");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField10 = copticChronology0.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = copticChronology0.getZone();
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = null;
        java.lang.String str17 = nameProvider13.getShortName(locale14, "976", "493");
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        java.lang.String str26 = nameProvider13.getShortName(locale19, "152", "878");
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime29.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property45 = localDateTime29.millisOfDay();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = property45.getAsShortText(locale46);
        java.lang.String str52 = nameProvider13.getShortName(locale46, "chinois (Chine)", "38");
        java.lang.String str53 = dateTimeZone11.getName((long) 847, locale46);
        java.lang.String str54 = locale46.getDisplayVariant();
        boolean boolean55 = locale46.hasExtensions();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Canada" + "'", str23, "Canada");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (Canada)" + "'", str48, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "35584779" + "'", str49, "35584779");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test17202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17202");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str10 = copticChronology9.toString();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        long long18 = copticChronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMinutes(10);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withPeriodAdded(readablePeriod22, 999);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusDays(580);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withPeriodAdded(readablePeriod31, 207);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime39.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime39.plusSeconds((int) 'x');
        int int55 = localDateTime39.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property56 = localDateTime39.era();
        org.joda.time.LocalDateTime.Property property57 = localDateTime39.yearOfEra();
        int int58 = property36.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime39.minusMillis(141);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime39.withYearOfEra(238);
        int[] intArray64 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime39, 1644572689105L);
        int int65 = localDateTime39.getDayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644573184801L + "'", long18 == 1644573184801L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 38 + "'", int21 == 38);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 801 + "'", int55 == 801);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1738, 6, 4, 35089105]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
    }

    @Test
    public void test17203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17203");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(723);
        org.joda.time.LocalDateTime localDateTime16 = property12.addToCopy(158400000);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.secondOfMinute();
        int int20 = property19.getLeapAmount();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "828" + "'", str7, "828");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test17204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17204");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfDay(10);
        int int67 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime68 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.centuryOfEra();
        java.lang.String str70 = property69.getName();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "centuryOfEra" + "'", str70, "centuryOfEra");
    }

    @Test
    public void test17205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17205");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-35999031L));
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusWeeks(330);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test17206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17206");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        long long10 = dateTime9.getMillis();
        org.joda.time.Instant instant11 = dateTime9.toInstant();
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-7339421215118L) + "'", long10 == (-7339421215118L));
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test17207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17207");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573184896L + "'", long9 == 1644573184896L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485184896L + "'", long31 == 5431485184896L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test17208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17208");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = copticChronology0.add(readablePeriod6, 1644572640069L, 575);
        org.joda.time.DurationField durationField10 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572640069L + "'", long9 == 1644572640069L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test17209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17209");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test17210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17210");
        java.util.Locale locale3 = new java.util.Locale("35026152", "976", "1738-06-04t09:43:28.618 (539)");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DurationField durationField7 = copticChronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology5.yearOfEra();
        int int9 = copticChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology5.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.util.TimeZone timeZone15 = dateTimeZone12.toTimeZone();
        long long17 = dateTimeZone12.nextTransition((-1L));
        int int19 = dateTimeZone12.getStandardOffset((long) 'x');
        java.lang.String str20 = dateTimeZone12.getID();
        java.lang.String str22 = dateTimeZone12.getName(1644572610881L);
        org.joda.time.Chronology chronology23 = copticChronology5.withZone(dateTimeZone12);
        boolean boolean24 = strSet4.remove((java.lang.Object) dateTimeZone12);
        java.lang.Object[] objArray25 = strSet4.toArray();
        java.lang.Object obj26 = null;
        boolean boolean27 = strSet4.contains(obj26);
        org.junit.Assert.assertEquals(locale3.toString(), "35026152_976_1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17211");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        boolean boolean19 = property9.equals((java.lang.Object) property17);
        org.joda.time.DurationField durationField20 = property17.getDurationField();
        org.joda.time.LocalDateTime localDateTime21 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.era();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35584942]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test17212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17212");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder4.setExtension('u', "35026152");
        java.util.Locale.Builder builder13 = builder10.setExtension('a', "196");
        java.util.Locale.Builder builder15 = builder10.setLanguage("UTC");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder20 = builder17.setExtension('a', "italy");
        java.util.Locale.Builder builder21 = builder20.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test17213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17213");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.centuryOfEra();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property9.setCopy(816);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMonthOfYear(742);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 742 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test17214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17214");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test17215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17215");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekyear(700);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusMillis(593);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(564);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDurationAdded(readableDuration33, 103981);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(42);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime40.plusSeconds((int) 'x');
        int int56 = localDateTime40.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property57 = localDateTime40.era();
        org.joda.time.LocalDateTime.Property property58 = localDateTime40.yearOfEra();
        int int59 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property60 = localDateTime35.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str62 = copticChronology61.toString();
        org.joda.time.DurationField durationField63 = copticChronology61.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology64 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusDays((int) (byte) 0);
        long long70 = copticChronology61.set((org.joda.time.ReadablePartial) localDateTime66, (long) 100);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.minusMinutes(10);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime66.withMillisOfDay((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology75 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str76 = copticChronology75.toString();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        long long80 = copticChronology75.add(readablePeriod77, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField81 = copticChronology75.halfdays();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology75.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology75.era();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology75);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = localDateTime84.getFieldTypes();
        boolean boolean86 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime84);
        int int87 = localDateTime66.getDayOfWeek();
        int int88 = localDateTime66.getYearOfCentury();
        int int89 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime35.plusSeconds(168);
        int int92 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime91);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 983 + "'", int56 == 983);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "CopticChronology[UTC]" + "'", str62, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(copticChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1644573184983L + "'", long70 == 1644573184983L);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(copticChronology75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CopticChronology[UTC]" + "'", str76, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 38 + "'", int88 == 38);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test17216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17216");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay((int) '#');
        boolean boolean15 = dateTimeZone4.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone4);
        long long18 = dateTimeZone4.previousTransition(1644572610881L);
        long long21 = dateTimeZone4.convertLocalToUTC((long) (short) 1, true);
        java.util.TimeZone timeZone22 = dateTimeZone4.toTimeZone();
        java.util.TimeZone.setDefault(timeZone22);
        boolean boolean24 = timeZone1.hasSameRules(timeZone22);
        timeZone1.setRawOffset(851);
        java.time.ZoneId zoneId27 = timeZone1.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572610881L + "'", long18 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35999999L) + "'", long21 == (-35999999L));
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneId27);
    }

    @Test
    public void test17217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17217");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField7 = copticChronology0.hours();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test17218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17218");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.plus(readablePeriod34);
        int int36 = localDateTime35.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        boolean boolean38 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int[] intArray39 = localDateTime35.getValues();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.minusMonths(392);
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 60 + "'", int36 == 60);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1738, 6, 4, 35585060]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test17219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17219");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond(283);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusDays(52);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.lang.String str27 = dateTimeZone24.toString();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str29 = copticChronology28.toString();
        long long33 = copticChronology28.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology28.weekOfWeekyear();
        boolean boolean35 = dateTimeZone24.equals((java.lang.Object) copticChronology28);
        boolean boolean37 = dateTimeZone24.isStandardOffset(1644572616432L);
        java.lang.String str39 = dateTimeZone24.getNameKey((long) 812);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime41 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime22.minusDays(2020);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear(35226743);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1136091124375922418L + "'", long33 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test17220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17220");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((-7339421688533L), dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekOfWeekyear();
        boolean boolean4 = property3.isLeap();
        org.joda.time.DurationField durationField5 = property3.getRangeDurationField();
        org.joda.time.DurationField durationField6 = property3.getDurationField();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test17221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17221");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long5 = dateTimeZone1.convertUTCToLocal(0L);
        java.lang.String str7 = dateTimeZone1.getNameKey(1644572666350L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000000L + "'", long5 == 36000000L);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test17222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17222");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = copticChronology0.getDateTimeMillis(1644573146088L, 71189362, 1732, 35046049, 111);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71189362 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17223");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.Chronology chronology14 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573185137L + "'", long9 == 1644573185137L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17224");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField14 = copticChronology0.months();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17225");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusYears((int) (short) 0);
        int[] intArray17 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime15, 0L);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        int[] intArray26 = localDateTime25.getValues();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = property27.roundHalfEvenCopy();
        boolean boolean30 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusWeeks(728);
        boolean boolean33 = copticChronology0.equals((java.lang.Object) localDateTime32);
        org.joda.time.DurationField durationField34 = copticChronology0.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1737, 6, 4, 35585166]");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test17226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17226");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology5.weekyear();
        org.joda.time.DurationField durationField14 = copticChronology5.centuries();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology5.yearOfCentury();
        org.joda.time.DurationField durationField16 = copticChronology5.days();
        org.joda.time.DurationField durationField17 = copticChronology5.centuries();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMinutes(35048859);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMonths(42);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusSeconds(969);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        boolean boolean38 = locale37.hasExtensions();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField41 = copticChronology40.hours();
        int int42 = copticChronology40.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology40.era();
        boolean boolean44 = strSet39.remove((java.lang.Object) copticChronology40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = copticChronology40.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = copticChronology40.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.millisOfSecond();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = property53.getAsText(locale54);
        long long56 = property53.remainder();
        org.joda.time.LocalDateTime localDateTime57 = property53.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.year();
        long long59 = property58.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property58.getFieldType();
        org.joda.time.LocalDateTime localDateTime61 = property58.roundHalfFloorCopy();
        int[] intArray63 = copticChronology40.get((org.joda.time.ReadablePartial) localDateTime61, 1644572649592L);
        copticChronology5.validate((org.joda.time.ReadablePartial) localDateTime36, intArray63);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime.Property property71 = localDateTime67.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readableDuration73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.yearOfCentury();
        int int76 = localDateTime74.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.minusWeeks(1638);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime74.minusYears(141);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusSeconds(35077641);
        boolean boolean83 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.LocalDateTime.Property property84 = localDateTime36.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "184" + "'", str55, "184");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 13254785184L + "'", long59 == 13254785184L);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1738, 6, 4, 35049592]");
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test17227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17227");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        java.util.Locale locale13 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str14 = locale8.getDisplayName(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('x', "811");
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getDisplayScript();
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String str26 = locale21.getDisplayScript();
        java.util.Locale.Builder builder27 = builder19.setLocale(locale21);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.millisOfSecond();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = property33.getAsText(locale34);
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale34.getDisplayLanguage(locale36);
        java.util.Locale.Builder builder39 = builder19.setLocale(locale36);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale40.getScript();
        java.lang.String str42 = locale40.getISO3Country();
        boolean boolean43 = locale40.hasExtensions();
        java.lang.String str44 = locale40.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.lang.String str47 = locale40.getDisplayLanguage(locale45);
        java.util.Locale.Builder builder48 = builder19.setLocale(locale40);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = locale49.getDisplayVariant();
        java.lang.String str52 = locale40.getDisplayScript(locale49);
        boolean boolean53 = strSet15.remove((java.lang.Object) locale40);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(308);
        int int57 = dateTimeZone55.getOffsetFromLocal(1644572818348L);
        long long60 = dateTimeZone55.convertLocalToUTC(2305349372914107L, false);
        boolean boolean61 = strSet15.equals((java.lang.Object) dateTimeZone55);
        java.lang.String str63 = dateTimeZone55.getShortName(1644573044706L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "231" + "'", str7, "231");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "231" + "'", str35, "231");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u82f1\u8a9e" + "'", str38, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "kor" + "'", str44, "kor");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u671d\u9c9c\u6587" + "'", str47, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1108800000 + "'", int57 == 1108800000);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2305348264114107L + "'", long60 == 2305348264114107L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+308:00" + "'", str63, "+308:00");
    }

    @Test
    public void test17228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17228");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = strSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.FilteringMode filteringMode10 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList9, filteringMode10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("eng", strMap15);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream17 = languageRangeList16.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("eng", strMap19);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.millisOfSecond();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = property28.getAsText(locale29);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale38.getISO3Language();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.millisOfSecond();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.lang.String str48 = property46.getAsText(locale47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale21, locale22, locale29, locale31, locale32, locale33, locale35, locale38, locale40, locale47, locale49, locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Locale locale56 = java.util.Locale.lookup(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream57 = languageRangeList13.parallelStream();
        java.util.Set<java.lang.String> strSet58 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.util.Locale.setDefault(locale65);
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.lang.String str72 = locale70.getDisplayName(locale71);
        java.util.Set<java.lang.String> strSet73 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray76 = new java.util.Locale[] { locale63, locale64, locale65, locale69, locale71, locale74, locale75 };
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.Locale locale79 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.Locale.FilteringMode filteringMode80 = null;
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList77, filteringMode80);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + filteringMode10 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode10.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeStream17);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "255" + "'", str30, "255");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (Canada)" + "'", str36, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "255" + "'", str48, "255");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(languageRangeStream57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (Canada)" + "'", str67, "English (Canada)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English (Canada)" + "'", str72, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(locale79);
        org.junit.Assert.assertNotNull(localeList81);
    }

    @Test
    public void test17229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17229");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime7.minusMinutes(1970);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime7.withWeekyear(957);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusWeeks(46);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test17230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17230");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int7 = localDateTime6.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDayOfWeek(6);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) (byte) 100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.era();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusYears(116);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17231");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        int int12 = property9.getMinimumValueOverall();
        long long13 = property9.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property9.getFieldType();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35585419]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3185419L + "'", long13 == 3185419L);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test17232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17232");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        long long10 = dateTimeZone6.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.plus(readablePeriod29);
        boolean boolean31 = dateTimeZone6.isLocalDateTimeGap(localDateTime23);
        java.lang.String str33 = localDateTime23.toString("380");
        org.joda.time.LocalDateTime localDateTime35 = localDateTime23.withYear(320);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMonths(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "380" + "'", str33, "380");
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test17233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17233");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime2.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test17234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17234");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, 698);
        int int13 = localDateTime9.getMinuteOfHour();
        int int14 = localDateTime9.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withDayOfYear(822);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 822 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test17235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17235");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("423");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("496");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        boolean boolean9 = timeZone3.hasSameRules(timeZone8);
        boolean boolean10 = timeZone8.observesDaylightTime();
        int int12 = timeZone8.getOffset(5431484692575L);
        java.time.ZoneId zoneId13 = timeZone8.toZoneId();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("68");
        boolean boolean16 = timeZone8.hasSameRules(timeZone15);
        int int17 = timeZone8.getRawOffset();
        boolean boolean18 = timeZone1.hasSameRules(timeZone8);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17236");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        int[] intArray23 = localDateTime22.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime14, intArray23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy((long) 100);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology33.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        int[] intArray45 = localDateTime44.getValues();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        int[] intArray56 = localDateTime55.getValues();
        copticChronology33.validate((org.joda.time.ReadablePartial) localDateTime47, intArray56);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime32, intArray56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField60 = copticChronology0.halfdays();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        long long65 = copticChronology0.add(readablePeriod62, 1644572771710L, 616);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1737, 6, 4, 35585485]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1737, 6, 4, 35585485]");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1737, 6, 4, 35585485]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1737, 6, 4, 35585485]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644572771710L + "'", long65 == 1644572771710L);
    }

    @Test
    public void test17237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17237");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long6 = copticChronology0.getDateTimeMillis((int) 'a', 3, (int) (byte) 1, 0);
        long long12 = copticChronology0.getDateTimeMillis((long) 575, 6, (int) (short) 10, (int) (short) 0, 100);
        org.joda.time.DurationField durationField13 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        long long18 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime16, (long) 34927720);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes(978);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-50149497600000L) + "'", long6 == (-50149497600000L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 22200100L + "'", long12 == 22200100L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10597168385511L + "'", long18 == 10597168385511L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test17238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17238");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.millisOfDay();
        long long13 = copticChronology0.add(1644572743447L, 1644572618698L, 488);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = copticChronology0.getDateTimeMillis(1644573095492L, 556, 274, 468, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 556 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 804196010668071L + "'", long13 == 804196010668071L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17239");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.lang.String str6 = timeZone5.getID();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.TimeZone.setDefault(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean14 = timeZone5.hasSameRules(timeZone8);
        java.time.ZoneId zoneId15 = timeZone8.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT+10:00" + "'", str6, "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test17240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17240");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.era();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfDay();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField8 = copticChronology0.years();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17241");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DurationField durationField12 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField14 = copticChronology0.centuries();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str16 = copticChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = copticChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology15.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) copticChronology0, (org.joda.time.Chronology) copticChronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.CopticChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573185581L + "'", long9 == 1644573185581L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CopticChronology[UTC]" + "'", str16, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test17242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17242");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1738);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        int int20 = localDateTime18.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        boolean boolean68 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int70 = property26.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property26.getFieldType();
        boolean boolean72 = localDateTime18.isSupported(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = property73.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readablePeriod76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.minus(readablePeriod78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.plusSeconds(701);
        int[] intArray83 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime75, 5431484729681L);
        org.joda.time.DateTimeField dateTimeField84 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 616 + "'", int20 == 616);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(copticChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1858, 6, 4, 35129681]");
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test17243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17243");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "709");
        java.util.Locale locale15 = builder14.build();
        java.lang.String str16 = dateTimeZone9.getShortName((-1L), locale15);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfSecond(92);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str23 = dateTimeZone22.getID();
        boolean boolean25 = dateTimeZone22.isStandardOffset(10L);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str27 = copticChronology26.toString();
        org.joda.time.DurationField durationField28 = copticChronology26.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        long long35 = copticChronology26.set((org.joda.time.ReadablePartial) localDateTime31, (long) 100);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology26.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.withPeriodAdded(readablePeriod46, 723);
        long long50 = copticChronology26.set((org.joda.time.ReadablePartial) localDateTime48, (long) 999);
        boolean boolean51 = dateTimeZone22.equals((java.lang.Object) copticChronology26);
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String[] strArray63 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        boolean boolean67 = strSet64.equals((java.lang.Object) locale66);
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.lang.String str69 = locale53.getDisplayVariant(locale66);
        java.lang.String str70 = dateTimeZone22.getName(10L, locale66);
        java.lang.String str72 = dateTimeZone22.getNameKey((long) 812);
        int int74 = dateTimeZone22.getOffset((long) 113);
        org.joda.time.DateTime dateTime75 = localDateTime20.toDateTime(dateTimeZone22);
        int int76 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.chrono.CopticChronology copticChronology77 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.hourOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.withWeekyear(700);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime79.minusMillis(593);
        org.joda.time.chrono.CopticChronology copticChronology87 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField88 = copticChronology87.dayOfYear();
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology87);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime89.withSecondOfMinute(43);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime89.plusDays(238);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime79.withFields((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime89.plusHours(586);
        boolean boolean99 = dateTime75.equals((java.lang.Object) localDateTime89);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CopticChronology[UTC]" + "'", str27, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1644573185651L + "'", long35 == 1644573185651L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644573085652L + "'", long50 == 1644573085652L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 36000000 + "'", int74 == 36000000);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(copticChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(copticChronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(localDateTime98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test17244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17244");
        java.util.Locale locale1 = new java.util.Locale("1737-06-04T09:44:05.259+10:00");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder2.setExtension('x', "811");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = locale7.getDisplayScript();
        java.lang.String str11 = locale7.getDisplayVariant();
        java.lang.String str12 = locale7.getDisplayScript();
        java.util.Locale.Builder builder13 = builder5.setLocale(locale7);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getISO3Country();
        boolean boolean17 = locale14.hasExtensions();
        java.util.Locale.Builder builder18 = builder5.setLocale(locale14);
        java.lang.String str19 = locale1.getDisplayVariant(locale14);
        java.util.Locale locale20 = locale14.stripExtensions();
        java.lang.String str21 = locale14.getISO3Language();
        java.lang.String str22 = locale14.getISO3Language();
        java.lang.String str23 = locale14.getDisplayName();
        org.junit.Assert.assertEquals(locale1.toString(), "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "KOR" + "'", str16, "KOR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Korean (South Korea)" + "'", str23, "Korean (South Korea)");
    }

    @Test
    public void test17245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17245");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology0.hours();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("106");
        timeZone7.setRawOffset((-1));
        java.time.ZoneId zoneId10 = timeZone7.toZoneId();
        boolean boolean11 = copticChronology0.equals((java.lang.Object) timeZone7);
        org.joda.time.DurationField durationField12 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime15.plusSeconds((int) 'x');
        int int31 = localDateTime15.getMillisOfSecond();
        int int32 = localDateTime15.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime15.plusDays(375);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime15.minusWeeks(0);
        long long38 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (-7339421678994L));
        org.joda.time.LocalDateTime.Property property39 = localDateTime15.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 717 + "'", int31 == 717);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644573185717L + "'", long38 == 1644573185717L);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test17246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17246");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str10 = locale5.getDisplayName(locale9);
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = locale12.stripExtensions();
        java.util.Locale.setDefault(category4, locale12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getDisplayScript();
        java.lang.String str24 = locale17.getDisplayVariant(locale20);
        java.lang.String str25 = locale16.getDisplayVariant(locale20);
        java.util.Locale.setDefault(category4, locale20);
        java.util.Set<java.lang.Character> charSet27 = locale20.getExtensionKeys();
        int int28 = property2.getMaximumTextLength(locale20);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese (China)" + "'", str7, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
    }

    @Test
    public void test17247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17247");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        java.lang.String str12 = property9.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        long long19 = dateTimeZone14.nextTransition((-1L));
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = property25.getAsText(locale26);
        org.joda.time.Interval interval28 = property25.toInterval();
        org.joda.time.LocalDateTime localDateTime29 = property25.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        boolean boolean50 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        boolean boolean71 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime70);
        int int72 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean74 = dateTime60.equals((java.lang.Object) 0L);
        org.joda.time.DateTime dateTime75 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int int76 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime60);
        long long77 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime60);
        int int78 = property9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime79 = property9.withMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35585756]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "756" + "'", str27, "756");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 36000000 + "'", int76 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2486793L + "'", long77 == 2486793L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 23 + "'", int78 == 23);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test17248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17248");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572635634L);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfDay();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfDay((int) (byte) 100);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = property21.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        boolean boolean25 = property3.equals((java.lang.Object) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = property3.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime27 = property3.roundHalfEvenCopy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11T19:43:55.634" + "'", str2, "2022-02-11T19:43:55.634");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1738-06-04T00:00:00.100" + "'", str20, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17249");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = copticChronology0.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17250");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(555);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test17251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17251");
        java.util.Locale locale3 = new java.util.Locale("525", "\u7f8e\u56fd", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayName();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u7f8e\u56fd\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "525" + "'", str4, "525");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u7f8e\u56fd\uc911\uad6d\uc5b4\uc911\uad6d))" + "'", str5, "\u7f8e\u56fd\uc911\uad6d\uc5b4\uc911\uad6d))");
    }

    @Test
    public void test17252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17252");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(465);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withTime(0, 179, 136, 927);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 179 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test17253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17253");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyearOfCentury();
        int int13 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField15 = copticChronology0.minutes();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("English (Canada)");
        timeZone17.setID("");
        int int21 = timeZone17.getOffset(1644572624742L);
        int int23 = timeZone17.getOffset(1644572671424L);
        boolean boolean24 = copticChronology0.equals((java.lang.Object) int23);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test17254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17254");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology0.years();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int7 = localDateTime6.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(687);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str12 = copticChronology11.toString();
        long long16 = copticChronology11.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        boolean boolean21 = property10.equals((java.lang.Object) localDateTime20);
        boolean boolean22 = copticChronology0.equals((java.lang.Object) boolean21);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(687);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Chronology chronology27 = copticChronology0.withZone(dateTimeZone25);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1136091124375922418L + "'", long16 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.687" + "'", str26, "+00:00:00.687");
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test17255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17255");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField7 = copticChronology6.seconds();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsText(locale14);
        long long16 = property13.remainder();
        org.joda.time.LocalDateTime localDateTime17 = property13.roundHalfFloorCopy();
        int int18 = property13.getMinimumValue();
        java.lang.String str19 = property13.getAsString();
        org.joda.time.LocalDateTime localDateTime20 = property13.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, 0);
        java.lang.String str25 = localDateTime20.toString("327");
        int[] intArray27 = copticChronology6.get((org.joda.time.ReadablePartial) localDateTime20, (long) 1734);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusHours(102);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.minusMinutes(607);
        long long52 = copticChronology6.set((org.joda.time.ReadablePartial) localDateTime50, 1644572701554L);
        org.joda.time.DurationField durationField53 = copticChronology6.weekyears();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        long long57 = copticChronology6.add(readablePeriod54, 0L, 35319622);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "870" + "'", str15, "870");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "870" + "'", str19, "870");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "327" + "'", str25, "327");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1686, 4, 23, 36001734]");
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1644465180100L + "'", long52 == 1644465180100L);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test17256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17256");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = localDateTime2.getMonthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        int int27 = localDateTime25.getYearOfCentury();
        int int28 = localDateTime25.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = localDateTime25.indexOf(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime25);
        int int32 = localDateTime25.getEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37 + "'", int27 == 37);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 18 + "'", int28 == 18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test17257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17257");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("minuteOfHour", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17258");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime7.minusHours(366);
        int[] intArray62 = localDateTime7.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = localDateTime7.toString(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1738, 6, 4, 35585915]");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1738-06-04T09:53:05.915" + "'", str64, "1738-06-04T09:53:05.915");
    }

    @Test
    public void test17259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17259");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withDayOfYear(191);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minusWeeks(90);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime25.getMinuteOfHour();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTime dateTime41 = localDateTime25.toDateTime(dateTimeZone40);
        int int42 = localDateTime25.size();
        boolean boolean43 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test17260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17260");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("119");
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getScript();
        java.lang.String str4 = locale2.getISO3Country();
        boolean boolean5 = locale2.hasExtensions();
        java.lang.String str6 = locale2.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getDisplayCountry();
        java.lang.String str9 = locale2.getDisplayLanguage(locale7);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsText(locale16);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale23 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str24 = locale18.getDisplayName(locale23);
        java.lang.String str25 = locale7.getDisplayVariant(locale23);
        java.lang.String str26 = locale1.getDisplayLanguage(locale7);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime29.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property45 = localDateTime29.millisOfDay();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = property45.getAsShortText(locale46);
        java.lang.String str50 = locale46.getDisplayVariant();
        java.lang.String str51 = locale46.getDisplayName();
        java.lang.String str52 = locale7.getDisplayLanguage(locale46);
        boolean boolean53 = locale7.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KOR" + "'", str4, "KOR");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u671d\u9c9c\u6587" + "'", str9, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "961" + "'", str17, "961");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale23.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (China)" + "'", str24, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (Canada)" + "'", str48, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "35585961" + "'", str49, "35585961");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (Canada)" + "'", str51, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese" + "'", str52, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test17261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17261");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(416);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        java.lang.String str11 = localDateTime7.toString("760");
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusSeconds(934);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        long long22 = dateTimeZone17.nextTransition((-1L));
        long long24 = dateTimeZone15.getMillisKeepLocal(dateTimeZone17, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMonthOfYear(866);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 866 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "760" + "'", str11, "760");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999031L) + "'", long24 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17262");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean5 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(0);
        java.util.TimeZone.setDefault(timeZone1);
        int int10 = timeZone1.getOffset(5431484687976L);
        int int12 = timeZone1.getOffset(1644572708397L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17263");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField12 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        java.lang.String str15 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.era();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        int[] intArray25 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusDays(4);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMinutes(36000000);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        java.lang.String str35 = dateTimeZone31.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = localDateTime29.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property38 = localDateTime29.year();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withYearOfEra(104);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str50 = copticChronology49.toString();
        org.joda.time.DurationField durationField51 = copticChronology49.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        long long58 = copticChronology49.set((org.joda.time.ReadablePartial) localDateTime54, (long) 100);
        org.joda.time.DurationField durationField59 = copticChronology49.hours();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology49.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology49.year();
        boolean boolean62 = localDateTime48.equals((java.lang.Object) copticChronology49);
        long long68 = copticChronology49.getDateTimeMillis((long) '4', 22, 44, 4, 710);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology69.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.hourOfDay();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology77 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime71.withFields((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusMonths(103981);
        int[] intArray88 = copticChronology49.get((org.joda.time.ReadablePartial) localDateTime84, 1644572630964L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime29, intArray88);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        long long93 = copticChronology0.add(readablePeriod90, (-35999983L), 35194601);
        int int94 = copticChronology0.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573186017L + "'", long9 == 1644573186017L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1737, 6, 4, 35586017]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CopticChronology[UTC]" + "'", str50, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644573186017L + "'", long58 == 1644573186017L);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 81844710L + "'", long68 == 81844710L);
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(copticChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1738, 6, 4, 35030964]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-35999983L) + "'", long93 == (-35999983L));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
    }

    @Test
    public void test17264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17264");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("GMT+09:43");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+09:43");
    }

    @Test
    public void test17265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17265");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.joda.time.DurationField durationField11 = copticChronology0.seconds();
        java.lang.String str12 = copticChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test17266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17266");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        boolean boolean30 = localDateTime15.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime15.plusHours(697);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek(173);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 173 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573186062L + "'", long9 == 1644573186062L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test17267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17267");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test17268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17268");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("fra");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("106");
        timeZone3.setRawOffset((-1));
        timeZone3.setRawOffset(207);
        timeZone3.setID("654");
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean11 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId12 = timeZone1.toZoneId();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId12);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology14.add(readablePeriod16, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField20 = copticChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology14.secondOfDay();
        org.joda.time.DurationField durationField24 = copticChronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology14.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = copticChronology14.getZone();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        boolean boolean29 = timeZone13.hasSameRules(timeZone28);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test17269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17269");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withMillisOfSecond(560);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks(9736);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test17270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17270");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfCeilingCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = new java.util.Locale("889", "4", "580");
        java.lang.String str28 = locale21.getDisplayScript(locale27);
        boolean boolean29 = property19.equals((java.lang.Object) locale27);
        org.joda.time.DurationField durationField30 = property19.getLeapDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 128 + "'", int18 == 128);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals(locale27.toString(), "889_4_580");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(durationField30);
    }

    @Test
    public void test17271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17271");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("1737-06-04T09:51:52.680+10:00", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17272");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        boolean boolean40 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int63 = property19.compareTo((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean64 = strSet12.remove((java.lang.Object) property19);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        boolean boolean70 = strSet66.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet71);
        boolean boolean73 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str75 = copticChronology74.toString();
        org.joda.time.chrono.CopticChronology copticChronology76 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology76.dayOfYear();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology76);
        org.joda.time.chrono.CopticChronology copticChronology79 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str80 = copticChronology79.toString();
        org.joda.time.DateTimeField dateTimeField81 = copticChronology79.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology82 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology82.dayOfYear();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology82);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime84.withSecondOfMinute(43);
        int[] intArray90 = copticChronology79.get((org.joda.time.ReadablePartial) localDateTime88, (long) 43);
        copticChronology74.validate((org.joda.time.ReadablePartial) localDateTime78, intArray90);
        org.joda.time.DateTimeField dateTimeField92 = copticChronology74.era();
        boolean boolean93 = strSet12.contains((java.lang.Object) copticChronology74);
        org.joda.time.Chronology chronology94 = copticChronology74.withUTC();
        org.joda.time.DateTimeField dateTimeField95 = copticChronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField96 = copticChronology74.year();
        org.joda.time.DateTimeField dateTimeField97 = copticChronology74.monthOfYear();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CopticChronology[UTC]" + "'", str75, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(copticChronology79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "CopticChronology[UTC]" + "'", str80, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(copticChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
    }

    @Test
    public void test17273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17273");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(831, 19, 983, 338, 35336538, 741, 151);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 338 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17274");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds(10);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMinuteOfHour(51);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withDurationAdded(readableDuration15, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withMinuteOfHour(174);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 174 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "208" + "'", str7, "208");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17275");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(416);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        java.lang.String str11 = localDateTime7.toString("760");
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withCenturyOfEra(593);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        int[] intArray28 = localDateTime27.getValues();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.hourOfDay();
        boolean boolean30 = property29.isLeap();
        org.joda.time.LocalDateTime localDateTime31 = property29.roundCeilingCopy();
        int int32 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds(4);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusMillis(23);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours(98);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        boolean boolean40 = localDateTime13.equals((java.lang.Object) localDateTime36);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minusDays(547);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "760" + "'", str11, "760");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1737, 6, 4, 35586224]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test17276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17276");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        java.util.Locale locale13 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str14 = locale8.getDisplayName(locale13);
        java.lang.String str15 = locale13.getScript();
        java.lang.String str16 = locale13.getDisplayName();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = locale13.toLanguageTag();
        java.util.Set<java.lang.Character> charSet19 = locale13.getExtensionKeys();
        java.util.Locale locale20 = locale13.stripExtensions();
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.lang.Object[] objArray23 = strSet21.toArray();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "254" + "'", str7, "254");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1738-06-04t09:43:28.618 (539)" + "'", str16, "1738-06-04t09:43:28.618 (539)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1738-06-04t09:43:28.618" + "'", str17, "1738-06-04t09:43:28.618");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und-539" + "'", str18, "und-539");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test17277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17277");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.minusMillis(758);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.plus(readableDuration22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, chronology24);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test17278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17278");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDurationAdded(readableDuration19, 103981);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(42);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime26.plusSeconds((int) 'x');
        int int42 = localDateTime26.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property43 = localDateTime26.era();
        org.joda.time.LocalDateTime.Property property44 = localDateTime26.yearOfEra();
        int int45 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property46 = localDateTime21.minuteOfHour();
        int int47 = localDateTime21.size();
        org.joda.time.LocalDateTime.Property property48 = localDateTime21.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime51 = property48.setCopy("441");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withWeekOfWeekyear(810);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 810 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 314 + "'", int42 == 314);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test17279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17279");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1738-06-04T00:44:27.284");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = timeZone1.getDisplayName(true, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 39");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17280");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        long long7 = dateTimeZone2.nextTransition((-1L));
        long long9 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 969);
        boolean boolean11 = dateTimeZone0.isStandardOffset(1644536616856L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        long long18 = dateTimeZone13.nextTransition((-1L));
        int int20 = dateTimeZone13.getStandardOffset((long) 'x');
        java.lang.String str21 = dateTimeZone13.getID();
        java.lang.String str22 = dateTimeZone13.getID();
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, 1644572702731L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-35999031L) + "'", long9 == (-35999031L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644536702731L + "'", long24 == 1644536702731L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test17281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17281");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusDays(1738);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        int int18 = localDateTime16.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        boolean boolean45 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        boolean boolean66 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime55);
        int int68 = property24.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property24.getFieldType();
        boolean boolean70 = localDateTime16.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = property71.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minus(readablePeriod74);
        int[] intArray77 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime73, (-35999736L));
        boolean boolean79 = copticChronology0.equals((java.lang.Object) "889");
        org.joda.time.DurationField durationField80 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField81 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField84 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField85 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 381 + "'", int18 == 381);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1686, 4, 22, 50400264]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test17282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17282");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField10 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField12 = copticChronology0.minutes();
        org.joda.time.DurationField durationField13 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17283");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withHourOfDay(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(1686);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay(814);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(30);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone18);
        boolean boolean24 = dateTimeZone18.isFixed();
        org.joda.time.DateTime dateTime25 = localDateTime14.toDateTime(dateTimeZone18);
        int[] intArray26 = localDateTime14.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime14.withDayOfMonth(467);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 467 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1607, 10, 4, 814]");
    }

    @Test
    public void test17284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17284");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17285");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str10 = copticChronology9.toString();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        long long18 = copticChronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMinutes(10);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withPeriodAdded(readablePeriod22, 999);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusDays(580);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears(734);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withPeriodAdded(readablePeriod31, 207);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(701);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime39.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime39.plusSeconds((int) 'x');
        int int55 = localDateTime39.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property56 = localDateTime39.era();
        org.joda.time.LocalDateTime.Property property57 = localDateTime39.yearOfEra();
        int int58 = property36.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime39.minusMillis(141);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime39.withYearOfEra(238);
        int[] intArray64 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime39, 1644572689105L);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime39.minusMillis(17);
        int int67 = localDateTime66.getYear();
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = localDateTime72.getFields();
        int int74 = localDateTime72.getYearOfCentury();
        int int75 = localDateTime72.size();
        org.joda.time.LocalDateTime.Property property76 = localDateTime72.weekyear();
        int int77 = localDateTime72.getMonthOfYear();
        boolean boolean78 = localDateTime66.isAfter((org.joda.time.ReadablePartial) localDateTime72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime72.withSecondOfMinute(179);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 179 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644573186455L + "'", long18 == 1644573186455L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 38 + "'", int21 == 38);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 455 + "'", int55 == 455);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1738, 6, 4, 35089105]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1738 + "'", int67 == 1738);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 38 + "'", int74 == 38);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test17286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17286");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        int int8 = localDateTime6.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        boolean boolean35 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        boolean boolean56 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property14.getFieldType();
        boolean boolean60 = localDateTime6.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minus(readablePeriod66);
        org.joda.time.Chronology chronology68 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime63.yearOfCentury();
        org.joda.time.Interval interval70 = property69.toInterval();
        org.joda.time.LocalDateTime localDateTime71 = property69.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 481 + "'", int8 == 481);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test17287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17287");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(416);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        java.lang.String str11 = localDateTime7.toString("760");
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withCenturyOfEra(593);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay((-2667));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2667 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "760" + "'", str11, "760");
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test17288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder3.setRegion("293");
        java.util.Locale.Builder builder7 = builder5.setRegion("716");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test17289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17289");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField5 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.millis();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17290");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale.setDefault(locale2);
        java.lang.String str8 = nameProvider0.getName(locale2, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str21 = locale16.getDisplayName(locale20);
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str23 = property14.getAsShortText(locale16);
        java.lang.String str24 = locale2.getDisplayLanguage(locale16);
        java.util.Locale locale25 = locale16.stripExtensions();
        java.lang.String str26 = locale16.getISO3Country();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "English (Canada)" + "'", str4, "English (Canada)");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (China)" + "'", str21, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "540" + "'", str23, "540");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u82f1\u6587" + "'", str24, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CHN" + "'", str26, "CHN");
    }

    @Test
    public void test17291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17291");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField10 = copticChronology0.days();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17292");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField51 = property5.getRangeDurationField();
        org.joda.time.tz.Provider provider52 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider52);
        org.joda.time.DateTimeZone.setProvider(provider52);
        java.util.Set<java.lang.String> strSet55 = provider52.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor56 = strSet55.iterator();
        boolean boolean57 = property5.equals((java.lang.Object) strSet55);
        org.joda.time.LocalDateTime localDateTime58 = property5.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusDays(1738);
        boolean boolean66 = localDateTime58.isAfter((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = localDateTime58.toString(dateTimeFormatter67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime58.plus(readableDuration69);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1738-06-04T09:53:06.572" + "'", str68, "1738-06-04T09:53:06.572");
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test17293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17293");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = copticChronology0.add(readablePeriod6, 100318935676133L, 134);
        java.lang.String str10 = copticChronology0.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = copticChronology0.getDateTimeMillis(575, 62, 584, 520, 35383667, 257, 876);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 520 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100318935676133L + "'", long9 == 100318935676133L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
    }

    @Test
    public void test17294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17294");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test17295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17295");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        long long13 = copticChronology8.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone14 = copticChronology8.getZone();
        long long18 = dateTimeZone14.convertLocalToUTC((long) '4', true, 36000000L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 292272708, dateTimeZone14);
        org.joda.time.Chronology chronology20 = copticChronology0.withZone(dateTimeZone14);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str22 = copticChronology21.toString();
        org.joda.time.DurationField durationField23 = copticChronology21.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        long long30 = copticChronology21.set((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology21.clockhourOfHalfday();
        java.lang.String str35 = copticChronology21.toString();
        org.joda.time.DurationField durationField36 = copticChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology21.hourOfDay();
        org.joda.time.DurationField durationField39 = copticChronology21.days();
        org.joda.time.DurationField durationField40 = copticChronology21.months();
        org.joda.time.DurationField durationField41 = copticChronology21.weeks();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str47 = dateTimeZone43.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone43);
        boolean boolean49 = dateTimeZone43.isFixed();
        org.joda.time.Chronology chronology50 = copticChronology21.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology51 = copticChronology0.withZone(dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = chronology51.getDateTimeMillis(950, 783, 0, 647, 429, 53, 35369487);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 647 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1136091124375922418L + "'", long13 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CopticChronology[UTC]" + "'", str22, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644573186662L + "'", long30 == 1644573186662L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CopticChronology[UTC]" + "'", str35, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test17296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17296");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfWeek();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime29.getFieldTypes();
        int int44 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getISO3Country();
        int int52 = property48.getMaximumTextLength(locale49);
        java.lang.String str53 = localDateTime29.toString("293", locale49);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime7.toString("572", locale49);
        int[] intArray59 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime7, 0L);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime7.plusSeconds(35069533);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "293" + "'", str53, "293");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "572" + "'", str57, "572");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 0]");
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test17297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17297");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.TimeZone.setDefault(timeZone13);
        java.time.ZoneId zoneId18 = timeZone13.toZoneId();
        boolean boolean19 = strSet11.equals((java.lang.Object) timeZone13);
        boolean boolean20 = timeZone10.hasSameRules(timeZone13);
        int int22 = timeZone10.getOffset(1794736051767L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test17298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17298");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17299");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.toString();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str25 = copticChronology24.toString();
        long long29 = copticChronology24.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology24.weekOfWeekyear();
        boolean boolean31 = dateTimeZone20.equals((java.lang.Object) copticChronology24);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology24.weekyear();
        org.joda.time.DurationField durationField33 = copticChronology24.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        java.util.TimeZone timeZone38 = dateTimeZone35.toTimeZone();
        long long40 = dateTimeZone35.nextTransition((-1L));
        int int42 = dateTimeZone35.getStandardOffset((long) 'x');
        java.lang.String str43 = dateTimeZone35.getID();
        java.lang.String str45 = dateTimeZone35.getShortName((long) 9);
        java.lang.String str46 = dateTimeZone35.toString();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology48 = copticChronology24.withZone(dateTimeZone35);
        boolean boolean49 = dateTimeZone13.equals((java.lang.Object) copticChronology24);
        org.joda.time.DateTimeField dateTimeField50 = copticChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology24.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[UTC]" + "'", str25, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1136091124375922418L + "'", long29 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test17300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17300");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        boolean boolean11 = strSet7.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap12);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream14 = languageRangeList13.stream();
        boolean boolean15 = strSet6.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream16 = languageRangeList13.parallelStream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(languageRangeStream16);
    }

    @Test
    public void test17301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17301");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = copticChronology0.add(readablePeriod4, 1644572682049L, (-1));
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField10 = copticChronology0.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572682049L + "'", long7 == 1644572682049L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17302");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(575);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusSeconds(35218126);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfSecond(323);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-292275054) + "'", int3 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test17303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17303");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder4.setRegion("357");
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("Fri");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("1737-06-04T09:47:18.451+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1737-06-04T09:47:18.451+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test17304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17304");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.year();
        org.joda.time.DurationField durationField9 = copticChronology0.hours();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        long long16 = dateTimeZone11.nextTransition((-1L));
        long long19 = dateTimeZone11.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.Chronology chronology21 = copticChronology0.withZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = copticChronology0.add(readablePeriod22, 1644572637142L, 359);
        long long29 = copticChronology0.add(10597167987096L, 1644572855630L, 0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-35999999L) + "'", long19 == (-35999999L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644572637142L + "'", long25 == 1644572637142L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10597167987096L + "'", long29 == 10597167987096L);
    }

    @Test
    public void test17305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17305");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology0.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.getLocalDateTime();
        boolean boolean29 = property27.isLeap();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property27.getAsText(locale30);
        org.joda.time.LocalDateTime localDateTime32 = property27.withMinimumValue();
        long long34 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime32, 1644572791935L);
        org.joda.time.Chronology chronology35 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "9" + "'", str31, "9");
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644540786847L + "'", long34 == 1644540786847L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test17306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17306");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17307");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17308");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay((int) '#');
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone2);
        long long16 = dateTimeZone2.previousTransition(1644572610881L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1644572637142L, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        int int19 = property18.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572610881L + "'", long16 == 1644572610881L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test17309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17309");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.util.TimeZone timeZone9 = dateTimeZone5.toTimeZone();
        int int11 = dateTimeZone5.getOffset(0L);
        java.util.TimeZone timeZone12 = dateTimeZone5.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = nameProvider14.getName(locale16, "38", "493");
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.getScript();
        java.lang.String str23 = locale20.getExtension('a');
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale20.getDisplayName(locale25);
        java.lang.String str29 = nameProvider14.getName(locale25, "239", "750");
        java.lang.String str30 = dateTimeZone5.getName(81844710L, locale25);
        java.util.Locale.Builder builder31 = builder0.setLocale(locale25);
        java.util.Locale.Builder builder33 = builder0.addUnicodeLocaleAttribute("627");
        java.util.Locale.Builder builder34 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder34.setScript("1738-06-04T09:48:59.585");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1738-06-04T09:48:59.585 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str26, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test17310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17310");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("35021141");
        java.util.Date date2 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromDateFields(date2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(711);
        int int7 = localDateTime6.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Wed Jan 01 00:00:00 GMT 35021141");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35021127 + "'", int7 == 35021127);
    }

    @Test
    public void test17311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17311");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Country();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("eng", strMap9);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream11 = languageRangeList10.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("eng", strMap13);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale32.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfSecond();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = property40.getAsText(locale41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale15, locale16, locale23, locale25, locale26, locale27, locale29, locale32, locale34, locale41, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter(languageRangeList10, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap50);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream52 = languageRangeList10.stream();
        boolean boolean53 = strSet7.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeStream11);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "936" + "'", str24, "936");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (Canada)" + "'", str30, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "936" + "'", str42, "936");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test17312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17312");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17313");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Country();
        int int17 = property13.getMaximumTextLength(locale14);
        java.lang.String str18 = locale14.getISO3Language();
        int int19 = property9.getMaximumShortTextLength(locale14);
        java.lang.String str20 = property9.getAsString();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str22 = copticChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology21.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond(5);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        boolean boolean48 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        boolean boolean69 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime68);
        int int70 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.millisOfSecond();
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.lang.String str78 = property76.getAsText(locale77);
        long long79 = property76.remainder();
        org.joda.time.LocalDateTime localDateTime80 = property76.roundHalfFloorCopy();
        java.lang.String str81 = property76.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property76.getFieldType();
        boolean boolean83 = dateTime58.isSupported(dateTimeFieldType82);
        int int84 = property27.getDifference((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime58.getZone();
        java.lang.String str86 = dateTime58.toString();
        long long87 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35586989]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "jpn" + "'", str18, "jpn");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CopticChronology[UTC]" + "'", str22, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "989" + "'", str78, "989");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Property[millisOfSecond]" + "'", str81, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 149733239 + "'", int84 == 149733239);
        org.junit.Assert.assertNotNull(dateTimeZone85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1737-06-04T09:53:06.989+10:00" + "'", str86, "1737-06-04T09:53:06.989+10:00");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 2486794L + "'", long87 == 2486794L);
    }

    @Test
    public void test17314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17314");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = property8.getAsText(locale9);
        org.joda.time.Interval interval11 = property8.toInterval();
        org.joda.time.LocalDateTime localDateTime12 = property8.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str14 = copticChronology13.toString();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = copticChronology13.add(readablePeriod15, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField19 = copticChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology13.secondOfDay();
        boolean boolean22 = localDateTime12.equals((java.lang.Object) dateTimeField21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMaximumValue();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = property32.getAsText(locale33);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale33.getDisplayName(locale36);
        java.lang.String str42 = locale33.getDisplayName();
        java.lang.String str43 = locale26.getDisplayName(locale33);
        java.lang.String str44 = locale26.getDisplayVariant();
        java.lang.String str45 = locale26.getDisplayScript();
        java.lang.String str46 = locale26.getCountry();
        java.lang.String str47 = property23.getAsShortText(locale26);
        java.lang.String str48 = locale26.getDisplayLanguage();
        java.lang.String str51 = nameProvider0.getName(locale26, "1738-06-04T09:48:17.783", "37542-06-04T09:46:36.565");
        java.util.Locale locale52 = locale26.stripExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "38" + "'", str10, "38");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "38" + "'", str34, "38");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English (Canada)" + "'", str37, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English" + "'", str42, "English");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Italian" + "'", str43, "Italian");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "38" + "'", str47, "38");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Italian" + "'", str48, "Italian");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
    }

    @Test
    public void test17315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17315");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = copticChronology4.hours();
        int int6 = copticChronology4.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology4.era();
        boolean boolean8 = strSet3.remove((java.lang.Object) copticChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = copticChronology4.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 220, (org.joda.time.Chronology) copticChronology4);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology4.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.DurationField durationField16 = copticChronology14.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        long long23 = copticChronology14.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology14.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withEra(1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withPeriodAdded(readablePeriod34, 723);
        long long38 = copticChronology14.set((org.joda.time.ReadablePartial) localDateTime36, (long) 999);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str40 = copticChronology39.toString();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = copticChronology39.add(readablePeriod41, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField45 = copticChronology39.halfdays();
        org.joda.time.DurationField durationField46 = copticChronology39.millis();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = copticChronology39.add(readablePeriod47, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology53 = copticChronology39.withZone(dateTimeZone52);
        long long55 = dateTimeZone52.previousTransition((long) 103981);
        org.joda.time.DateTime dateTime56 = localDateTime36.toDateTime(dateTimeZone52);
        int int57 = localDateTime36.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime36.centuryOfEra();
        long long60 = copticChronology4.set((org.joda.time.ReadablePartial) localDateTime36, 5431484917371L);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644573187066L + "'", long23 == 1644573187066L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644573087066L + "'", long38 == 1644573087066L);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CopticChronology[UTC]" + "'", str40, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 35L + "'", long50 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 103981L + "'", long55 == 103981L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644573087066L + "'", long60 == 1644573087066L);
    }

    @Test
    public void test17316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17316");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int69 = property25.compareTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean70 = strSet18.remove((java.lang.Object) property25);
        org.joda.time.LocalDateTime localDateTime72 = property25.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime73 = property25.roundHalfCeilingCopy();
        int int74 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) int74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test17317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17317");
        java.util.Locale locale1 = new java.util.Locale("Greenwich Mean Time");
        java.util.Locale locale5 = new java.util.Locale("974", "787", "485");
        java.lang.String str6 = locale5.getDisplayVariant();
        java.lang.String str7 = locale1.getDisplayCountry(locale5);
        java.lang.String str8 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "greenwich mean time");
        org.junit.Assert.assertEquals(locale5.toString(), "974_787_485");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "485" + "'", str6, "485");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "greenwich mean time" + "'", str8, "greenwich mean time");
    }

    @Test
    public void test17318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17318");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str9 = copticChronology8.toString();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str14 = copticChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withSecondOfMinute(43);
        int[] intArray24 = copticChronology13.get((org.joda.time.ReadablePartial) localDateTime22, (long) 43);
        copticChronology8.validate((org.joda.time.ReadablePartial) localDateTime12, intArray24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone27);
        org.joda.time.Chronology chronology31 = copticChronology8.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekOfWeekyear();
        boolean boolean33 = languageRange1.equals((java.lang.Object) chronology31);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[UTC]" + "'", str9, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17319");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("589");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("35150646");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test17320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17320");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1738-06-04T09:45:40.186", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1738-06-04t09:45:40.186");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17321");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        long long9 = dateTimeZone6.adjustOffset((long) 5, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        java.lang.Object obj11 = null;
        boolean boolean12 = dateTimeZone6.equals(obj11);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 5L + "'", long9 == 5L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17322");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekyear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale9.getExtension('u');
        java.lang.String str13 = property8.getAsShortText(locale9);
        int int14 = property8.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField15 = property8.getField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1738" + "'", str13, "1738");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292269337) + "'", int14 == (-292269337));
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17323");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField36 = copticChronology0.seconds();
        org.joda.time.DurationField durationField37 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573187188L + "'", long9 == 1644573187188L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485187188L + "'", long31 == 5431485187188L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test17324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17324");
        java.util.Locale locale3 = new java.util.Locale("674", "1738-05-24T09:51:56.414", "254");
        org.junit.Assert.assertEquals(locale3.toString(), "674_1738-05-24T09:51:56.414_254");
    }

    @Test
    public void test17325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17325");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        int int16 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMonths(1743);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.year();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMillis(35252575);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMonths(308);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1738 + "'", int16 == 1738);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test17326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17326");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("35048744");
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str4 = copticChronology3.toString();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = copticChronology3.add(readablePeriod5, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField9 = copticChronology3.halfdays();
        org.joda.time.DurationField durationField10 = copticChronology3.millis();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = copticChronology3.add(readablePeriod11, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology17 = copticChronology3.withZone(dateTimeZone16);
        long long19 = dateTimeZone16.previousTransition((long) 103981);
        java.util.TimeZone timeZone20 = dateTimeZone16.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime25.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property41 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime.Property property42 = localDateTime25.minuteOfHour();
        int int43 = localDateTime25.getEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime25.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str47 = copticChronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology46.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withSecondOfMinute(43);
        int[] intArray57 = copticChronology46.get((org.joda.time.ReadablePartial) localDateTime55, (long) 43);
        copticChronology21.validate((org.joda.time.ReadablePartial) localDateTime25, intArray57);
        org.joda.time.DurationField durationField59 = copticChronology21.centuries();
        org.joda.time.DurationField durationField60 = copticChronology21.hours();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str65 = dateTimeZone64.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        java.util.TimeZone timeZone67 = dateTimeZone64.toTimeZone();
        long long69 = dateTimeZone64.nextTransition((-1L));
        long long71 = dateTimeZone62.getMillisKeepLocal(dateTimeZone64, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology72 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone64);
        int[] intArray75 = copticChronology21.get((org.joda.time.ReadablePartial) localDateTime73, 1644572736021L);
        java.util.Date date76 = localDateTime73.toDate();
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.fromDateFields(date76);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.fromDateFields(date76);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.fromDateFields(date76);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.fromDateFields(date76);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.fromDateFields(date76);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.fromDateFields(date76);
        boolean boolean83 = timeZone1.inDaylightTime(date76);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CopticChronology[UTC]" + "'", str4, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 103981L + "'", long19 == 103981L);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CopticChronology[UTC]" + "'", str47, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+10:00" + "'", str65, "+10:00");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-35999031L) + "'", long71 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1738, 6, 9, 35136021]");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Fri Feb 11 19:44:44 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test17327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17327");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((long) 100);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        int int18 = property14.getMaximumShortTextLength(locale17);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property37 = localDateTime21.millisOfDay();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = property37.getAsShortText(locale38);
        java.lang.String str42 = locale38.getDisplayVariant();
        java.lang.String str43 = property14.getAsShortText(locale38);
        java.lang.String str44 = property8.getAsText(locale38);
        java.util.Set<java.lang.String> strSet45 = locale38.getUnicodeLocaleAttributes();
        int int46 = strSet45.size();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.parse("eng", strMap48);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream50 = languageRangeList49.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.parse("eng", strMap52);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.millisOfSecond();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.lang.String str63 = property61.getAsText(locale62);
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = locale71.getISO3Language();
        java.util.Locale locale73 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField75 = copticChronology74.dayOfYear();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.millisOfSecond();
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        java.lang.String str81 = property79.getAsText(locale80);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale54, locale55, locale62, locale64, locale65, locale66, locale68, locale71, locale73, locale80, locale82, locale83 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList53, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter(languageRangeList49, (java.util.Collection<java.util.Locale>) localeList87, filteringMode88);
        boolean boolean90 = strSet45.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49);
        java.util.Iterator<java.lang.String> strItor91 = strSet45.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = strSet45.add("Monday");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (Canada)" + "'", str40, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "35587331" + "'", str41, "35587331");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "331" + "'", str43, "331");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "February" + "'", str44, "February");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(languageRangeStream50);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "332" + "'", str63, "332");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English (Canada)" + "'", str69, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "eng" + "'", str72, "eng");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "332" + "'", str81, "332");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNotNull(localeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strItor91);
    }

    @Test
    public void test17328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17328");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone1 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test17329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17329");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withWeekyear(514);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfCentury();
        boolean boolean32 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withSecondOfMinute(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.plusMonths(278);
        int int37 = localDateTime28.getWeekyear();
        org.joda.time.DateTime dateTime38 = localDateTime28.toDateTime();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1737 + "'", int37 == 1737);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test17330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17330");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 22);
        long long5 = dateTimeZone1.convertUTCToLocal(1L);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = dateTimeZone1.getName(1644572692240L, locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        boolean boolean11 = locale10.hasExtensions();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("Chinese", strMap15);
        boolean boolean17 = strSet13.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16);
        boolean boolean18 = strSet9.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000001L + "'", long5 == 36000001L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeList20);
    }

    @Test
    public void test17331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17331");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths(4);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(113);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusYears(884);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMinutes(927);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17332");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("258");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(759);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test17333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17333");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        boolean boolean14 = dateTimeZone1.isStandardOffset(1644572616432L);
        int int16 = dateTimeZone1.getOffsetFromLocal((long) 6);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField21 = copticChronology20.hours();
        int int22 = copticChronology20.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.era();
        boolean boolean24 = strSet19.remove((java.lang.Object) copticChronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = copticChronology20.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        long long34 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 128);
        boolean boolean35 = dateTimeZone25.isFixed();
        long long37 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, 1644572652334L);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.millisOfSecond();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = property43.getAsText(locale44);
        long long46 = property43.remainder();
        org.joda.time.LocalDateTime localDateTime47 = property43.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.year();
        long long49 = property48.remainder();
        java.lang.String str50 = property48.getAsShortText();
        int int51 = property48.getMaximumValue();
        boolean boolean52 = dateTimeZone25.equals((java.lang.Object) property48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 128L + "'", long34 == 128L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572652334L + "'", long37 == 1644572652334L);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "435" + "'", str45, "435");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 13254787435L + "'", long49 == 13254787435L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1738" + "'", str50, "1738");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292272708 + "'", int51 == 292272708);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test17334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17334");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) 'x');
        long long31 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime29, (long) 1);
        org.joda.time.DurationField durationField32 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573187455L + "'", long9 == 1644573187455L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5431485187455L + "'", long31 == 5431485187455L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test17335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17335");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField3 = copticChronology1.minutes();
        org.joda.time.Chronology chronology4 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 748, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DurationField durationField9 = copticChronology1.millis();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str11 = copticChronology10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology10.add(readablePeriod12, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField16 = copticChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology10.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = copticChronology10.add(readablePeriod19, 1644572630964L, 0);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str24 = copticChronology23.toString();
        org.joda.time.DurationField durationField25 = copticChronology23.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        long long32 = copticChronology23.set((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology23.dayOfMonth();
        org.joda.time.DurationField durationField38 = copticChronology23.months();
        org.joda.time.DateTimeZone dateTimeZone39 = copticChronology23.getZone();
        long long42 = dateTimeZone39.convertLocalToUTC(52L, true);
        org.joda.time.Chronology chronology43 = copticChronology10.withZone(dateTimeZone39);
        org.joda.time.Chronology chronology44 = copticChronology1.withZone(dateTimeZone39);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644572630964L + "'", long22 == 1644572630964L);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CopticChronology[UTC]" + "'", str24, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644573187472L + "'", long32 == 1644573187472L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test17336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17336");
        java.lang.String[] strArray18 = new java.lang.String[] { "93", "171", "93", "93", "en", "160", "hi!", "Greenwich Mean Time", "449", "eng", "449", "527", "Chinese (China)", "en", "Chinese (China)", "en_CA", "+10:00", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "+10:00", "en" };
        java.lang.CharSequence[] charSequenceArray24 = strSet19.toArray(charSequenceArray23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField26 = copticChronology25.hours();
        int int27 = copticChronology25.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology25.era();
        org.joda.time.DurationField durationField29 = copticChronology25.days();
        boolean boolean30 = strSet19.remove((java.lang.Object) copticChronology25);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        boolean boolean35 = strSet31.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap36);
        boolean boolean38 = strSet19.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField40 = copticChronology39.hours();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology39.weekOfWeekyear();
        boolean boolean42 = strSet19.contains((java.lang.Object) copticChronology39);
        boolean boolean44 = strSet19.remove((java.lang.Object) "298");
        boolean boolean45 = strSet19.isEmpty();
        java.lang.Object obj46 = null;
        boolean boolean47 = strSet19.contains(obj46);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test17337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17337");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(10);
        long long22 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime20, (long) 'a');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMonths(35028711);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readableDuration28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusYears((int) (short) -1);
        int[] intArray39 = localDateTime38.getValues();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.hourOfDay();
        boolean boolean41 = property40.isLeap();
        org.joda.time.LocalDateTime localDateTime42 = property40.roundCeilingCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds(4);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.minusMillis(23);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours(98);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = property55.getLocalDateTime();
        boolean boolean57 = property55.isLeap();
        org.joda.time.LocalDateTime localDateTime58 = property55.roundHalfEvenCopy();
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property64.getFieldType();
        int int66 = localDateTime58.indexOf(dateTimeFieldType65);
        int int67 = localDateTime49.indexOf(dateTimeFieldType65);
        boolean boolean68 = localDateTime24.isSupported(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644537600010L + "'", long22 == 1644537600010L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1737, 6, 4, 35587514]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test17338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17338");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        int int28 = localDateTime27.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withCenturyOfEra(975);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology31.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        int[] intArray43 = localDateTime42.getValues();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        int[] intArray54 = localDateTime53.getValues();
        copticChronology31.validate((org.joda.time.ReadablePartial) localDateTime45, intArray54);
        int int56 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.minusDays(782);
        boolean boolean59 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str61 = copticChronology60.toString();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        long long65 = copticChronology60.add(readablePeriod62, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField66 = copticChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology60.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology60.weekyear();
        org.joda.time.Chronology chronology69 = copticChronology60.withUTC();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime58, (org.joda.time.Chronology) copticChronology60);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.hourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        org.joda.time.chrono.CopticChronology copticChronology81 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology81.dayOfYear();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property86 = localDateTime83.hourOfDay();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime83.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = localDateTime88.toDateTime(readableInstant89);
        boolean boolean91 = dateTime80.isEqual((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTimeZone dateTimeZone92 = dateTime90.getZone();
        java.lang.String str93 = dateTimeZone92.getID();
        org.joda.time.Chronology chronology94 = copticChronology60.withZone(dateTimeZone92);
        long long96 = dateTimeZone92.convertUTCToLocal(1644573140831L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 38 + "'", int28 == 38);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1737, 6, 4, 35587550]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1737, 6, 4, 35587550]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CopticChronology[UTC]" + "'", str61, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(copticChronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+10:00" + "'", str93, "+10:00");
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1644609140831L + "'", long96 == 1644609140831L);
    }

    @Test
    public void test17339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17339");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property20 = localDateTime2.yearOfEra();
        int int21 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusSeconds(35048859);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime26.dayOfMonth();
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = property40.getAsShortText(locale41);
        org.joda.time.LocalDateTime localDateTime43 = property40.roundCeilingCopy();
        boolean boolean44 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusMonths(354);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 587 + "'", int18 == 587);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35587587 + "'", int21 == 35587587);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "4" + "'", str42, "4");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test17340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17340");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay(10);
        int[] intArray16 = localDateTime15.getValues();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withEra(1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.minus(readableDuration27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration27, dateTimeZone31);
        int int33 = localDateTime32.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        java.lang.String str39 = dateTimeZone35.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone35);
        int int41 = localDateTime40.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDayOfWeek(6);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone49);
        java.lang.String str52 = dateTimeZone49.getShortName(1136020407753600097L);
        org.joda.time.DateTime dateTime53 = localDateTime46.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime54 = localDateTime32.toDateTime(dateTimeZone49);
        org.joda.time.Instant instant55 = dateTime54.toInstant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1738, 6, 4, 10]");
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant55);
    }

    @Test
    public void test17341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17341");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("35584779", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=35584779");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17342");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime2.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.withYearOfEra(274);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withDurationAdded(readableDuration23, 972);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test17343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17343");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField51 = property5.getRangeDurationField();
        org.joda.time.tz.Provider provider52 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider52);
        org.joda.time.DateTimeZone.setProvider(provider52);
        java.util.Set<java.lang.String> strSet55 = provider52.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor56 = strSet55.iterator();
        boolean boolean57 = property5.equals((java.lang.Object) strSet55);
        org.joda.time.LocalDateTime localDateTime58 = property5.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField59 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime60 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusYears(870);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusMinutes(210);
        java.lang.String str65 = localDateTime62.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNull(durationField59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0868-06-04T09:53:07.671" + "'", str65, "0868-06-04T09:53:07.671");
    }

    @Test
    public void test17344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17344");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder4.setRegion("357");
        java.util.Locale.Builder builder10 = builder4.clear();
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("575");
        java.util.Locale.Builder builder14 = builder10.removeUnicodeLocaleAttribute("607");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder14.setUnicodeLocaleKeyword("883", "887");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 883 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test17345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17345");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(700);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMillis(51);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMinutes(633);
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test17346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17346");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DurationField durationField6 = copticChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology0.getZone();
        long long11 = copticChronology0.add(1644572677045L, (-7339421692352L), 310);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str13 = copticChronology12.toString();
        org.joda.time.DurationField durationField14 = copticChronology12.millis();
        org.joda.time.DurationField durationField15 = copticChronology12.months();
        org.joda.time.DurationField durationField16 = copticChronology12.days();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = copticChronology12.add(readablePeriod17, 1794735840225L, 291);
        int int21 = copticChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = copticChronology12.getZone();
        int int24 = dateTimeZone22.getOffset(1644572857783L);
        boolean boolean26 = dateTimeZone22.isStandardOffset(1644573098899L);
        org.joda.time.Chronology chronology27 = copticChronology0.withZone(dateTimeZone22);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2273576151952075L) + "'", long11 == (-2273576151952075L));
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CopticChronology[UTC]" + "'", str13, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1794735840225L + "'", long20 == 1794735840225L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test17347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17347");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        boolean boolean14 = dateTimeZone1.isStandardOffset(1644572616432L);
        java.lang.String str16 = dateTimeZone1.getNameKey((long) 812);
        long long20 = dateTimeZone1.convertLocalToUTC(1644572755278L, true, 1794735961454L);
        java.lang.String str22 = dateTimeZone1.getNameKey(1644572678353L);
        long long24 = dateTimeZone1.convertUTCToLocal((long) 43);
        long long27 = dateTimeZone1.adjustOffset(1644573041338L, true);
        boolean boolean28 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644536755278L + "'", long20 == 1644536755278L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000043L + "'", long24 == 36000043L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644573041338L + "'", long27 == 1644573041338L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test17348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17348");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 22);
        long long6 = dateTimeZone2.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str8 = dateTimeZone2.getID();
        int int10 = dateTimeZone2.getOffset(1644572998055L);
        java.lang.String str11 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
    }

    @Test
    public void test17349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17349");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime3.plus(readablePeriod19);
        int int21 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMonths(3);
        int int24 = localDateTime20.getYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.secondOfMinute();
        int int26 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        long long34 = dateTimeZone29.nextTransition((-1L));
        int int36 = dateTimeZone29.getStandardOffset((long) 'x');
        java.lang.String str37 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime38 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone29);
        int int41 = dateTimeZone29.getOffsetFromLocal((-7339421269194L));
        java.lang.String str43 = dateTimeZone29.getName(36005L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 780 + "'", int21 == 780);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1738 + "'", int24 == 1738);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
    }

    @Test
    public void test17350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17350");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        boolean boolean23 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.year();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        boolean boolean46 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(readableInstant65);
        boolean boolean67 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime56);
        long long69 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.hourOfDay();
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale73.getISO3Country();
        int int76 = property72.getMaximumTextLength(locale73);
        java.lang.String str77 = locale73.getDisplayVariant();
        int int78 = property25.getMaximumTextLength(locale73);
        java.util.Set<java.lang.Character> charSet79 = locale73.getExtensionKeys();
        java.util.Locale locale81 = new java.util.Locale("1738-06-04T09:43:41.692");
        java.lang.String str82 = locale81.getScript();
        java.lang.String str83 = locale73.getDisplayCountry(locale81);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 284L + "'", long69 == 284L);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals(locale81.toString(), "1738-06-04t09:43:41.692");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test17351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17351");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.yearOfEra();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime30);
        int int32 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = property33.withMinimumValue();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        int[] intArray37 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime34, 1644572796637L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1738, 6, 4, 35196637]");
    }

    @Test
    public void test17352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17352");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        java.lang.String[] strArray20 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        boolean boolean24 = strSet21.equals((java.lang.Object) locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = property10.getAsText(locale23);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = property10.getAsShortText(locale27);
        org.joda.time.LocalDateTime localDateTime31 = property10.setCopy(30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusHours(1737);
        int int36 = localDateTime35.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks(74);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        long long42 = dateTimeZone40.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = localDateTime35.toDateTime(dateTimeZone40);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "37" + "'", str26, "37");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "37" + "'", str29, "37");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 30 + "'", int36 == 30);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 432000000L + "'", long42 == 432000000L);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test17353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17353");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        int int18 = localDateTime2.getMillisOfSecond();
        int int19 = localDateTime2.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.plusDays(375);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.plus(readablePeriod22);
        java.lang.String str24 = localDateTime2.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 885 + "'", int18 == 885);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1738-06-04T09:53:07.885" + "'", str24, "1738-06-04T09:53:07.885");
    }

    @Test
    public void test17354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17354");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        boolean boolean40 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int63 = property19.compareTo((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean64 = strSet12.remove((java.lang.Object) property19);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.parse("eng", strMap67);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream69 = languageRangeList68.stream();
        boolean boolean70 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream71 = languageRangeList68.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream72 = languageRangeList68.stream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(languageRangeStream71);
        org.junit.Assert.assertNotNull(languageRangeStream72);
    }

    @Test
    public void test17355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17355");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String str4 = nameProvider0.getName(locale1, "fr", "572");
        java.util.Locale locale6 = new java.util.Locale("1737-06-04T09:44:05.259+10:00");
        java.lang.String str9 = nameProvider0.getName(locale6, "721", "705");
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale10.getDisplayVariant();
        java.util.Locale locale15 = new java.util.Locale("Greenwich Mean Time");
        java.lang.String str16 = locale10.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getDisplayVariant();
        java.lang.String str21 = locale17.getISO3Country();
        java.lang.String str22 = locale15.getDisplayName(locale17);
        java.lang.String str25 = nameProvider0.getName(locale17, "583", "558");
        java.lang.String str26 = locale17.getVariant();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale6.toString(), "1737-06-04t09:44:05.259+10:00");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale15.toString(), "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CAN" + "'", str21, "CAN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "greenwich mean time" + "'", str22, "greenwich mean time");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test17356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17356");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField10 = copticChronology0.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = copticChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology0.getZone();
        org.joda.time.DurationField durationField13 = copticChronology0.millis();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str15 = copticChronology14.toString();
        org.joda.time.DurationField durationField16 = copticChronology14.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        long long23 = copticChronology14.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minusMinutes(10);
        int int26 = localDateTime25.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withPeriodAdded(readablePeriod27, 999);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks(28);
        int[] intArray33 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime31, (-7339421660150L));
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[UTC]" + "'", str15, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644573187955L + "'", long23 == 1644573187955L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 38 + "'", int26 == 38);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1453, 9, 28, 85539850]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test17357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17357");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(44);
        int int10 = dateTimeZone8.getOffsetFromLocal(1644572632040L);
        java.lang.String str11 = dateTimeZone8.getID();
        java.lang.String str13 = dateTimeZone8.getName(1644572690925L);
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone17);
        int int23 = localDateTime22.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withDayOfWeek(6);
        int int26 = localDateTime25.getMinuteOfHour();
        boolean boolean27 = localDateTime15.equals((java.lang.Object) localDateTime25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusMonths(353);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = property35.getAsText(locale36);
        long long38 = property35.remainder();
        org.joda.time.LocalDateTime localDateTime39 = property35.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = property35.roundHalfCeilingCopy();
        int int41 = localDateTime40.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMonths(250);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = localDateTime43.getFields();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minus(readablePeriod45);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 158400000 + "'", int10 == 158400000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+44:00" + "'", str11, "+44:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+44:00" + "'", str13, "+44:00");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "974" + "'", str37, "974");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test17358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17358");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.plus(readablePeriod34);
        int int36 = localDateTime35.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfEra();
        boolean boolean38 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusSeconds(49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime35.getFieldTypes();
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withSecondOfMinute(43);
        java.lang.String str50 = localDateTime44.toString("\u82f1\u8a9e");
        org.joda.time.LocalDateTime.Property property51 = localDateTime44.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = property51.setCopy(0);
        int int54 = property51.getMinimumValueOverall();
        boolean boolean55 = property51.isLeap();
        org.joda.time.LocalDateTime localDateTime56 = property51.getLocalDateTime();
        int int57 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime35.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u82f1\u8a9e" + "'", str50, "\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test17359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17359");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime22.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property38 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.minuteOfHour();
        int int40 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime22.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withSecondOfMinute(43);
        int[] intArray54 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime52, (long) 43);
        copticChronology18.validate((org.joda.time.ReadablePartial) localDateTime22, intArray54);
        org.joda.time.DurationField durationField56 = copticChronology18.centuries();
        org.joda.time.DurationField durationField57 = copticChronology18.hours();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.TimeZone timeZone64 = dateTimeZone61.toTimeZone();
        long long66 = dateTimeZone61.nextTransition((-1L));
        long long68 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone61);
        int[] intArray72 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime70, 1644572736021L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withMonthOfYear(650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 650 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999031L) + "'", long68 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1738, 6, 9, 35136021]");
    }

    @Test
    public void test17360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17360");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withHourOfDay(22);
        int int40 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMillisOfSecond(283);
        int int43 = localDateTime42.getSecondOfMinute();
        org.joda.time.Chronology chronology44 = localDateTime42.getChronology();
        boolean boolean45 = localDateTime21.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test17361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17361");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        boolean boolean4 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2);
        java.lang.String[] strArray14 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        boolean boolean18 = strSet15.equals((java.lang.Object) locale17);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("eng", strMap21);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = property30.getAsText(locale31);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale40.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.millisOfSecond();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = property48.getAsText(locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray53 = new java.util.Locale[] { locale23, locale24, locale31, locale33, locale34, locale35, locale37, locale40, locale42, locale49, locale51, locale52 };
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList54);
        boolean boolean57 = strSet15.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22);
        java.util.Set<java.lang.String> strSet58 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        boolean boolean62 = strSet58.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.util.Locale.setDefault(locale68);
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.lang.String str75 = locale73.getDisplayName(locale74);
        java.util.Set<java.lang.String> strSet76 = locale74.getUnicodeLocaleKeys();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale66, locale67, locale68, locale72, locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale locale82 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale83 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, strMap84);
        boolean boolean86 = strSet15.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream87 = languageRangeList85.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap88 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList89 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList85, strMap88);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream90 = languageRangeList85.parallelStream();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "82" + "'", str32, "82");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English (Canada)" + "'", str38, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "82" + "'", str50, "82");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English (Canada)" + "'", str70, "English (Canada)");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "English (Canada)" + "'", str75, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(locale82);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNotNull(languageRangeList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(languageRangeStream87);
        org.junit.Assert.assertNotNull(languageRangeList89);
        org.junit.Assert.assertNotNull(languageRangeStream90);
    }

    @Test
    public void test17362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17362");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(1738);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.secondOfMinute();
        int int15 = localDateTime4.getHourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test17363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17363");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder5 = builder3.setRegion("293");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("35388537", "1738-06-04T09:48:26.004");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 35388537 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test17364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17364");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = copticChronology18.add(readablePeriod20, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField24 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, (org.joda.time.Chronology) copticChronology18);
        int int28 = localDateTime27.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withCenturyOfEra(975);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology31.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusYears((int) (short) -1);
        int[] intArray43 = localDateTime42.getValues();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        int[] intArray54 = localDateTime53.getValues();
        copticChronology31.validate((org.joda.time.ReadablePartial) localDateTime45, intArray54);
        int int56 = localDateTime45.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.minusDays(782);
        boolean boolean59 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str61 = copticChronology60.toString();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        long long65 = copticChronology60.add(readablePeriod62, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField66 = copticChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology60.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology60.weekyear();
        org.joda.time.Chronology chronology69 = copticChronology60.withUTC();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime58, (org.joda.time.Chronology) copticChronology60);
        int int71 = localDateTime58.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime58.minusDays(816);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withMillisOfSecond(40);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusMonths(972);
        int int78 = localDateTime75.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime75.plus(readableDuration79);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 38 + "'", int28 == 38);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1737, 6, 4, 35588153]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1737, 6, 4, 35588153]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CopticChronology[UTC]" + "'", str61, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test17365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17365");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        long long3 = dateTimeZone1.convertUTCToLocal(0L);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        int[] intArray20 = localDateTime19.getValues();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        int int23 = localDateTime19.getMonthOfYear();
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime();
        int int25 = property10.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        long long27 = dateTime24.getMillis();
        int int28 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 432000000L + "'", long3 == 432000000L);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1737, 6, 4, 35588188]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1613001188188L + "'", long27 == 1613001188188L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 432000000 + "'", int28 == 432000000);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test17366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17366");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        java.lang.String str11 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField13 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfDay();
        org.joda.time.Chronology chronology15 = copticChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = copticChronology0.add(readablePeriod16, (long) 663, 383);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573188211L + "'", long9 == 1644573188211L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 663L + "'", long19 == 663L);
    }

    @Test
    public void test17367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17367");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        int int4 = dateTimeZone2.getOffsetFromLocal(0L);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        long long27 = dateTime25.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        int int39 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime37);
        int int40 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3780000 + "'", int4 == 3780000);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-7339421211775L) + "'", long27 == (-7339421211775L));
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3780000 + "'", int40 == 3780000);
    }

    @Test
    public void test17368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17368");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime51 = property5.addToCopy(13254413013L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMinuteOfHour(1838);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1838 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test17369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17369");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("533");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("1738-06-04T09:51:35.980");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1738-06-04T09:51:35.980 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test17370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17370");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology0.add(readablePeriod7, 1136091124375922418L, 100);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17371");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        int int9 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.centuryOfEra();
        int int11 = property10.getLeapAmount();
        boolean boolean12 = property10.isLeap();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37 + "'", int9 == 37);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17372");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("1737-06-04T09:50:09.245Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '1737-06-04T09:50:09.245Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17373");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "811");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("1737-06-04T09:44:32.923+10:00", "0042-06-04T09:47:08.078");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1737-06-04T09:44:32.923+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test17374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17374");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.era();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17375");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsText(locale10);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale10.getDisplayVariant(locale12);
        java.util.Locale locale17 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str18 = locale12.getDisplayName(locale17);
        java.util.Set<java.lang.String> strSet19 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale12.getDisplayScript();
        java.lang.String str21 = locale2.getDisplayLanguage(locale12);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int29 = localDateTime28.getDayOfMonth();
        int int30 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusWeeks(102);
        java.util.Locale locale35 = new java.util.Locale("GMT");
        java.lang.String str36 = localDateTime28.toString("+44:00", locale35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime28.dayOfWeek();
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder38.setExtension('x', "811");
        java.util.Locale.Builder builder42 = builder38.clear();
        java.util.Locale.Builder builder43 = builder38.clearExtensions();
        java.util.Locale.Builder builder44 = builder38.clear();
        java.util.Locale.Builder builder45 = builder44.clearExtensions();
        java.util.Locale.Builder builder47 = builder45.setRegion("947");
        java.util.Locale locale48 = builder47.build();
        java.lang.String str49 = property37.getAsShortText(locale48);
        java.lang.String str50 = locale12.getDisplayLanguage(locale48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        java.util.TimeZone timeZone55 = dateTimeZone52.toTimeZone();
        java.util.TimeZone timeZone56 = dateTimeZone52.toTimeZone();
        int int58 = dateTimeZone52.getOffset(0L);
        java.util.TimeZone timeZone59 = dateTimeZone52.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider61);
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str66 = nameProvider61.getName(locale63, "38", "493");
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale67.getScript();
        java.lang.String str70 = locale67.getExtension('a');
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.util.Locale locale72 = locale71.stripExtensions();
        java.lang.String str73 = locale67.getDisplayName(locale72);
        java.lang.String str76 = nameProvider61.getName(locale72, "239", "750");
        java.lang.String str77 = dateTimeZone52.getName(81844710L, locale72);
        java.lang.String str78 = locale48.getDisplayVariant(locale72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "313" + "'", str11, "313");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u6cd5\u6587" + "'", str21, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals(locale35.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+44:00" + "'", str36, "+44:00");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "_947");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Fri" + "'", str49, "Fri");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese" + "'", str50, "Chinese");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 36000000 + "'", int58 == 36000000);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str73, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test17376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17376");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = property18.getAsShortText(locale19);
        org.joda.time.Interval interval23 = property18.toInterval();
        org.joda.time.LocalDateTime localDateTime24 = property18.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(947);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "35588343" + "'", str22, "35588343");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test17377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17377");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17378");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DurationField durationField6 = copticChronology0.minutes();
        org.joda.time.DurationField durationField7 = copticChronology0.minutes();
        org.joda.time.DurationField durationField8 = copticChronology0.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17379");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology0.getZone();
        org.joda.time.DurationField durationField16 = copticChronology0.months();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17380");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = nameProvider0.getName(locale2, "38", "493");
        java.lang.String str6 = locale2.getDisplayName();
        java.lang.String str7 = locale2.getDisplayScript();
        java.lang.Object obj8 = locale2.clone();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "zh_TW");
    }

    @Test
    public void test17381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17381");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(607);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withHourOfDay(22);
        int int21 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfSecond(283);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology25 = localDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        int int28 = dateTimeZone26.getOffset(1644572672473L);
        java.lang.String str29 = dateTimeZone26.getID();
        long long31 = dateTimeZone1.getMillisKeepLocal(dateTimeZone26, 294377611L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusMillis(232);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusDays(250);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.607" + "'", str2, "+00:00:00.607");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 294378218L + "'", long31 == 294378218L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test17382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17382");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = copticChronology0.add(readablePeriod6, 1644572640069L, 575);
        org.joda.time.DurationField durationField10 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField14 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572640069L + "'", long9 == 1644572640069L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17383");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyearOfCentury();
        int int13 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17384");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.era();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField4, dateTimeZone5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.LimitChronology$LimitDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test17385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17385");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        java.lang.String str8 = property5.getAsText();
        java.lang.String str9 = property5.toString();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = locale18.getDisplayScript();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str23 = locale18.getDisplayScript();
        java.util.Locale.setDefault(category12, locale18);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = locale25.getDisplayCountry();
        java.lang.String str27 = locale18.getDisplayScript(locale25);
        java.lang.String str28 = locale11.getDisplayCountry(locale25);
        org.joda.time.LocalDateTime localDateTime29 = property5.setCopy("312", locale25);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.plusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths((int) (byte) 100);
        java.lang.String str48 = localDateTime47.toString();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.dayOfYear();
        java.util.Locale locale53 = new java.util.Locale("973", "1737-06-04T09:45:15.764+10:00");
        java.lang.String str54 = locale53.getScript();
        java.lang.String str55 = locale53.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime56 = property49.setCopy("154", locale53);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("1737-06-04T09:44:57.972+10:00");
        java.lang.String str59 = locale53.getDisplayVariant(locale58);
        java.lang.String str60 = locale25.getDisplayScript(locale58);
        java.lang.String str61 = locale25.getDisplayVariant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "475" + "'", str7, "475");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "475" + "'", str8, "475");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[millisOfSecond]" + "'", str9, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Taiwan" + "'", str26, "Taiwan");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1732-09-03T09:53:08.475" + "'", str48, "1732-09-03T09:53:08.475");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals(locale53.toString(), "973_1737-06-04T09:45:15.764+10:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test17386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17386");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.clockhourOfHalfday();
        java.lang.String str14 = copticChronology0.toString();
        org.joda.time.DurationField durationField15 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573188503L + "'", long9 == 1644573188503L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test17387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17387");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField7 = copticChronology0.centuries();
        org.joda.time.DurationField durationField8 = copticChronology0.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17388");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMillis(0);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDurationAdded(readableDuration23, 948);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsText(locale32);
        long long34 = property31.remainder();
        org.joda.time.LocalDateTime localDateTime35 = property31.roundHalfFloorCopy();
        int int36 = property31.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime37 = property31.withMaximumValue();
        int int38 = property31.get();
        org.joda.time.LocalDateTime localDateTime40 = property31.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(1644572654084L);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfDay(43);
        boolean boolean45 = localDateTime40.isEqual((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minus(readablePeriod46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property48.getFieldType();
        org.joda.time.LocalDateTime.Property property50 = localDateTime25.property(dateTimeFieldType49);
        int int51 = localDateTime25.getMinuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1738-06-04T00:00:00.100" + "'", str16, "1738-06-04T00:00:00.100");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "530" + "'", str33, "530");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 530 + "'", int38 == 530);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test17389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17389");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("GMT");
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setID("1738-06-04T09:44:49.900");
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology5.add(readablePeriod7, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField11 = copticChronology5.halfdays();
        org.joda.time.DurationField durationField12 = copticChronology5.millis();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = copticChronology5.add(readablePeriod13, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology19 = copticChronology5.withZone(dateTimeZone18);
        long long21 = dateTimeZone18.previousTransition((long) 103981);
        java.util.TimeZone timeZone22 = dateTimeZone18.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime27.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property43 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime.Property property44 = localDateTime27.minuteOfHour();
        int int45 = localDateTime27.getEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime27.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str49 = copticChronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology48.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withSecondOfMinute(43);
        int[] intArray59 = copticChronology48.get((org.joda.time.ReadablePartial) localDateTime57, (long) 43);
        copticChronology23.validate((org.joda.time.ReadablePartial) localDateTime27, intArray59);
        org.joda.time.DurationField durationField61 = copticChronology23.centuries();
        org.joda.time.DurationField durationField62 = copticChronology23.hours();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        java.util.TimeZone timeZone69 = dateTimeZone66.toTimeZone();
        long long71 = dateTimeZone66.nextTransition((-1L));
        long long73 = dateTimeZone64.getMillisKeepLocal(dateTimeZone66, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone66);
        int[] intArray77 = copticChronology23.get((org.joda.time.ReadablePartial) localDateTime75, 1644572736021L);
        java.util.Date date78 = localDateTime75.toDate();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime83 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.fromDateFields(date78);
        org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.fromDateFields(date78);
        boolean boolean88 = timeZone1.inDaylightTime(date78);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35L + "'", long16 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 103981L + "'", long21 == 103981L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "CopticChronology[UTC]" + "'", str49, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-35999031L) + "'", long73 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1738, 6, 9, 35136021]");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Fri Feb 11 19:44:44 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test17390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17390");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.LocalDateTime localDateTime12 = property8.addToCopy((long) 3);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime15.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str32 = copticChronology31.toString();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = copticChronology31.add(readablePeriod33, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField37 = copticChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime15, (org.joda.time.Chronology) copticChronology31);
        int int41 = localDateTime15.getHourOfDay();
        boolean boolean42 = property8.equals((java.lang.Object) int41);
        java.lang.String str43 = property8.getAsShortText();
        long long44 = property8.remainder();
        int int45 = property8.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1738" + "'", str10, "1738");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CopticChronology[UTC]" + "'", str32, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1738" + "'", str43, "1738");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 13081989000L + "'", long44 == 13081989000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-292269338) + "'", int45 == (-292269338));
    }

    @Test
    public void test17391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17391");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        boolean boolean21 = dateTimeZone18.isStandardOffset(10L);
        java.util.TimeZone timeZone22 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime15.toDateTime(dateTimeZone18);
        java.util.TimeZone timeZone24 = dateTimeZone18.toTimeZone();
        timeZone24.setRawOffset(931);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone.setDefault(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test17392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17392");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        int int11 = localDateTime7.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35588635]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test17393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17393");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.millisOfSecond();
        java.util.Locale locale28 = new java.util.Locale("974", "787", "485");
        java.lang.String str29 = locale28.getCountry();
        int int30 = property24.getMaximumShortTextLength(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = locale28.getUnicodeLocaleType("1738-06-04T09:43:43.700");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1738-06-04T09:43:43.700");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "974_787_485");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "787" + "'", str29, "787");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test17394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17394");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) 103981);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime22.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property38 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime22.minuteOfHour();
        int int40 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime22.minusHours(465);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str44 = copticChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withSecondOfMinute(43);
        int[] intArray54 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime52, (long) 43);
        copticChronology18.validate((org.joda.time.ReadablePartial) localDateTime22, intArray54);
        org.joda.time.DurationField durationField56 = copticChronology18.centuries();
        org.joda.time.DurationField durationField57 = copticChronology18.hours();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.TimeZone timeZone64 = dateTimeZone61.toTimeZone();
        long long66 = dateTimeZone61.nextTransition((-1L));
        long long68 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone61);
        int[] intArray72 = copticChronology18.get((org.joda.time.ReadablePartial) localDateTime70, 1644572736021L);
        java.util.Date date73 = localDateTime70.toDate();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.fromDateFields(date73);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays(724);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.minusYears(35109439);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minus(readablePeriod84);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 103981L + "'", long16 == 103981L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+<0:00");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CopticChronology[UTC]" + "'", str44, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-35999031L) + "'", long68 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1738, 6, 9, 35136021]");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Fri Feb 11 19:44:44 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test17395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17395");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        long long16 = dateTimeZone1.convertLocalToUTC(1644572657614L, true, (long) 446);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str19 = copticChronology18.toString();
        org.joda.time.DurationField durationField20 = copticChronology18.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        long long27 = copticChronology18.set((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DurationField durationField28 = copticChronology18.hours();
        org.joda.time.DurationField durationField29 = copticChronology18.centuries();
        boolean boolean30 = copticChronology17.equals((java.lang.Object) copticChronology18);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology17.era();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology17.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644536657614L + "'", long16 == 1644536657614L);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[UTC]" + "'", str19, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644573188724L + "'", long27 == 1644573188724L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test17396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17396");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        int int5 = localDateTime2.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withMillisOfDay(50);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str10 = copticChronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(1738);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        int int21 = localDateTime19.getMillisOfSecond();
        long long23 = copticChronology9.set((org.joda.time.ReadablePartial) localDateTime19, 0L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minusMillis(478);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.plusHours(107);
        int int28 = localDateTime19.getWeekyear();
        boolean boolean29 = property8.equals((java.lang.Object) localDateTime19);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime19.minusSeconds(965);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CopticChronology[UTC]" + "'", str10, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 742 + "'", int21 == 742);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1794736388742L + "'", long23 == 1794736388742L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1743 + "'", int28 == 1743);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test17397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17397");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale.setDefault(locale2);
        java.lang.String str8 = nameProvider0.getName(locale2, "1737-06-04T09:43:52.900+10:00", "\uc911\uad6d\uc5b4\uc911\uad6d)");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getDisplayVariant();
        java.util.Locale locale14 = new java.util.Locale("Greenwich Mean Time");
        java.lang.String str15 = locale9.getDisplayVariant(locale14);
        java.lang.String str18 = nameProvider0.getName(locale14, "572", "914");
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str20 = copticChronology19.toString();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = copticChronology19.add(readablePeriod21, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField25 = copticChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology19.monthOfYear();
        org.joda.time.DurationField durationField29 = copticChronology19.centuries();
        org.joda.time.DateTimeZone dateTimeZone30 = copticChronology19.getZone();
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale33 = null;
        java.lang.String str36 = nameProvider32.getShortName(locale33, "976", "493");
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale38.getDisplayCountry(locale41);
        java.lang.String str45 = nameProvider32.getShortName(locale38, "152", "878");
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime48.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime48.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property64 = localDateTime48.millisOfDay();
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = property64.getAsShortText(locale65);
        java.lang.String str71 = nameProvider32.getShortName(locale65, "chinois (Chine)", "38");
        java.lang.String str72 = dateTimeZone30.getName((long) 847, locale65);
        java.lang.String str73 = locale65.getDisplayVariant();
        java.lang.String str76 = nameProvider0.getName(locale65, "344", "1737-06-04T09:45:57.020+10:00");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "English (Canada)" + "'", str4, "English (Canada)");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CopticChronology[UTC]" + "'", str20, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(nameProvider32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Canada" + "'", str42, "Canada");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (Canada)" + "'", str67, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "35588761" + "'", str68, "35588761");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test17398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17398");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((long) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.secondOfMinute();
        int int19 = localDateTime14.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.dayOfYear();
        long long22 = copticChronology10.set((org.joda.time.ReadablePartial) localDateTime14, (long) 504);
        boolean boolean23 = dateTimeZone1.equals((java.lang.Object) localDateTime14);
        java.util.Locale locale27 = new java.util.Locale("February", "10");
        java.lang.String str28 = localDateTime14.toString("388", locale27);
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644573188791L + "'", long22 == 1644573188791L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale27.toString(), "february_10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "388" + "'", str28, "388");
        org.junit.Assert.assertNotNull(charSet29);
    }

    @Test
    public void test17399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17399");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getVariant();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.lang.String str13 = locale10.getDisplayScript();
        java.lang.String str14 = locale10.getDisplayVariant();
        java.lang.String str15 = locale10.getDisplayScript();
        java.util.Locale.setDefault(category4, locale10);
        java.lang.String str17 = locale0.getDisplayName(locale10);
        java.lang.String str18 = locale10.getScript();
        java.lang.String str19 = locale10.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "French (France)" + "'", str17, "French (France)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
    }

    @Test
    public void test17400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17400");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withEra(843);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 843 for era must be in the range [1,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test17401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17401");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withDayOfYear(191);
        org.joda.time.LocalDateTime.Property property21 = localDateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test17402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17402");
        java.util.Locale locale3 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        java.lang.String[] strArray13 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        boolean boolean17 = strSet14.equals((java.lang.Object) locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale3.getDisplayName(locale16);
        java.lang.String str21 = locale16.getDisplayVariant();
        java.util.Set<java.lang.String> strSet22 = locale16.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.parse("eng", strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList25, strMap26);
        java.lang.String[] strArray37 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        java.util.Locale locale40 = java.util.Locale.CANADA;
        boolean boolean41 = strSet38.equals((java.lang.Object) locale40);
        strSet38.clear();
        boolean boolean44 = strSet38.contains((java.lang.Object) "293");
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet38.spliterator();
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet38);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream47 = languageRangeList27.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream48 = languageRangeList27.parallelStream();
        boolean boolean49 = strSet22.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet22.spliterator();
        org.junit.Assert.assertEquals(locale3.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "354 (895,1737-06-04T09:44:06.658+10:00)" + "'", str20, "354 (895,1737-06-04T09:44:06.658+10:00)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeStream47);
        org.junit.Assert.assertNotNull(languageRangeStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSpliterator50);
    }

    @Test
    public void test17403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17403");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        long long6 = copticChronology0.add((long) (byte) -1, (long) 43, 1737);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = copticChronology0.get(readablePeriod11, 1644572860377L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 74690L + "'", long6 == 74690L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17404");
        java.util.Locale locale1 = new java.util.Locale("273");
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Language();
        java.lang.String str4 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "273");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "273" + "'", str3, "273");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test17405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17405");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.plus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime2.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(279);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test17406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17406");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("95");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone11 = provider0.getZone("Jan");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone11);
    }

    @Test
    public void test17407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17407");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(461, 201, 71674882, 35411769, 482);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35411769 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17408");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean4 = dateTimeZone1.isStandardOffset(10L);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = dateTimeZone1.getShortName((long) 14, locale6);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsText(locale14);
        org.joda.time.Interval interval16 = property13.toInterval();
        org.joda.time.LocalDateTime localDateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(10);
        int int20 = localDateTime19.getEra();
        boolean boolean21 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears((int) (short) -1);
        int[] intArray30 = localDateTime29.getValues();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.hourOfDay();
        boolean boolean32 = property31.isLeap();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.getLocalDateTime();
        boolean boolean41 = property31.equals((java.lang.Object) property39);
        org.joda.time.DurationField durationField42 = property39.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property39.getFieldType();
        boolean boolean44 = localDateTime19.isSupported(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime19.withMillisOfDay(684);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime19.plusYears(794);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime19.plusMonths(757);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "927" + "'", str15, "927");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1737, 6, 4, 35588928]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test17409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17409");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) 100);
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsText(locale16);
        java.lang.String str18 = property15.getAsText();
        java.lang.String str19 = property15.toString();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str22 = locale21.getDisplayScript();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy(580);
        org.joda.time.DurationField durationField26 = property15.getRangeDurationField();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.util.Locale.setDefault(locale28);
        java.util.Set<java.lang.Character> charSet32 = locale28.getExtensionKeys();
        java.util.Locale.setDefault(locale28);
        org.joda.time.LocalDateTime localDateTime34 = property15.setCopy("525", locale28);
        java.lang.String str35 = property5.getAsText(locale28);
        java.util.Set<java.lang.Character> charSet36 = locale28.getExtensionKeys();
        java.lang.String str37 = locale28.getISO3Country();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 999 + "'", int8 == 999);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "979" + "'", str17, "979");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "979" + "'", str18, "979");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[millisOfSecond]" + "'", str19, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (Canada)" + "'", str30, "English (Canada)");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "979" + "'", str35, "979");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CAN" + "'", str37, "CAN");
    }

    @Test
    public void test17410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17410");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField5 = copticChronology0.hours();
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test17411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17411");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField9 = copticChronology0.centuries();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds(93);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plus(readableDuration17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        int int20 = property19.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
    }

    @Test
    public void test17412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17412");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        int int11 = localDateTime7.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusHours(0);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        boolean boolean36 = localDateTime30.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        int int40 = localDateTime7.indexOf(dateTimeFieldType39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime7.minusWeeks(873);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1737, 6, 4, 35589029]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test17413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17413");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology0.add(readablePeriod8, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.hourOfDay();
        long long20 = copticChronology0.add(1661557319911L, 1644572828211L, 2022);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3326987815962553L + "'", long20 == 3326987815962553L);
    }

    @Test
    public void test17414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17414");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int int21 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusMonths(1636);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundFloorCopy();
        org.joda.time.DurationField durationField28 = property24.getLeapDurationField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test17415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17415");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology11);
        boolean boolean14 = copticChronology0.equals((java.lang.Object) localDateTime13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.centuryOfEra();
        org.joda.time.Chronology chronology16 = copticChronology0.withUTC();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.minuteOfHour();
        int int26 = localDateTime22.getYearOfCentury();
        int int27 = localDateTime22.getYear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.centuryOfEra();
        boolean boolean29 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime22.monthOfYear();
        int int31 = property30.getMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573189081L + "'", long9 == 1644573189081L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 38 + "'", int26 == 38);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1738 + "'", int27 == 1738);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test17416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17416");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.Chronology chronology14 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField19 = copticChronology0.weeks();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573189097L + "'", long9 == 1644573189097L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test17417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17417");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str8 = copticChronology7.toString();
        org.joda.time.DurationField durationField9 = copticChronology7.millis();
        org.joda.time.DurationField durationField10 = copticChronology7.minutes();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.monthOfYear();
        org.joda.time.DurationField durationField12 = copticChronology7.centuries();
        boolean boolean13 = strSet6.remove((java.lang.Object) copticChronology7);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology7.yearOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese (China)" + "'", str2, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinese (China)" + "'", str5, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17418");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getDisplayVariant();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str16 = locale11.getDisplayName(locale15);
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale20 = locale18.stripExtensions();
        java.util.Locale.setDefault(category10, locale18);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale23.getLanguage();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.lang.String str29 = locale26.getDisplayScript();
        java.lang.String str30 = locale23.getDisplayVariant(locale26);
        java.lang.String str31 = locale22.getDisplayVariant(locale26);
        java.util.Locale.setDefault(category10, locale26);
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider33);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = nameProvider33.getName(locale35, "38", "493");
        java.util.Locale.setDefault(category10, locale35);
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setExtension('x', "811");
        java.util.Locale.Builder builder45 = builder40.setRegion("301");
        java.util.Locale locale46 = builder40.build();
        java.util.Locale.setDefault(category10, locale46);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getDisplayName();
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str54 = locale49.getDisplayName(locale53);
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale56 = java.util.Locale.getDefault(category48);
        java.lang.String str57 = locale56.getVariant();
        java.lang.String str58 = locale56.getVariant();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale.Category category60 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        boolean boolean62 = locale61.hasExtensions();
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category60, locale61);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.lang.String str69 = locale66.getDisplayScript();
        java.lang.String str70 = locale66.getDisplayVariant();
        java.lang.String str71 = locale66.getDisplayScript();
        java.util.Locale.setDefault(category60, locale66);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str74 = locale73.getDisplayCountry();
        java.lang.String str75 = locale66.getDisplayScript(locale73);
        java.lang.String str76 = locale59.getDisplayCountry(locale73);
        java.lang.String str77 = locale56.getDisplayScript(locale59);
        java.util.Locale.setDefault(category10, locale59);
        java.util.Locale locale79 = java.util.Locale.getDefault(category10);
        java.util.Locale.Builder builder80 = builder3.setLocale(locale79);
        java.lang.String str81 = locale79.getScript();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (China)" + "'", str13, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese (China)" + "'", str16, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en" + "'", str24, "en");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "_301_#x-811");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (China)" + "'", str51, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (China)" + "'", str54, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category60 + "' != '" + java.util.Locale.Category.FORMAT + "'", category60.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (Canada)" + "'", str67, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Taiwan" + "'", str74, "Taiwan");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test17419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17419");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Country();
        int int6 = property2.getMaximumTextLength(locale3);
        org.joda.time.Interval interval7 = property2.toInterval();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        boolean boolean28 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        boolean boolean49 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = dateTime17.getChronology();
        int int52 = property2.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale54.getDisplayName();
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str59 = locale54.getDisplayName(locale58);
        java.util.Locale.setDefault(category53, locale54);
        java.util.Set<java.lang.Character> charSet61 = locale54.getExtensionKeys();
        java.lang.String str62 = property2.getAsText(locale54);
        int int63 = property2.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime64 = property2.getLocalDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2038738 + "'", int52 == 2038738);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (China)" + "'", str56, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (China)" + "'", str59, "Chinese (China)");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "10" + "'", str62, "10");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test17420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17420");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder9 = builder4.setRegion("357");
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("Fri");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.removeUnicodeLocaleAttribute("35534005");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test17421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17421");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withSecondOfMinute(43);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withHourOfDay(22);
        int int18 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekyear(35468554);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test17422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17422");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0, 35040197);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 35040197");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17423");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = copticChronology0.hours();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology0.era();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573189253L + "'", long9 == 1644573189253L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17424");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField11 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = copticChronology0.getDateTimeMillis(1644572962808L, 53, 554, 423, 563);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17425");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale4.getISO3Language();
        boolean boolean6 = copticChronology0.equals((java.lang.Object) locale4);
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField8 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusYears(2993);
        long long20 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime18, (long) 441);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusHours(185);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jpn" + "'", str5, "jpn");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 103404592800010L + "'", long20 == 103404592800010L);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test17426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17426");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int2 = localDateTime1.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays(687);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths(997);
        org.joda.time.ReadablePartial readablePartial8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localDateTime7.compareTo(readablePartial8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test17427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17427");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        int int18 = localDateTime15.getWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology19.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        int[] intArray31 = localDateTime30.getValues();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusDays(4);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusYears((int) (short) -1);
        int[] intArray42 = localDateTime41.getValues();
        copticChronology19.validate((org.joda.time.ReadablePartial) localDateTime33, intArray42);
        int int44 = localDateTime33.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime33.minusDays(782);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(49);
        int int49 = localDateTime46.getYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property51 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime localDateTime53 = property51.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1738 + "'", int18 == 1738);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1737, 6, 4, 35589354]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1737, 6, 4, 35589354]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1735 + "'", int49 == 1735);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test17428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17428");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17429");
        java.util.Locale locale3 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsText(locale10);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale10.getDisplayVariant(locale12);
        java.util.Locale locale17 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str18 = locale12.getDisplayName(locale17);
        java.lang.String str19 = locale17.getCountry();
        java.lang.String str20 = locale3.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = locale22.getDisplayScript();
        java.lang.String str26 = locale22.getDisplayVariant();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale22.getDisplayScript(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale locale30 = locale27.stripExtensions();
        java.lang.String str31 = locale3.getDisplayLanguage(locale27);
        java.lang.String str32 = locale3.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = locale3.getUnicodeLocaleType("italien");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: italien");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "394" + "'", str11, "394");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "539" + "'", str19, "539");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English (Canada)" + "'", str23, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "354" + "'", str31, "354");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "895" + "'", str32, "895");
    }

    @Test
    public void test17430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17430");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = copticChronology0.eras();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        int int7 = localDateTime6.getYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1738 + "'", int7 == 1738);
    }

    @Test
    public void test17431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17431");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMonths((int) (byte) 0);
        java.lang.String str11 = localDateTime4.toString("527");
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.minus(readableDuration12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, 76);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withYear(550);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "527" + "'", str11, "527");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17432");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(607);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1644572736021L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone2);
        long long8 = dateTimeZone2.adjustOffset(602L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.607" + "'", str3, "+00:00:00.607");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 602L + "'", long8 == 602L);
    }

    @Test
    public void test17433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17433");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.Chronology chronology3 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField4 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.year();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17434");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.nextTransition((-1L));
        long long9 = dateTimeZone1.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.yearOfEra();
        int int13 = property12.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-35999999L) + "'", long9 == (-35999999L));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test17435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17435");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        java.util.Locale locale51 = new java.util.Locale("Greenwich Mean Time");
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str56 = locale53.getDisplayScript();
        java.lang.String str57 = locale53.getDisplayVariant();
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.lang.String str59 = locale53.getDisplayScript(locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale51.getDisplayLanguage(locale58);
        java.lang.String str62 = locale51.getDisplayLanguage();
        java.lang.String str63 = property5.getAsShortText(locale51);
        org.joda.time.LocalDateTime localDateTime65 = property5.addToCopy(1644572676838L);
        org.joda.time.LocalDateTime localDateTime66 = property5.roundCeilingCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals(locale51.toString(), "greenwich mean time");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (Canada)" + "'", str54, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "greenwich mean time" + "'", str61, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "greenwich mean time" + "'", str62, "greenwich mean time");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "469" + "'", str63, "469");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test17436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17436");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(108);
        int int3 = dateTimeZone1.getStandardOffset(1644572940565L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1, 718);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 718");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 108 + "'", int3 == 108);
    }

    @Test
    public void test17437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17437");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfDay();
        int int17 = property16.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test17438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17438");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDayOfYear(100);
        boolean boolean28 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        int int29 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime14.yearOfEra();
        java.lang.String str31 = property30.getAsText();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573189534L + "'", long9 == 1644573189534L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1738" + "'", str31, "1738");
    }

    @Test
    public void test17439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17439");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        long long5 = copticChronology0.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        long long10 = dateTimeZone6.convertLocalToUTC((long) (-292275054), true);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str12 = localDateTime11.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1136091124375922418L + "'", long5 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292275054L) + "'", long10 == (-292275054L));
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:53:09.554" + "'", str12, "2022-02-11T09:53:09.554");
    }

    @Test
    public void test17440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17440");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.millis();
        org.joda.time.DurationField durationField3 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17441");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        int int8 = localDateTime7.size();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test17442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17442");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusHours(760);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        java.lang.String str4 = property3.getName();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfSecond();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsText(locale11);
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale11.getDisplayVariant(locale13);
        java.util.Locale locale18 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str19 = locale13.getDisplayName(locale18);
        java.util.Set<java.lang.String> strSet20 = locale13.getUnicodeLocaleAttributes();
        int int21 = property3.getMaximumShortTextLength(locale13);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology23.hourOfDay();
        long long32 = copticChronology23.add(1644572624553L, (long) 443, 812);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(1644572627999L, (org.joda.time.Chronology) copticChronology23);
        int int34 = localDateTime33.getMonthOfYear();
        int int35 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DurationField durationField36 = property3.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "millisOfDay" + "'", str4, "millisOfDay");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "611" + "'", str12, "611");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale18.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644572984269L + "'", long32 == 1644572984269L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test17443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17443");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.lang.String str5 = locale0.getISO3Language();
        java.lang.String str6 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale0.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test17444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17444");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str3 = dateTimeZone2.getID();
        long long6 = dateTimeZone2.adjustOffset((long) 'x', true);
        java.lang.String str8 = dateTimeZone2.getShortName((long) 416);
        java.lang.String str9 = dateTimeZone2.toString();
        long long11 = dateTimeZone2.convertUTCToLocal((long) 3);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(10597179760623L, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        int int14 = localDateTime12.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 120L + "'", long6 == 120L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000003L + "'", long11 == 36000003L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 82960623 + "'", int14 == 82960623);
    }

    @Test
    public void test17445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17445");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(416);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withMillisOfSecond(750);
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17446");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str2 = copticChronology1.toString();
        org.joda.time.DurationField durationField3 = copticChronology1.millis();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(3);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears((int) (short) -1);
        int[] intArray25 = localDateTime24.getValues();
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime16, intArray25);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology1.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) 1644572741275L, (org.joda.time.Chronology) copticChronology1);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CopticChronology[UTC]" + "'", str2, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1737, 6, 4, 35589665]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test17447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17447");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        int int2 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField3 = copticChronology0.days();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = copticChronology0.get(readablePeriod7, 1644572807674L, 1644572869197L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17448");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay((int) '#');
        boolean boolean15 = dateTimeZone4.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone4);
        long long18 = dateTimeZone4.previousTransition(1644572610881L);
        long long21 = dateTimeZone4.convertLocalToUTC((long) (short) 1, true);
        java.util.TimeZone timeZone22 = dateTimeZone4.toTimeZone();
        java.util.TimeZone.setDefault(timeZone22);
        boolean boolean24 = timeZone1.hasSameRules(timeZone22);
        java.time.ZoneId zoneId25 = timeZone1.toZoneId();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone(zoneId25);
        java.time.ZoneId zoneId27 = timeZone26.toZoneId();
        int int28 = timeZone26.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572610881L + "'", long18 == 1644572610881L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35999999L) + "'", long21 == (-35999999L));
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test17449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17449");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1644572672261L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(562);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        int int8 = localDateTime6.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
    }

    @Test
    public void test17450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17450");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus(readablePeriod18);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.yearOfEra();
        java.lang.String str22 = localDateTime19.toString();
        int int23 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.withCenturyOfEra(577);
        org.joda.time.LocalDateTime.Property property28 = localDateTime19.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 731 + "'", int20 == 731);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1738-06-04T09:53:09.731" + "'", str22, "1738-06-04T09:53:09.731");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1738 + "'", int23 == 1738);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17451");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        boolean boolean43 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        boolean boolean64 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int66 = property22.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int67 = property16.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.hourOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDateTime75.toDateTime(readableInstant76);
        org.joda.time.chrono.CopticChronology copticChronology78 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = copticChronology78.dayOfYear();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.hourOfDay();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime80.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime(readableInstant86);
        boolean boolean88 = dateTime77.isEqual((org.joda.time.ReadableInstant) dateTime87);
        java.lang.String str89 = dateTime87.toString();
        long long90 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime87);
        int int91 = property16.getMaximumValueOverall();
        org.joda.time.DurationField durationField92 = property16.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime94 = property16.addToCopy(402);
        int int95 = localDateTime94.getYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 103981 + "'", int67 == 103981);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(copticChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1737-06-04T09:53:09.747+10:00" + "'", str89, "1737-06-04T09:53:09.747+10:00");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 103981L + "'", long90 == 103981L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 30 + "'", int91 == 30);
        org.junit.Assert.assertNull(durationField92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1739 + "'", int95 == 1739);
    }

    @Test
    public void test17452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17452");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy((long) 100);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        int int9 = property5.getMaximumShortTextLength(locale8);
        int int10 = property5.getMinimumValueOverall();
        java.lang.String str11 = property5.toString();
        java.lang.Object obj12 = null;
        boolean boolean13 = property5.equals(obj12);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfCentury();
        int int25 = localDateTime21.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusYears(700);
        int int28 = localDateTime27.size();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.centuryOfEra();
        int int30 = localDateTime27.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.minusMonths(876);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withMillisOfDay(508);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str38 = dateTimeZone37.getID();
        boolean boolean40 = dateTimeZone37.isStandardOffset(10L);
        java.lang.String str41 = dateTimeZone37.getID();
        java.lang.String str43 = dateTimeZone37.getName((long) 978);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleAttributes();
        java.util.Locale locale50 = new java.util.Locale("889", "4", "580");
        java.lang.String str51 = locale44.getDisplayScript(locale50);
        boolean boolean52 = dateTimeZone37.equals((java.lang.Object) locale44);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.hourOfDay();
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getISO3Country();
        int int61 = property57.getMaximumTextLength(locale58);
        java.util.Locale locale64 = new java.util.Locale("1737-06-03T23:43:36.994Z", "German (Germany)");
        java.lang.String str65 = property57.getAsText(locale64);
        java.lang.String str66 = dateTimeZone37.getName(1644572751543L, locale64);
        java.lang.String str67 = locale64.getCountry();
        java.lang.String str68 = localDateTime34.toString("508", locale64);
        java.lang.String str69 = property5.getAsShortText(locale64);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[millisOfSecond]" + "'", str11, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53 + "'", int30 == 53);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals(locale50.toString(), "889_4_580");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals(locale64.toString(), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "10" + "'", str65, "10");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+10:00" + "'", str66, "+10:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "GERMAN (GERMANY)" + "'", str67, "GERMAN (GERMANY)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "508" + "'", str68, "508");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "788" + "'", str69, "788");
    }

    @Test
    public void test17453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17453");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfMonth();
        int int17 = property16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property16.addToCopy(28);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        int int22 = localDateTime21.getDayOfMonth();
        int int23 = localDateTime21.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26 + "'", int23 == 26);
    }

    @Test
    public void test17454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17454");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder4.setExtension('u', "35026152");
        java.util.Locale.Builder builder13 = builder10.setExtension('a', "196");
        java.util.Locale.Builder builder15 = builder10.setLanguage("UTC");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale.Builder builder20 = builder15.setUnicodeLocaleKeyword("69", "576");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder15.addUnicodeLocaleAttribute("0638-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0638-01-01T00:00:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test17455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17455");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "977", "FR");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str8 = nameProvider0.getShortName(locale5, "406", "1737-06-04T10:00:00.000");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str14 = nameProvider0.getShortName(locale10, "311", "China");
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        boolean boolean26 = dateTimeZone23.isStandardOffset(10L);
        java.lang.String str28 = dateTimeZone23.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) 100);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        int int40 = property36.getMaximumShortTextLength(locale39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime43.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime43.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property59 = localDateTime43.millisOfDay();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = property59.getAsShortText(locale60);
        java.lang.String str64 = locale60.getDisplayVariant();
        java.lang.String str65 = property36.getAsShortText(locale60);
        java.lang.String str66 = property30.getAsText(locale60);
        java.lang.String str67 = locale21.getDisplayName(locale60);
        java.lang.String str68 = locale60.getDisplayVariant();
        java.util.Locale.setDefault(category15, locale60);
        java.lang.String str72 = nameProvider0.getName(locale60, "+01:03", "259");
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField75 = copticChronology74.dayOfYear();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.millisOfSecond();
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        java.lang.String str81 = property79.getAsText(locale80);
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.util.Locale locale83 = java.util.Locale.CANADA;
        java.lang.String str84 = locale82.getDisplayName(locale83);
        java.util.Set<java.lang.String> strSet85 = locale83.getUnicodeLocaleKeys();
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.lang.String str87 = locale83.getDisplayCountry(locale86);
        java.lang.String str88 = locale80.getDisplayName(locale83);
        java.lang.String str89 = locale80.getDisplayName();
        java.lang.String str90 = locale73.getDisplayName(locale80);
        java.util.Locale locale91 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str92 = locale91.getISO3Language();
        java.lang.String str93 = locale73.getDisplayScript(locale91);
        java.lang.String str96 = nameProvider0.getShortName(locale73, "1732-09-03T09:43:33.649", "1737-06-04T09:43:56.410+10:00");
        boolean boolean97 = locale73.hasExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English (Canada)" + "'", str62, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "35589846" + "'", str63, "35589846");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "846" + "'", str65, "846");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "February" + "'", str66, "February");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "French" + "'", str67, "French");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "846" + "'", str81, "846");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "English (Canada)" + "'", str84, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Canada" + "'", str87, "Canada");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "English" + "'", str88, "English");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "English" + "'", str89, "English");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Italian" + "'", str90, "Italian");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fra" + "'", str92, "fra");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test17456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17456");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 28);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.Chronology chronology23 = copticChronology0.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.hourOfDay();
        org.joda.time.DurationField durationField26 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField27 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test17457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17457");
        java.util.Locale locale2 = new java.util.Locale("335", "20");
        java.lang.String str3 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "335_20");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "335_20" + "'", str3, "335_20");
    }

    @Test
    public void test17458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17458");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears(416);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        java.lang.String str11 = localDateTime7.toString("760");
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus(readableDuration12);
        java.lang.String str14 = localDateTime13.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "760" + "'", str11, "760");
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1322-06-04T09:53:09.954" + "'", str14, "1322-06-04T09:53:09.954");
    }

    @Test
    public void test17459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17459");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        boolean boolean26 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int49 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime50 = property5.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfDay(10);
        int int67 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = localDateTime66.getFields();
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = property69.setCopy(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test17460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17460");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withDayOfWeek(511);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 511 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573189994L + "'", long9 == 1644573189994L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test17461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17461");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
    }

    @Test
    public void test17462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17462");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology0.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getShortName((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone14);
        boolean boolean20 = dateTimeZone14.isFixed();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.Chronology chronology22 = copticChronology0.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField24 = copticChronology0.weekyears();
        org.joda.time.DateTimeZone dateTimeZone25 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test17463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17463");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.Chronology chronology9 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField10 = copticChronology0.months();
        int int11 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField13 = copticChronology0.centuries();
        java.lang.String str14 = copticChronology0.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
    }

    @Test
    public void test17464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17464");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(514);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1644572673513L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology5.add(readablePeriod7, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField11 = copticChronology5.halfdays();
        org.joda.time.DurationField durationField12 = copticChronology5.millis();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = copticChronology5.add(readablePeriod13, (long) '#', 43);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.Chronology chronology19 = copticChronology5.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology19.getZone();
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone21, 1644573124173L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35L + "'", long16 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644141124687L + "'", long23 == 1644141124687L);
    }

    @Test
    public void test17465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17465");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getDisplayLanguage();
        boolean boolean3 = locale0.hasExtensions();
        java.lang.String str4 = locale0.getDisplayCountry();
        boolean boolean5 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test17466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17466");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        timeZone1.setRawOffset(154);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("106");
        timeZone8.setRawOffset((-1));
        timeZone8.setRawOffset(207);
        timeZone8.setID("654");
        timeZone8.setRawOffset(713);
        boolean boolean17 = timeZone1.hasSameRules(timeZone8);
        int int18 = timeZone1.getRawOffset();
        int int20 = timeZone1.getOffset(1644608611311L);
        int int21 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 154 + "'", int18 == 154);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 154 + "'", int20 == 154);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17467");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.era();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField9 = copticChronology8.hours();
        int int10 = copticChronology8.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.minuteOfHour();
        org.joda.time.DurationField durationField13 = copticChronology8.days();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str16 = dateTimeZone15.getID();
        boolean boolean18 = dateTimeZone15.isStandardOffset(10L);
        org.joda.time.Chronology chronology19 = copticChronology8.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        long long28 = dateTimeZone23.nextTransition((-1L));
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone23, (long) 969);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1644572684494L, dateTimeZone23);
        org.joda.time.Chronology chronology33 = copticChronology8.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology34 = copticChronology0.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField36 = copticChronology0.weeks();
        org.joda.time.DurationField durationField37 = copticChronology0.weekyears();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[UTC]" + "'", str3, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999031L) + "'", long30 == (-35999031L));
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test17468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17468");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusDays(63);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17469");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        int int8 = localDateTime4.getYearOfCentury();
        int int9 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.centuryOfEra();
        int int11 = property10.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("771");
        int int14 = property10.getMinimumValue();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfSecond();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale21.getDisplayVariant(locale23);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime28.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime28.getFieldTypes();
        int int43 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.hourOfDay();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale48.getISO3Country();
        int int51 = property47.getMaximumTextLength(locale48);
        java.lang.String str52 = localDateTime28.toString("293", locale48);
        java.lang.String str53 = locale48.getScript();
        java.lang.String str54 = locale23.getDisplayName(locale48);
        boolean boolean55 = locale48.hasExtensions();
        java.lang.String str56 = property10.getAsShortText(locale48);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 38 + "'", int8 == 38);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1738 + "'", int9 == 1738);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2922728 + "'", int11 == 2922728);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "121" + "'", str22, "121");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "293" + "'", str52, "293");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str54, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "18" + "'", str56, "18");
    }

    @Test
    public void test17470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17470");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.weekOfWeekyear();
        long long18 = copticChronology0.add(1644572694741L, (long) 766, 35150906);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.plusSeconds((int) 'x');
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime49);
        int int52 = localDateTime49.getWeekOfWeekyear();
        int[] intArray54 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime49, (long) 375);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.withDurationAdded(readableDuration55, 0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1671498288737L + "'", long18 == 1671498288737L);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1686, 4, 23, 375]");
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test17471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17471");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weeks();
        long long6 = copticChronology0.add((long) (byte) -1, (long) 43, 1737);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField10 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.year();
        org.joda.time.DurationField durationField12 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 74690L + "'", long6 == 74690L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test17472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17472");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "709");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getDisplayVariant();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.addUnicodeLocaleAttribute("694");
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder17 = builder12.setLocale(locale14);
        java.util.Locale locale18 = builder12.build();
        java.util.Locale locale19 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder12.setLanguage("1738-06-04T09:45:06.656+120:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1738-06-04T09:45:06.656+120:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
    }

    @Test
    public void test17473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17473");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(28);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis(35235731);
        int int20 = localDateTime19.getDayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573190190L + "'", long9 == 1644573190190L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test17474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17474");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "160", "Greenwich Mean Time", "106", "Greenwich Mean Time", "CopticChronology[UTC]", "CopticChronology[UTC]" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        boolean boolean40 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int63 = property19.compareTo((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean64 = strSet12.remove((java.lang.Object) property19);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        boolean boolean70 = strSet66.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet71);
        boolean boolean73 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream74 = languageRangeList68.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, strMap75);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList76, strMap77);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(copticChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(languageRangeStream74);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNotNull(languageRangeList78);
    }

    @Test
    public void test17475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17475");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.era();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.parse("46");
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        int[] intArray15 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime12, 1644572657090L);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1738, 6, 4, 35057090]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test17476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17476");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundFloorCopy();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str11 = copticChronology10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = copticChronology10.add(readablePeriod12, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField16 = copticChronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology10.secondOfDay();
        boolean boolean19 = localDateTime9.equals((java.lang.Object) dateTimeField18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.millisOfSecond();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = property27.getAsText(locale28);
        long long30 = property27.remainder();
        org.joda.time.LocalDateTime localDateTime31 = property27.roundHalfFloorCopy();
        int int32 = property27.getMinimumValue();
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsText(locale39);
        long long41 = property38.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withDayOfYear((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minus(readableDuration45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.year();
        int int48 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.minusMinutes(837);
        int int52 = localDateTime21.getWeekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "261" + "'", str7, "261");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CopticChronology[UTC]" + "'", str11, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "261" + "'", str29, "261");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "261" + "'", str40, "261");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1737 + "'", int52 == 1737);
    }

    @Test
    public void test17477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17477");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test17478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17478");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("eng", strMap4);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        boolean boolean10 = strSet6.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strList12, filteringMode13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("eng", strMap18);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream20 = languageRangeList19.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("eng", strMap22);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getISO3Language();
        java.util.Locale locale43 = java.util.Locale.CANADA;
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfSecond();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = property49.getAsText(locale50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale24, locale25, locale32, locale34, locale35, locale36, locale38, locale41, locale43, locale50, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale locale59 = java.util.Locale.lookup(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Locale locale62 = new java.util.Locale("Greenwich Mean Time");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet63);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream65 = languageRangeList2.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + filteringMode13 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode13.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeStream20);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "296" + "'", str33, "296");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "296" + "'", str51, "296");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertEquals(locale62.toString(), "greenwich mean time");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeStream65);
    }

    @Test
    public void test17479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17479");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.Chronology chronology11 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField13 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.yearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField17 = copticChronology16.hours();
        int int18 = copticChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.TimeZone timeZone23 = dateTimeZone20.toTimeZone();
        org.joda.time.Chronology chronology24 = copticChronology16.withZone(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone20.isLocalDateTimeGap(localDateTime25);
        int int28 = dateTimeZone20.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.Chronology chronology30 = copticChronology0.withZone(dateTimeZone20);
        java.util.TimeZone timeZone31 = dateTimeZone20.toTimeZone();
        java.lang.String str32 = timeZone31.getID();
        java.util.TimeZone.setDefault(timeZone31);
        int int35 = timeZone31.getOffset(5431484980444L);
        int int36 = timeZone31.getDSTSavings();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GMT+10:00" + "'", str32, "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test17480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17480");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        int int2 = localDateTime1.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays(687);
        java.lang.String str6 = localDateTime4.toString("129");
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(71493683);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "129" + "'", str6, "129");
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test17481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17481");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        int int9 = localDateTime7.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readablePeriod10);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DurationField durationField14 = copticChronology13.hours();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(1644572627999L, (org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusSeconds(758);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37 + "'", int9 == 37);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test17482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17482");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Italy", 0.0d);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "italy" + "'", str3, "italy");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "italy" + "'", str4, "italy");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test17483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17483");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("978");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test17484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17484");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getLanguage();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getDisplayScript();
        java.lang.String str20 = locale13.getDisplayVariant(locale16);
        java.lang.String str21 = locale12.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        java.lang.String str25 = locale24.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test17485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17485");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(43);
        int[] intArray11 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime9, (long) 43);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.weekOfWeekyear();
        long long18 = copticChronology0.add((-7339421759399L), 1644572670861L, 38);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 55154339733319L + "'", long18 == 55154339733319L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test17486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17486");
        java.lang.String[] strArray9 = new java.lang.String[] { "160", "+10:00", "Greenwich Mean Time", "106", "171", "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", "Greenwich Mean Time", "en_CA", "106" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        boolean boolean13 = strSet10.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getISO3Language();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfSecond();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale21.getDisplayVariant(locale23);
        java.lang.String str26 = locale21.getDisplayVariant();
        java.lang.String str27 = locale21.getLanguage();
        java.lang.String str28 = locale12.getDisplayName(locale21);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        java.util.TimeZone timeZone33 = dateTimeZone30.toTimeZone();
        long long35 = dateTimeZone30.nextTransition((-1L));
        long long38 = dateTimeZone30.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfMonth();
        org.joda.time.DurationField durationField41 = property40.getDurationField();
        org.joda.time.LocalDateTime localDateTime42 = property40.withMinimumValue();
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusYears((int) (short) -1);
        int[] intArray51 = localDateTime50.getValues();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.hourOfDay();
        boolean boolean53 = property52.isLeap();
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder54.setExtension('x', "709");
        java.util.Locale.Builder builder58 = builder57.clear();
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("Greenwich Mean Time");
        java.util.Locale.Builder builder61 = builder58.setLocale(locale60);
        java.util.Locale.Builder builder64 = builder58.setExtension('u', "35026152");
        java.util.Locale locale65 = builder64.build();
        java.lang.String str66 = property52.getAsText(locale65);
        java.lang.String str67 = locale65.getCountry();
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = locale65.getDisplayLanguage();
        java.lang.String str70 = locale65.getLanguage();
        int int71 = property40.getMaximumShortTextLength(locale65);
        java.lang.String str72 = locale12.getDisplayScript(locale65);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "424" + "'", str22, "424");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-35999999L) + "'", long38 == (-35999999L));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1737, 6, 4, 35590424]");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "9" + "'", str66, "9");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "und-u-35026152" + "'", str68, "und-u-35026152");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test17487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17487");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        long long10 = copticChronology5.add(1136020407753600097L, 1644572612147L, 43);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) copticChronology5);
        boolean boolean14 = dateTimeZone1.isStandardOffset(1644572616432L);
        java.lang.String str16 = dateTimeZone1.getNameKey((long) 812);
        long long20 = dateTimeZone1.convertLocalToUTC(1644572755278L, true, 1794735961454L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str23 = dateTimeZone22.getID();
        boolean boolean25 = dateTimeZone22.isStandardOffset(10L);
        java.lang.String str26 = dateTimeZone22.getID();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str28 = dateTimeZone22.toString();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.hourOfDay();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getISO3Country();
        int int36 = property32.getMaximumTextLength(locale33);
        java.util.Locale locale39 = new java.util.Locale("1737-06-03T23:43:36.994Z", "German (Germany)");
        java.lang.String str40 = property32.getAsText(locale39);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder41.setExtension('x', "709");
        java.util.Locale locale45 = builder44.build();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.millisOfSecond();
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.lang.String str53 = property51.getAsText(locale52);
        java.lang.String str54 = locale45.getDisplayVariant(locale52);
        java.lang.String str55 = locale39.getDisplayLanguage(locale52);
        java.util.Locale locale59 = new java.util.Locale("354", "895", "1737-06-04T09:44:06.658+10:00");
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.millisOfSecond();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = property65.getAsText(locale66);
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str70 = locale66.getDisplayVariant(locale68);
        java.util.Locale locale73 = new java.util.Locale("1738-06-04T09:43:28.618", "539");
        java.lang.String str74 = locale68.getDisplayName(locale73);
        java.lang.String str75 = locale73.getCountry();
        java.lang.String str76 = locale59.getDisplayScript(locale73);
        java.lang.String str77 = locale39.getDisplayLanguage(locale73);
        java.lang.String str78 = dateTimeZone22.getName(1644572732446L, locale39);
        boolean boolean79 = dateTimeZone1.equals((java.lang.Object) str78);
        java.lang.String str80 = dateTimeZone1.toString();
        java.lang.String str81 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1136091124375922418L + "'", long10 == 1136091124375922418L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644536755278L + "'", long20 == 1644536755278L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals(locale39.toString(), "1737-06-03t23:43:36.994z_GERMAN (GERMANY)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "10" + "'", str40, "10");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "453" + "'", str53, "453");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1737-06-03t23:43:36.994z" + "'", str55, "1737-06-03t23:43:36.994z");
        org.junit.Assert.assertEquals(locale59.toString(), "354_895_1737-06-04T09:44:06.658+10:00");
        org.junit.Assert.assertNotNull(copticChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "453" + "'", str67, "453");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals(locale73.toString(), "1738-06-04t09:43:28.618_539");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Chinese (China)" + "'", str74, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "539" + "'", str75, "539");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1737-06-03t23:43:36.994z" + "'", str77, "1737-06-03t23:43:36.994z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+10:00" + "'", str80, "+10:00");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+10:00" + "'", str81, "+10:00");
    }

    @Test
    public void test17488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17488");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffset(0L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = nameProvider10.getName(locale12, "38", "493");
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.getScript();
        java.lang.String str19 = locale16.getExtension('a');
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale16.getDisplayName(locale21);
        java.lang.String str25 = nameProvider10.getName(locale21, "239", "750");
        java.lang.String str26 = dateTimeZone1.getName(81844710L, locale21);
        java.lang.String str27 = locale21.getLanguage();
        java.util.Set<java.lang.Character> charSet28 = locale21.getExtensionKeys();
        java.util.Set<java.lang.String> strSet29 = locale21.getUnicodeLocaleKeys();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.parse("eng", strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        boolean boolean35 = strSet29.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str22, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test17489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17489");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 3);
        int int4 = dateTimeZone2.getOffsetFromLocal(0L);
        long long8 = dateTimeZone2.convertLocalToUTC(0L, false, (long) 157);
        boolean boolean10 = dateTimeZone2.isStandardOffset(5431485023664L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3780000 + "'", int4 == 3780000);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3780000L) + "'", long8 == (-3780000L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test17490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17490");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str6 = copticChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        int[] intArray16 = copticChronology5.get((org.joda.time.ReadablePartial) localDateTime14, (long) 43);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime4, intArray16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField21 = copticChronology0.days();
        org.joda.time.DurationField durationField22 = copticChronology0.hours();
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        boolean boolean43 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        boolean boolean64 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime32.getZone();
        long long68 = dateTimeZone66.nextTransition(5431484624742L);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long74 = dateTimeZone70.convertLocalToUTC((long) (byte) 10, false, 1644572659598L);
        long long78 = dateTimeZone70.convertLocalToUTC(1644572643395L, true, 1136091124375922418L);
        long long80 = dateTimeZone66.getMillisKeepLocal(dateTimeZone70, (long) 744);
        org.joda.time.Chronology chronology81 = copticChronology0.withZone(dateTimeZone66);
        java.util.TimeZone timeZone82 = dateTimeZone66.toTimeZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CopticChronology[UTC]" + "'", str6, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 23, 43]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 5431484624742L + "'", long68 == 5431484624742L);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-35999990L) + "'", long74 == (-35999990L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1644536643395L + "'", long78 == 1644536643395L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 744L + "'", long80 == 744L);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test17491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17491");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test17492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17492");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusDays((int) (short) 10);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = locale12.getLanguage();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.lang.String str18 = locale15.getDisplayScript();
        java.lang.String str19 = locale12.getDisplayVariant(locale15);
        java.lang.String str20 = locale11.getDisplayVariant(locale15);
        boolean boolean21 = localDateTime6.equals((java.lang.Object) str20);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime6.getFields();
        int int23 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime6.withCenturyOfEra(165);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.minusMinutes(71189362);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType29 = localDateTime27.getFieldType(35048859);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35048859");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17493");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusYears((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        long long21 = dateTime19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        java.lang.String str24 = dateTimeZone22.getID();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-7339421209419L) + "'", long21 == (-7339421209419L));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
    }

    @Test
    public void test17494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17494");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = copticChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test17495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17495");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property18 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withWeekyear(514);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.plus(readablePeriod21);
        int[] intArray23 = localDateTime2.getValues();
        int int24 = localDateTime2.getMinuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withDayOfYear(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime27.getFieldTypes();
        int int42 = localDateTime27.getDayOfMonth();
        org.joda.time.Chronology chronology43 = localDateTime27.getChronology();
        java.lang.String str44 = localDateTime27.toString();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime27.minusHours(16);
        int int47 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime27.minusMillis(459);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1738, 6, 4, 35590610]");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(chronology43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1738-06-04T09:53:10.610" + "'", str44, "1738-06-04T09:53:10.610");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test17496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17496");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it" + "'", str7, "it");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test17497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17497");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        java.lang.String str1 = copticChronology0.toString();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        long long9 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CopticChronology[UTC]" + "'", str1, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573190643L + "'", long9 == 1644573190643L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17498");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(103981);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfEra(7);
        int int23 = localDateTime22.getMonthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
    }

    @Test
    public void test17499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17499");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        long long8 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        int int10 = property5.getLeapAmount();
        org.joda.time.DurationField durationField11 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property5.addToCopy(0);
        boolean boolean14 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime15 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "673" + "'", str7, "673");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17500");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsText(locale6);
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours(914);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "690" + "'", str7, "690");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }
}
